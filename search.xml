<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java语法</title>
      <link href="/2024/07/20/Java%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/07/20/Java%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-语法"><a href="#Java-语法" class="headerlink" title="Java 语法"></a>Java 语法</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>JDK、JRE、JVM 的关系：<ul><li>JDK：Java Development Kit，Java 开发工具包</li><li>JRE: Java Runtime Environment，Java 运行环境</li><li>JVM：Java Virtual Machine，Java 虚拟机</li><li>JDK 包含 JRE，JRE 包含 JVM</li></ul></li><li>JDK 版本选择<ul><li>目前 JDK1.8（也叫 JDK8，注意不是 JDK18）用得最多</li><li>Java 代码的编译运行流程</li><li>将 Java 源码编译成 Java 字节码。</li><li>使用 JVM 将 Java 字节码转化成机器码。</li><li>JVM 作用：跨平台、内存管理、安全。</li></ul></li><li>JSE、JEE、JME 的区别<ul><li>JSE: Java Standard Edition，标准版</li><li>JEE：Java Enterprise Edition，企业版</li><li>JME: Java Mirco Edition，移动版</li><li>Spring 是 JEE 的轻量级替代品</li><li>SpringBoot 是 Spring + 自动化配置</li></ul></li></ol><h2 id="变量、运算符、输入与输出"><a href="#变量、运算符、输入与输出" class="headerlink" title="变量、运算符、输入与输出"></a>变量、运算符、输入与输出</h2><p>类似于 <code>C#</code>，<code>Java</code> 的所有变量和函数都要定义在 <code>class</code> 中。</p><h3 id="1-1-内置数据类型"><a href="#1-1-内置数据类型" class="headerlink" title="1.1 内置数据类型"></a>1.1 内置数据类型</h3><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230220081436300.png" alt="image-20230220081436300" style="zoom: 67%;" /><h3 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2 常量"></a>1.2 常量</h3><p>使用 <code>final</code> 修饰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-类型转化"><a href="#1-3-类型转化" class="headerlink" title="1.3 类型转化"></a>1.3 类型转化</h3><ul><li><p>显示转化：<code>int x = (int)&#39;A&#39;</code></p></li><li><p>隐式转化：<code>double x = 12, y = 4 * 3.3</code></p><blockquote><p>隐式转化只能从低精度到高精度 显示转化则都可以</p></blockquote></li></ul><h3 id="1-4-表达式"><a href="#1-4-表达式" class="headerlink" title="1.4 表达式"></a>1.4 表达式</h3><p>与 <code>C++</code>、<code>Python3</code> 类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x = (a + b) * c;</span><br><span class="line">x ++;</span><br></pre></td></tr></table></figure><h3 id="1-5-输入"><a href="#1-5-输入" class="headerlink" title="1.5 输入"></a>1.5 输入</h3><ol><li><p>方式一：效率较低，输入规模较小时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String str = sc.next();  <span class="comment">// 读入下一个字符串</span></span><br><span class="line">String line = sc.nextLine();  <span class="comment">// 读入下一行(多个字符串)</span></span><br><span class="line"><span class="keyword">int</span> x = sc.nextInt();  <span class="comment">// 读入下一个整数</span></span><br><span class="line"><span class="keyword">float</span> y = sc.nextFloat();  <span class="comment">// 读入下一个单精度浮点数</span></span><br><span class="line"><span class="keyword">double</span> z = sc.nextDouble();  <span class="comment">// 读入下一个双精度浮点数</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：效率较高，输入规模较大时使用。注意需要抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-6-输出"><a href="#1-6-输出" class="headerlink" title="1.6 输出"></a>1.6 输出</h3><ol><li><p>方式一：效率较低，输出规模较小时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入结尾补一个回车</span></span><br><span class="line">System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line"><span class="comment">// 输入结尾不补回车</span></span><br><span class="line">System.out.print(<span class="number">123</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">System.out.print(<span class="string">&quot;yxc\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line"><span class="comment">// 格式化输出  04d代表不足4位 前面会补0</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">//  0004 123.46</span></span><br></pre></td></tr></table></figure><blockquote><p>编辑器快捷：<code>sout</code></p></blockquote></li><li><p>方式二：效率较高，输出规模较大时使用。注意需要抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">// throws Exception 抛出异常</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要手动刷新缓冲区 才会显示输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="1-if-else-语句"><a href="#1-if-else-语句" class="headerlink" title="1. if-else 语句"></a>1. if-else 语句</h3><p>与 <code>C++</code>、<code>Python</code> 中类似。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-switch-语句"><a href="#2-switch-语句" class="headerlink" title="2. switch 语句"></a>2. switch 语句</h3><p>与 <code>C++</code> 中类似。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> day = sc.nextInt();</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                name = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                name = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                name = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                name = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                name = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                name = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                name = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                name = <span class="string">&quot;not valid&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-逻辑运算符与条件表达式"><a href="#3-逻辑运算符与条件表达式" class="headerlink" title="3. 逻辑运算符与条件表达式"></a>3. 逻辑运算符与条件表达式</h3><p>与 <code>C++</code>、<code>Python</code> 类似。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：java 里逻辑表达式只能说 bool 值，不能是 int 值</p></blockquote><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1. while 循环"></a>1. while 循环</h3><p>与 <code>C++</code>、<code>Python</code> 类似，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-do-while-循环"><a href="#2-do-while-循环" class="headerlink" title="2. do while 循环"></a>2. do while 循环</h3><p>与 <code>C++</code>、<code>Python</code> 类似，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i ++ ;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>do while</code> 语句与 <code>while</code> 语句非常相似。唯一的区别是，<code>do while</code> 语句限制性循环体后检查条件。不管条件的值如何，我们都要至少执行一次循环。</p></blockquote><h3 id="3-for-循环"><a href="#3-for-循环" class="headerlink" title="3. for 循环"></a>3. for 循环</h3><p>与 <code>C++</code>、<code>Python</code> 类似，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) &#123;  <span class="comment">// 普通循环</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x: a) &#123;  <span class="comment">// forEach循环</span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编辑器快捷：<code>fori</code></p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>Java</code> 中的数组与 <code>C++</code> 中的数组类似。<strong>数组不可变长</strong></p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><p>与 <code>C++</code> 类似。</p><p>初始化定长数组，长度可以是变量，可以在初始化时赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];  <span class="comment">// 初始化长度为5的int数组，初始值为0</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">float</span>[] b = <span class="keyword">new</span> <span class="keyword">float</span>[n];  <span class="comment">// 初始化长度为n的float数组，初始值为0.0F</span></span><br><span class="line"><span class="keyword">char</span>[] c = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;  <span class="comment">// 初始化长度为3的char数组，初始值为：&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">char</span>[] d = c;  <span class="comment">// d与c地址相同，更改c中的元素，d中的元素也会改变</span></span><br></pre></td></tr></table></figure><blockquote><p>java 里面字符数组就是字符数组，字符串就是 string，二者是相互独立的</p></blockquote><h3 id="2-数组元素的读取与写入"><a href="#2-数组元素的读取与写入" class="headerlink" title="2. 数组元素的读取与写入"></a>2. 数组元素的读取与写入</h3><p>与 <code>C++</code> 类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) &#123;</span><br><span class="line">    System.out.println(a[i] * a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多维数组"><a href="#3-多维数组" class="headerlink" title="3. 多维数组"></a>3. 多维数组</h3><p>与 <code>C++</code> 类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[][] b = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(a[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">System.out.println(b[<span class="number">0</span>][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="4-常用-API"><a href="#4-常用-API" class="headerlink" title="4. 常用 API"></a>4. 常用 <code>API</code></h3><ul><li><p>属性 <code>length</code>：返回数组长度，注意不加小括号</p></li><li><p><code>Arrays.sort()</code>：数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.sort(a);</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.fill(int[] a, int val)</code>：填充数组</p></li><li><p><code>Arrays.toString()</code>：将数组转化为字符串</p></li><li><p><code>Arrays.deepToString()</code>：将多维数组转化为字符串</p></li></ul><h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><h3 id="1-初始化-1"><a href="#1-初始化-1" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;My name is&quot;</span>;</span><br><span class="line">String x = b;  <span class="comment">// 存储到了相同地址  b.hashCode()与x.hashCode()是一样的</span></span><br><span class="line">String c = b + <span class="string">&quot;yxc&quot;</span>;  <span class="comment">// String可以通过加号拼接</span></span><br><span class="line">String d = <span class="string">&quot;My age is &quot;</span> + <span class="number">18</span>;  <span class="comment">// int会被隐式转化成字符串&quot;18&quot;</span></span><br><span class="line">String str = String.format(<span class="string">&quot;My age is %d&quot;</span>, <span class="number">18</span>);  <span class="comment">// 格式化字符串，类似于C++中的sprintf</span></span><br><span class="line">String money_str = <span class="string">&quot;123.45&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> money_dou = Double.parseDouble(money_str);  <span class="comment">// String转double</span></span><br><span class="line"><span class="keyword">int</span> money_int = Interger.parseInt(money_str) <span class="comment">// String转int</span></span><br></pre></td></tr></table></figure><p><strong>访问 String 中的字符：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++ ) &#123;</span><br><span class="line">    System.out.print(str.charAt(i));  <span class="comment">// 等价于str[i] 只能读取，不能写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只读变量，不能修改，例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;Hello &quot;</span>;</span><br><span class="line">System.out.println(a.hashCode())  <span class="comment">// 输出-2137068114</span></span><br><span class="line">a += <span class="string">&quot;World&quot;</span>;  <span class="comment">// 会构造一个新的字符串</span></span><br><span class="line">System.out.println(a.hashCode())  <span class="comment">// 输出-862545276</span></span><br></pre></td></tr></table></figure><h3 id="2-StringBuilder、StringBuffer"><a href="#2-StringBuilder、StringBuffer" class="headerlink" title="2. StringBuilder、StringBuffer"></a>2. StringBuilder、StringBuffer</h3><ul><li><p><code>String</code> 不能被修改，如果打算修改字符串，可以使用 <code>StringBuilder</code> 和 <code>StringBuffer</code>。</p></li><li><p><code>StringBuffer</code> 线程安全，速度较慢；<code>StringBuilder</code> 线程不安全，速度较快。</p><blockquote><p>所以单线程用 <code>StringBuilder</code>，多线程用 <code>StringBuffer</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Hello &quot;</span>);  <span class="comment">// 初始化 该类无String类所继承的方法</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 拼接字符串</span></span><br><span class="line">sb.reverse() <span class="comment">// 翻转字符串，不会返回新的</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); i ++ ) &#123;</span><br><span class="line">    sb.setCharAt(i, (<span class="keyword">char</span>)(sb.charAt(i) + <span class="number">1</span>));  <span class="comment">// 读取和写入字符 将第i位设置为...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-常用-API："><a href="#3-常用-API：" class="headerlink" title="3. 常用 API："></a>3. 常用 API：</h4><ul><li><p><code>length()</code>：返回长度</p></li><li><p><code>split(String regex)</code>：分割字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;HeLlo World&quot;</span>;</span><br><span class="line">String[] strs = a.split(<span class="string">&quot; &quot;</span>) <span class="comment">// 以空格分割</span></span><br><span class="line"><span class="keyword">for</span>(String str : strs)&#123;  <span class="comment">// forEach遍历</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>indexOf(char c)</code>、<code>indexOf(String str)</code>：查找字符或字符串，找不到返回 <code>-1</code></p></li><li><p><code>equals()</code>：判断两个字符串是否相等，注意不能直接用 <code>==</code></p></li><li><p><code>compareTo()</code>：判断两个字符串的字典序大小，负数表示小于，<code>0</code> 表示相等，正数表示大于</p></li><li><p><code>startsWith()</code>：判断是否以某个前缀开头</p></li><li><p><code>endsWith()</code>：判断是否以某个后缀结尾</p></li><li><p><code>trim()</code>：去掉首尾的空白字符</p></li><li><p><code>toLowerCase()</code>：全部用小写字符</p></li><li><p><code>toUpperCase()</code>：全部用大写字符</p></li><li><p><code>replace(char oldChar, char newChar)</code>：替换字符</p><blockquote><p><code>replace(String oldRegex, String newRegex)</code>：替换字符串</p></blockquote></li><li><p><code>substring(int beginIndex, int endIndex)</code>：返回 <code>[beginIndex, endIndex)</code> 中的子串（前开后闭）</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>Java 的所有变量和函数都要定义在类中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(max(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">        fill(a, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(a));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] b = getArray2d(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值可以为一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getArray2d(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态变量和静态方法"><a href="#静态变量和静态方法" class="headerlink" title="静态变量和静态方法"></a>静态变量和静态方法</h2><h3 id="1-成员变量与成员方法"><a href="#1-成员变量与成员方法" class="headerlink" title="1. 成员变量与成员方法"></a>1. 成员变量与成员方法</h3><p><code>Java</code> 的所有变量和函数都要定义在类中。</p><p>在类中，使用 <code>static</code> 修饰符修饰的属性（成员变量）称为静态变量，也可以称为类变量，常量称为静态常量，方法称为静态方法或类方法，它们统称为静态成员，归整个类所有。</p><p>静态成员不依赖于类的特定实例，被类的所有实例共享，就是说 <code>static</code> 修饰的方法或者变量不需要依赖于对象来进行访问，只要这个类被加载，<code>java</code> 虚拟机就可以根据类名找到它们。</p><p>调用静态成员的语法形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.静态成员(变量or函数)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>static 修饰的成员变量和方法，从属于类。</li><li>普通变量和方法从属于对象。</li><li><strong>静态方法不能调用非静态成员，只能调用静态函数和静态变量，否则编译会报错</strong></li></ul><h3 id="2-静态变量与实例变量"><a href="#2-静态变量与实例变量" class="headerlink" title="2. 静态变量与实例变量"></a>2. 静态变量与实例变量</h3><p>类的成员变量可以分为以下两种：</p><ol><li>静态变量（或称为类变量），指被 static 修饰的成员变量。</li><li>实例变量，指没有被 static 修饰的成员变量。</li></ol><p>静态变量与实例变量的区别如下：</p><p>1）静态变量</p><ul><li>运行时，Java 虚拟机只为静态变量分配一次内存，在加载类的过程中完成静态变量的内存分配。</li><li>在类的内部，可以在任何方法内直接访问静态变量。</li><li>在其他类中，可以通过类名访问该类中的静态变量。</li></ul><p>2）实例变量</p><ul><li>每创建一个实例，Java 虚拟机就会为实例变量分配一次内存。</li><li>在类的内部，可以在非静态方法中直接访问实例变量。</li><li>在本类的静态方法或其他类中则需要通过类的实例对象进行访问。</li></ul><p>静态变量在类中的作用如下：</p><ul><li><p>静态变量可以被类的所有实例共享，因此静态变量可以作为实例之间的共享数据，增加实例之间的交互性。</p></li><li><p>如果类的所有实例都包含一个相同的常量属性，则可以把这个属性定义为静态常量类型，从而节省内存空间。例如，在类中定义一个静态常量 PI。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = <span class="number">3.14159256</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>eg：</strong>创建一个带静态变量的类，然后在 main() 方法中访问该变量并输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticVar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str2 = <span class="string">&quot;World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 直接访问str1</span></span><br><span class="line">        String accessVar1 = str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 1 次访问静态变量，结果为：&quot;</span>+accessVar1);</span><br><span class="line">        <span class="comment">// 通过类名访问 str1</span></span><br><span class="line">        String accessVar2 = StaticVar.str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 2 次访问静态变量，结果为：&quot;</span>+accessVar2);</span><br><span class="line">        <span class="comment">// 通过对象 svt1访问 str1</span></span><br><span class="line">        StaticVar svt1 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">        svt1.str1 = svt1.str1+str2;</span><br><span class="line">        String accessVar3 = svt1.str1;</span><br><span class="line">        System.out.println(<span class="string">&quot;第3次访向静态变量，结果为：&quot;</span>+accessVar3);</span><br><span class="line">        <span class="comment">// 通过对象 svt2访问 str1</span></span><br><span class="line">        StaticVar svt2 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">        String accessVar4 = svt2.str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 4 次访问静态变量，结果为：&quot;</span>+accessVar4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序后的结果如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第 <span class="number">1</span> 次访问静态变量，结果为：HelloWorld!</span><br><span class="line">第 <span class="number">2</span> 次访问静态变量，结果为：HelloWorld!</span><br><span class="line">第 <span class="number">3</span> 次访向静态变量，结果为：HelloWorld!</span><br><span class="line">第 <span class="number">4</span> 次访问静态变量，结果为：HelloWorld!World!</span><br></pre></td></tr></table></figure><p>从运行结果可以看出，在类中定义静态的属性（成员变量），在 main() 方法中可以直接访问，也可以通过类名访问，还可以通过类的实例对象来访问。</p><blockquote><p>注意：静态变量是被多个实例所共享的。</p></blockquote><h3 id="3-静态方法与实例方法"><a href="#3-静态方法与实例方法" class="headerlink" title="3. 静态方法与实例方法"></a>3. 静态方法与实例方法</h3><p>与成员变量类似，成员方法也可以分为以下两种：</p><ol><li>静态方法（或称为类方法），指被 static 修饰的成员方法。</li><li>实例方法，指没有被 static 修饰的成员方法。</li></ol><p>静态方法与实例方法的区别如下：</p><ul><li>静态方法不需要通过它所属的类的任何实例就可以被调用，因此在静态方法中不能使用 this 关键字，也不能直接访问所属类的实例变量和实例方法，但是可以直接访问所属类的静态变量和静态方法。另外，和 this 关键字一样，super 关键字也与类的特定实例相关，所以在静态方法中也不能使用 super 关键字。</li><li>在实例方法中可以直接访问所属类的静态变量、静态方法、实例变量和实例方法。</li></ul><p><strong>eg：</strong>创建一个带静态变量的类，添加几个静态方法对静态变量的值进行修改，然后在 main( ) 方法中调用静态方法并输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;    <span class="comment">// 定义静态变量 count</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例方法 method1</span></span><br><span class="line">        count++;    <span class="comment">// 访问静态变量 count 并赋值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在静态方法 method1()中的 count=&quot;</span>+count);    <span class="comment">// 打印 count</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态方法 method2</span></span><br><span class="line">        count += count;    <span class="comment">// 访问静态变量 count 并赋值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在静态方法 method2()中的 count=&quot;</span>+count);    <span class="comment">// 打印 count</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态方法 PrintCount</span></span><br><span class="line">        count += <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;在静态方法 PrintCount()中的 count=&quot;</span>+count);    <span class="comment">// 打印 count</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticMethod sft = <span class="keyword">new</span> StaticMethod();</span><br><span class="line">        <span class="comment">// 通过实例对象调用实例方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method1() 方法返回值 intro1=&quot;</span>+sft.method1());</span><br><span class="line">        <span class="comment">// 直接调用静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method2() 方法返回值 intro1=&quot;</span>+method2());</span><br><span class="line">        <span class="comment">// 通过类名调用静态方法，打印 count</span></span><br><span class="line">        StaticMethod.PrintCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序后的结果如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在静态方法 method1()中的 count=<span class="number">2</span></span><br><span class="line">method1() 方法返回值 intro1=<span class="number">2</span></span><br><span class="line">在静态方法 method2()中的 count=<span class="number">4</span></span><br><span class="line">method2() 方法返回值 intro1=<span class="number">4</span></span><br><span class="line">在静态方法 PrintCount()中的 count=<span class="number">6</span></span><br></pre></td></tr></table></figure><p>在该程序中，静态变量 count 作为实例之间的共享数据，因此在不同的方法中调用 count，值是不一样的。从该程序中可以看出，在静态方法 method2() 和 PrintCount() 中是不可以调用非静态方法 method1() 的，而在 method1() 方法中可以调用静态方法 method2() 和 PrintCount()。</p><p>在访问非静态方法时，需要通过实例对象来访问，而在访问静态方法时，可以直接访问，也可以通过类名来访问，还可以通过实例化对象来访问。</p><h3 id="3-静态代码块与非静态代码块"><a href="#3-静态代码块与非静态代码块" class="headerlink" title="3. 静态代码块与非静态代码块"></a>3. 静态代码块与非静态代码块</h3><p>静态代码块指 Java 类中的 static{ } 代码块，主要用于初始化类，为类的静态变量赋初始值，提升程序性能。</p><p>静态代码块的特点如下：</p><ul><li>静态代码块类似于一个方法，但它不可以存在于任何方法体中。</li><li>静态代码块可以置于类中的任何地方，类中可以有多个静态初始化块。</li><li>Java 虚拟机在加载类时执行静态代码块，所以很多时候会将一些只需要进行一次的初始化操作都放在 static 代码块中进行。</li><li>如果类中包含多个静态代码块，则 Java 虚拟机将按它们在类中出现的顺序依次执行它们，每个静态代码块只会被执行一次。</li><li>静态代码块与静态方法一样，不能直接访问类的实例变量和实例方法，而需要通过类的实例对象来访问。</li></ul><p><strong>eg：</strong>编写一个 Java 类，在类中定义一个静态变量，然后使用静态代码块修改静态变量的值。最后在 main() 方法中进行测试和输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    &#123; <span class="comment">// “&#123;” 前没加 static -&gt; 非静态代码块</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;非静态代码块 count=&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">// “&#123;” 前加 static -&gt; 静态代码块</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块1 count=&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">// “&#123;” 前加 static -&gt; 静态代码块</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块2 count=&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************** StaticCode1 执行 ***************&quot;</span>);</span><br><span class="line">        StaticCode sct1 = <span class="keyword">new</span> StaticCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;*************** StaticCode2 执行 ***************&quot;</span>);</span><br><span class="line">        StaticCode sct2 = <span class="keyword">new</span> StaticCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述示例，为了说明静态代码块只被执行一次，特地添加了非静态代码块作为对比，并在主方法中创建了两个类的实例对象。上述示例的执行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">静态代码块<span class="number">1</span> count=<span class="number">1</span></span><br><span class="line">静态代码块<span class="number">2</span> count=<span class="number">2</span></span><br><span class="line">*************** StaticCode1 执行 ***************</span><br><span class="line">非静态代码块 count=<span class="number">3</span></span><br><span class="line">*************** StaticCode2 执行 ***************</span><br><span class="line">非静态代码块 count=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>上述代码中 { } 代码块为非静态代码块，非静态代码块是在创建对象时自动执行的代码，不创建对象不执行该类的非静态代码块。代码域中定义的变量都是局部的，只有域中的代码可以调用。</p><h3 id="4-利用-static-创建全局变量的一种方式"><a href="#4-利用-static-创建全局变量的一种方式" class="headerlink" title="4. 利用 static 创建全局变量的一种方式"></a>4. 利用 static 创建全局变量的一种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Argument</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">1</span>; <span class="comment">// 常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Argument.x); <span class="comment">// 调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h2><h3 id="1-源文件声明规则"><a href="#1-源文件声明规则" class="headerlink" title="1.源文件声明规则"></a>1.源文件声明规则</h3><ul><li>一个源文件中<strong>只能有一个</strong><code>public</code>类。</li><li>一个源文件可以有多个非<code>public</code>类。</li><li>源文件的名称应该和<code>public</code>类的类名保持一致。</li><li>每个源文件中，先写<code>package</code>语句，再写<code>import</code>语句，最后定义类。</li><li>同一个目录下不需要<code>import 类名</code></li></ul><h3 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h3><h4 id="2-1-不同修饰符的区别"><a href="#2-1-不同修饰符的区别" class="headerlink" title="2.1 不同修饰符的区别"></a>2.1 不同修饰符的区别</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307142819546.png" alt="image-20230307142819546"></p><h5 id="修饰类和接口时"><a href="#修饰类和接口时" class="headerlink" title="修饰类和接口时"></a>修饰类和接口时</h5><p><strong>public</strong></p><blockquote><p>当一个类被 public 修饰时，该类可以被所有其他类访问。当被访问的公共类与访问类不在同一个包的时候，需要通过 import 语句加载被访问的类。</p></blockquote><p><strong>default（class 前啥也不写）</strong></p><blockquote><p>当一个类被 default 修饰时，该类可以被所有其他类访问。当被访问的公共类与访问类不在同一个包的时候，不能访问。</p></blockquote><hr><h5 id="修饰变量时"><a href="#修饰变量时" class="headerlink" title="修饰变量时"></a>修饰变量时</h5><p><strong>public</strong></p><blockquote><p>使用 public 修饰的字段，new 的对象可以直接操作该字段。如赋值：<code>person.name = &quot;ldx&quot;</code></p></blockquote><p><strong>private</strong></p><blockquote><p>1.使用 private 修饰的字段，new 的对象只能通过对象内部的方法间接的操作该字段。如：<code>person.setName(&quot;ldx&quot;)</code>，这时该方法可检查传入的参数，这样外部代码就没有任何机会把<code>name</code>设置为不合理的值。</p><p>2.只能在类的内部访问，无法被其他类访问。如果一个类内部还定义了嵌套类，那么，嵌套类拥有访问<code>private</code>的权限</p><p>注意：嵌套类和子孙类有明显区别，子孙类是继承关系</p></blockquote><p><strong>protected</strong></p><blockquote><p>使用<code>protected</code>修饰的字段可以被子类访问，以及子类的子类。作用于继承关系。</p></blockquote><hr><h5 id="修饰方法时"><a href="#修饰方法时" class="headerlink" title="修饰方法时"></a>修饰方法时</h5><p><strong>public</strong></p><blockquote><p>使用 public 修饰的方法，new 的对象可以调用。</p></blockquote><p><strong>private</strong></p><blockquote><p>使用 private 修饰的方法，new 的对象不能调用，只能在类内部调用，子类也无法调用。</p></blockquote><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// new 的对象可调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2019</span>); <span class="comment">// 调用 private 方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new 的对象不能调用，只能在类内部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>protected</strong></p><blockquote><p>使用<code>protected</code>修饰的方法可以被子类调用，以及子类的子类。作用于继承关系。</p></blockquote><hr><h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><p>Java 还提供了一个<code>final</code>修饰符。<code>final</code>与访问权限不冲突，它有很多作用。</p><p>用<code>final</code>修饰<code>class</code>可以阻止被继承：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">// 无法被继承:</span><br><span class="line">public final class Hello &#123;</span><br><span class="line">    private int n = 0;</span><br><span class="line">    protected void hi(int t) &#123;</span><br><span class="line">        long i = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>final</code>修饰<code>method</code>可以阻止被子类覆写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    // 无法被覆写:</span><br><span class="line">    protected final void hi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>final</code>修饰<code>field</code>可以阻止被重新赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    private final int n = 0;</span><br><span class="line">    protected void hi() &#123;</span><br><span class="line">        this.n = 1; // error!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>final</code>修饰局部变量可以阻止被重新赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        t = <span class="number">1</span>; <span class="comment">// error!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-方法相关"><a href="#2-2-方法相关" class="headerlink" title="2.2 方法相关"></a>2.2 方法相关</h4><h5 id="this-变量"><a href="#this-变量" class="headerlink" title="this 变量"></a>this 变量</h5><p>在方法内部，可以使用一个隐含的变量<code>this</code>，它始终指向当前实例。因此，通过<code>this.field</code>就可以访问当前实例的字段。</p><p>如果没有命名冲突，可以省略<code>this</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name; <span class="comment">// 相当于 this.name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上<code>this</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 前面的 this 不可少，少了就变成局部变量 name 了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h5><ul><li><p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">15</span>; <span class="comment">// n 的值为15</span></span><br><span class="line">        p.setAge(n); <span class="comment">// 传入 n 的值</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15</span></span><br><span class="line">        n = <span class="number">20</span>; <span class="comment">// n 的值改为20</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15还是20?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方（因为指向同一个对象嘛）</p><p>eg1：思考下面的例子为什么输出一次<code>Homer Simpson</code>，一次<code>Bart Simpson</code>?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String[] fullname = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;Homer&quot;</span>, <span class="string">&quot;Simpson&quot;</span> &#125;;</span><br><span class="line">        p.setName(fullname); <span class="comment">// 传入 fullname 数组</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Homer Simpson&quot;</span></span><br><span class="line">        fullname[<span class="number">0</span>] = <span class="string">&quot;Bart&quot;</span>; <span class="comment">// fullname 数组的第一个元素修改为&quot;Bart&quot;</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// 输出 &quot;Bart Simpson&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.name[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String[] name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>eg2：思考下面的例子为什么输出两次<code>Bob</code>?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String bob = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">        p.setName(bob); <span class="comment">// 传入 bob 变量</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Bob&quot;</span></span><br><span class="line">        bob = <span class="string">&quot;Alice&quot;</span>; <span class="comment">// bob 改名为 Alice</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Bob&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因为 String 是不可变的，当修改实参时是 new 一个新的 String 对象，故修改新的值与原来的 String 没有关系</strong></p></li></ul><hr><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>可变参数用<code>类型...</code>定义，可变参数相当于数组类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String... names)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>setNames()</code>就定义了一个可变参数。调用时，可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Group g = <span class="keyword">new</span> Group();</span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="string">&quot;Xiao Hong&quot;</span>, <span class="string">&quot;Xiao Jun&quot;</span>); <span class="comment">// 传入3个 String</span></span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="string">&quot;Xiao Hong&quot;</span>); <span class="comment">// 传入2个 String</span></span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>); <span class="comment">// 传入1个 String</span></span><br><span class="line">g.setNames(); <span class="comment">// 传入0个 String</span></span><br></pre></td></tr></table></figure><p>完全可以把可变参数改写为<code>String[]</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String[] names)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，调用方需要自己先构造<code>String[]</code>，比较麻烦。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Group g = <span class="keyword">new</span> Group();</span><br><span class="line">g.setNames(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;Xiao Ming&quot;</span>, <span class="string">&quot;Xiao Hong&quot;</span>, <span class="string">&quot;Xiao Jun&quot;</span>&#125;); <span class="comment">// 传入1个 String[]</span></span><br></pre></td></tr></table></figure><p>另一个问题是，调用方可以传入<code>null</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Group g = <span class="keyword">new</span> Group();</span><br><span class="line">g.setNames(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>而可变参数可以保证无法传入<code>null</code>，因为传入 0 个参数时，接收到的实际值是一个空数组而不是<code>null</code>。</p><h4 id="2-3-类的继承"><a href="#2-3-类的继承" class="headerlink" title="2.3 类的继承"></a>2.3 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260454548196032">类的继承</a></h4><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让<code>Student</code>从<code>Person</code>继承时，<code>Student</code>就获得了<code>Person</code>的所有功能，我们只需要为<code>Student</code>编写新增的功能。</p><p>Java 使用<code>extends</code>关键字来实现继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不要重复 name 和 age 字段/方法,</span></span><br><span class="line">    <span class="comment">// 只需要定义新增 score 字段/方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，通过继承，<code>Student</code>只需要编写额外的功能，不再需要重复代码。</p><blockquote><p>注意：子类自动获得了父类的所有字段，严禁定义与父类重名的字段！</p></blockquote><h5 id="继承树"><a href="#继承树" class="headerlink" title="继承树"></a>继承树</h5><ul><li><p>注意到我们在定义<code>Person</code>的时候，没有写<code>extends</code>。在 Java 中，没有明确写<code>extends</code>的类，编译器会自动加上<code>extends Object</code>。所以，任何类，除了<code>Object</code>，都会继承自某个类。下图是<code>Person</code>、<code>Student</code>的继承树：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230221082015181.png" alt="image-20230221082015181"></p></li><li><p>Java 只允许一个 class 继承自一个类，因此，一个类有且仅有一个父类。只有<code>Object</code>特殊，它没有父类。</p><p>类似的，如果我们定义一个继承自<code>Person</code>的<code>Teacher</code>，它们的继承树关系如下：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230221082028215.png" alt="image-20230221082028215"></p></li></ul><h5 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h5><ul><li><p>继承有个特点，就是子类无法访问父类的<code>private</code>字段或者<code>private</code>方法。例如，<code>Student</code>类就无法访问<code>Person</code>类的<code>name</code>和<code>age</code>字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name; <span class="comment">// 编译错误：无法访问 name 字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这使得继承的作用被削弱了。为了让子类可以访问父类的字段，我们需要把<code>private</code>改为<code>protected</code>。用<code>protected</code>修饰的字段可以被子类访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name; <span class="comment">// OK!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因此，<code>protected</code>关键字可以把字段和方法的访问权限控制在继承树内部，一个<code>protected</code>字段和方法可以被其子类，以及子类的子类所访问。</p></li></ul><h5 id="super"><a href="#super" class="headerlink" title="super"></a>super</h5><p><code>super</code>关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="keyword">super</span>.name; <span class="comment">// name 为 protected 修饰的字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若父类中的<code>protected</code>修饰的<code>name</code>字段，可在子类中通过<code>super.name</code>直接访问</p><p>若父类中的<code>private</code>修饰的<code>name</code>字段，可在子类中通过<code>super.getName()</code>间接访问</p></blockquote><p>实际上，这里使用<code>super.name</code>，或者<code>this.name</code>，或者<code>name</code>，效果都是一样的。编译器会自动定位到父类的<code>name</code>字段。</p><p>但是，在某些时候，就必须使用<code>super</code>。我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// Person 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"><span class="comment">// Student 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为在 Java 中，任何<code>class</code>的构造方法，第一行语句必须是调用父类的构造方法。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code>，所以，<code>Student</code>类的构造方法实际上是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">// 自动调用父类的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>Person</code>类并没有无参数的构造方法，因此，编译失败。</p><p>解决方法是调用<code>Person</code>类存在的某个构造方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age); <span class="comment">// 调用父类的构造方法 Person(String, int)</span></span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以正常编译了！</p><p>因此我们得出结论：如果父类没有默认的构造方法，子类就必须显式调用<code>super()</code>并给出参数以便让编译器定位到父类的一个合适的构造方法。</p><p>这里还顺带引出了另一个问题：即<strong>子类不会继承造方法</strong>。子类默认的构造方法是编译器自动生成的，不是继承的。</p><h5 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h5><p>一个引用类型为<code>Person</code>的变量，可以指向<code>Student</code>类型的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>因为<code>Student</code>继承自<code>Person</code>，因此，它拥有<code>Person</code>的全部功能。<code>Person</code>类型的变量，如果指向<code>Student</code>类型的实例，对它进行操作，是没有问题的！</p><p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。</p><p>向上转型实际上是把一个子类型安全地变为更加抽象的父类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">Person p = s; <span class="comment">// upcasting, ok</span></span><br><span class="line">Object o1 = p; <span class="comment">// upcasting, ok</span></span><br><span class="line">Object o2 = s; <span class="comment">// upcasting, ok</span></span><br></pre></td></tr></table></figure><p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code>。</p><h4 id="2-4-类的多态"><a href="#2-4-类的多态" class="headerlink" title="2.4 类的多态"></a>2.4 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260455778791232">类的多态</a></h4><h5 id="覆写（Override）"><a href="#覆写（Override）" class="headerlink" title="覆写（Override）"></a>覆写（Override）</h5><p>在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。</p><p><code>Override</code>和<code>Overload</code>不同：</p><ul><li>如果方法签名不同，就是<code>Overload</code>，<code>Overload</code>方法是一个新方法；</li><li>如果方法签名相同，并且返回值也相同，就是<code>Override</code>。</li></ul><blockquote><p>注意：方法名相同，方法参数相同，但方法返回值不同，也是不同的方法。在 Java 程序中，出现这种情况，编译器会报错。</p></blockquote><p>在上一节中，我们已经知道，引用变量的声明类型可能与其实际类型不符，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>现在，我们考虑一种情况，如果子类覆写了父类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">// 子类覆写父类的 run()函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Person.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run(); <span class="comment">// 应该打印 Person.run 还是 Student.run?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，一个实际类型为<code>Student</code>，引用类型为<code>Person</code>的变量，调用其<code>run()</code>方法，调用的是<code>Person</code>还是<code>Student</code>的<code>run()</code>方法？</p><p>运行一下上面的代码就可以知道，实际上调用的方法是<code>Student</code>的<code>run()</code>方法。因此可得出结论：</p><p><strong>Java 的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。</strong></p><p>这个非常重要的特性在面向对象编程中称之为多态。它的英文拼写非常复杂：Polymorphic。</p><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">p.run(); <span class="comment">// 无法确定运行时究竟调用哪个 run()方法</span></span><br></pre></td></tr></table></figure><p>有童鞋会问，从上面的代码一看就明白，肯定调用的是<code>Student</code>的<code>run()</code>方法啊。</p><p>但是，假设我们编写这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTwice</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">    p.run();</span><br><span class="line">    p.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它传入的参数类型是<code>Person</code>，我们是无法知道传入的参数实际类型究竟是<code>Person</code>，还是<code>Student</code>，还是<code>Person</code>的其他子类，因此，也无法确定调用的是不是<code>Person</code>类定义的<code>run()</code>方法。</p><p>所以，多态的特性就是，运行期才能动态决定调用的子类方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。这种不确定性的方法调用，究竟有什么作用？</p><p>我们还是来举栗子。</p><p>假设我们定义一种收入，需要给它报税，那么先定义一个<code>Income</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于工资收入，可以减去一个基数，那么我们可以从<code>Income</code>派生出<code>SalaryIncome</code>，并覆写<code>getTax()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你享受国务院特殊津贴，那么按照规定，可以全部免税：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们要编写一个报税的财务软件，对于一个人的所有收入进行报税，可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">        total = total + income.getTax();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateCouncilSpecialAllowance</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 给一个有普通收入、工资收入和享受国务院特殊津贴的小伙伴算税:</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">            <span class="keyword">new</span> StateCouncilSpecialAllowance(<span class="number">15000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察<code>totalTax()</code>方法：利用多态，<code>totalTax()</code>方法只需要和<code>Income</code>打交道，它完全不需要知道<code>Salary</code>和<code>StateCouncilSpecialAllowance</code>的存在，就可以正确计算出总的税。如果我们要新增一种稿费收入，只需要从<code>Income</code>派生，然后正确覆写<code>getTax()</code>方法就可以。把新的类型传入<code>totalTax()</code>，不需要修改任何代码。</p><p>可见，多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。</p><h5 id="覆写-Object-方法"><a href="#覆写-Object-方法" class="headerlink" title="覆写 Object 方法"></a>覆写 Object 方法</h5><p>因为所有的<code>class</code>最终都继承自<code>Object</code>，而<code>Object</code>定义了几个重要的方法：</p><ul><li><code>toString()</code>：把 instance 输出为<code>String</code>；</li><li><code>equals()</code>：判断两个 instance 是否逻辑相等；</li><li><code>hashCode()</code>：计算一个 instance 的哈希值。</li></ul><p>在必要的情况下，我们可以覆写<code>Object</code>的这几个方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 显示更有意义的字符串:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person:name=&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较是否相等:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当且仅当 o 为 Person 类型:</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            Person p = (Person) o;</span><br><span class="line">            <span class="comment">// 并且 name 字段相同时，返回 true:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 hash:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用-super"><a href="#调用-super" class="headerlink" title="调用 super"></a>调用 super</h5><p>在子类的覆写方法中，如果<strong>要调用父类的被覆写的方法</strong>，可以通过<code>super</code>来调用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的 hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h5><p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为<code>final</code>。用<code>final</code>修饰的方法不能被<code>Override</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// compile error: 不允许覆写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类不希望任何其他类继承自它，那么可以把这个类本身标记为<code>final</code>。用<code>final</code>修饰的类不能被继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile error: 不允许继承自 Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一个类的实例字段，同样可以用<code>final</code>修饰。用<code>final</code>修饰的字段在初始化后不能被修改。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name = <span class="string">&quot;Unamed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>final</code>字段重新赋值会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;New Name&quot;</span>; <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure><p>可以在构造方法中初始化 final 字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法更为常用，因为可以保证实例一旦创建，其<code>final</code>字段就不可修改。</p><h4 id="2-5-抽象类"><a href="#2-5-抽象类" class="headerlink" title="2.5 抽象类"></a>2.5 抽象类</h4><h5 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个<code>class</code>定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用<code>abstract</code>修饰。</p><p>因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。</p><p>使用<code>abstract</code>修饰的类就是抽象类。我们无法实例化一个抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person(); <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>无法实例化的抽象类有什么用？</p><p>因为<strong>抽象类本身被设计成只能用于被继承</strong>，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，抽象方法实际上相当于定义了“规范”。</p><p>例如，<code>Person</code>类定义了抽象方法<code>run()</code>，那么，在实现子类<code>Student</code>的时候，就必须覆写<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="面向抽象编程"><a href="#面向抽象编程" class="headerlink" title="面向抽象编程"></a>面向抽象编程</h5><p>当我们定义了抽象类<code>Person</code>，以及具体的<code>Student</code>、<code>Teacher</code>子类的时候，我们可以通过抽象类<code>Person</code>类型去引用具体的子类的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person s = <span class="keyword">new</span> Student();</span><br><span class="line">Person t = <span class="keyword">new</span> Teacher();</span><br></pre></td></tr></table></figure><p>这种引用抽象类的好处在于，我们对其进行方法调用，并不关心<code>Person</code>类型变量的具体子类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不关心 Person 变量的具体子类型:</span></span><br><span class="line">s.run();</span><br><span class="line">t.run();</span><br></pre></td></tr></table></figure><p>同样的代码，如果引用的是一个新的子类，我们仍然不关心具体类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 同样不关心新的子类是如何实现 run()方法的：</span><br><span class="line">Person e = new Employee();</span><br><span class="line">e.run();</span><br></pre></td></tr></table></figure><p>这种尽量引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程。</p><p>面向抽象编程的本质就是：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心。</li></ul><h3 id="3-接口"><a href="#3-接口" class="headerlink" title="3. 接口"></a>3. 接口</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在抽象类中，抽象方法本质上是定义接口规范：即规定高层类的接口，从而保证所有子类都有相同的接口实现，这样，多态就能发挥出威力。</p><p>如果一个抽象类没有字段，<strong>所有方法全部都是抽象方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以把该抽象类改写为接口：<code>interface</code>。</p><p>在 Java 中，使用<code>interface</code>可以声明一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓<code>interface</code>，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有。因为接口定义的所有方法默认都是<code>public abstract</code>的，所以这两个修饰符不需要写出来（写不写效果都一样）。</p><p>当一个具体的<code>class</code>去实现一个<code>interface</code>时，需要使用<code>implements</code>关键字。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，在 Java 中，一个类只能继承自另一个类，不能从多个类继承。但是，**一个类可以实现多个<code>interface</code>**，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span>, <span class="title">Hello</span> </span>&#123; <span class="comment">// 实现了两个 interface</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>Person</code>接口继承自<code>Hello</code>接口，因此，<code>Person</code>接口现在实际上有 3 个抽象方法签名，其中一个来自继承的<code>Hello</code>接口。</p><h4 id="default-方法"><a href="#default-方法" class="headerlink" title="default 方法"></a>default 方法</h4><p>在接口中，可以定义<code>default</code>方法。例如，把<code>Person</code>接口的<code>run()</code>方法改为<code>default</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>);  <span class="comment">// new 一个继承 Person 接口的 student 实例</span></span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">// default 修饰符</span></span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类可以不必覆写<code>default</code>方法。**<code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。**</p><p><code>default</code>方法和抽象类的普通方法是有所不同的。因为<code>interface</code>没有字段，<code>default</code>方法无法访问字段，而抽象类的普通方法可以访问实例字段。</p><h4 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 Hero 的 Zeus</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zeus</span> <span class="keyword">implements</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">&quot;Zeus&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承 Hero 的 Athena</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Athena</span> <span class="keyword">implements</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">&quot;Athena&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner((System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择英雄：&quot;</span>);</span><br><span class="line">        String name =  sc.next();</span><br><span class="line">        Hero hero ;</span><br><span class="line">        <span class="comment">// 先判断是谁</span></span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;Zeus&quot;</span>))</span><br><span class="line">            hero = <span class="keyword">new</span> Zeus(); <span class="comment">// 实例化的对象永远只能是某个具体的子类，但总是通过接口去引用它</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hero = <span class="keyword">new</span> Athena();</span><br><span class="line">        <span class="comment">// 再执行操作</span></span><br><span class="line">        hero.move();   <span class="comment">// 不管子类是啥 这里都是 Hero 接口的方法</span></span><br><span class="line">        hero.getSpeed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有多态，那么 main 函数会如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner((System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择英雄：&quot;</span>);</span><br><span class="line">        String name =  sc.next();</span><br><span class="line">        <span class="comment">// 边判断是谁 边其执行操作</span></span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;Zeus&quot;</span>))&#123;</span><br><span class="line">            Zeus hero = <span class="keyword">new</span> Zeus();</span><br><span class="line">            hero.move();</span><br><span class="line">        hero.getSpeed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 边判断是谁 边其执行操作</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Athena hero = <span class="keyword">new</span> Athena();</span><br><span class="line">            hero.move();</span><br><span class="line">        hero.getSpeed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相比之下，多态可以通过接口去引用具体的子类，进而达到复用代码的目的。</strong></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>生成一个实例时，指定类中某个变量的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Double&gt; stk = <span class="keyword">new</span> Stack&lt;Double&gt;(); <span class="comment">// 这里指定栈 Stack 中存储的为 Double 类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 中栈 stack 实现的部分源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an empty Stack.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        addElement(item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E       obj;</span><br><span class="line">        <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">        obj = peek();</span><br><span class="line">        removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943629175808">集合</a></h2><p>Java 集合的设计有几个特点：</p><ol><li><p>实现了接口和实现类相分离，例如，有序表接口是<code>List</code>，具体的实现类有<code>ArrayList</code>，<code>LinkedList</code>等。</p></li><li><p>支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 只能放入 String 类型</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="List（有序列表的集合）"><a href="#List（有序列表的集合）" class="headerlink" title="List（有序列表的集合）"></a>List（有序列表的集合）</h3><h4 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.List&lt;&gt;</code></li></ul><h4 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h4><ul><li><code>java.util.ArrayList&lt;&gt;</code>：变长数组（比较适合读取操作）</li><li><code>java.util.LinkedList&lt;&gt;</code>：双链表 (比较适合添加、删除操作 )</li></ul><h4 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>add()</code>：在末尾添加一个元素</li><li><code>clear()</code>：清空</li><li><code>size()</code>：返回长度</li><li><code>isEmpty()</code>：是否为空</li><li><code>get(i)</code>：获取第 i 个元素</li><li><code>set(i, val)</code>：将第 i 个元素设置为 val</li></ul><h4 id="4-覆写-equals-方法"><a href="#4-覆写-equals-方法" class="headerlink" title="4. 覆写 equals 方法"></a>4. 覆写 equals 方法</h4><p><code>List</code>的<code>contains(Object o)</code>方法和<code>indexOf(Object o)</code>方法依赖于<code>equals</code>方法。</p><p>因此，要正确使用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，放入的实例必须正确覆写<code>equals()</code>方法，否则，放进去的实例，查</p><p>找不到。我们之所以能正常放入<code>String</code>、<code>Integer</code>这些对象，是因为 Java 标准库定义的这些类已经正确实现了<code>equals()</code>方法。</p><p>eg：以<code>Person</code>对象为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; list = List.of(</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Hong&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        System.out.println(list.contains(<span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>))); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>equals()</code>方法的正确编写方法：</strong></p><ol><li>先确定实例“相等”的逻辑，即哪些字段相等，就认为实例相等；</li><li>用<code>instanceof</code>判断传入的待比较的<code>Object</code>是不是当前类型，如果是，继续比较，否则，返回<code>false</code>；</li><li>对引用类型用<code>Objects.equals()</code>比较，对基本类型直接用<code>==</code>比较。</li></ol><p>使用<code>Objects.equals()</code>比较两个引用类型是否相等的目的是省去了判断<code>null</code>的麻烦。两个引用类型都是<code>null</code>时它们也是相等的。</p><p>如果不调用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，那么放入的元素就不需要实现<code>equals()</code>方法。</p><p>eg：在 Person 中覆写<code>equals()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">        Person p = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.name, p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-遍历list"><a href="#5-遍历list" class="headerlink" title="5. 遍历list"></a>5. 遍历<code>list</code></h4><p>和数组类型，我们要遍历一个<code>List</code>，完全可以用<code>for</code>循环根据索引配合<code>get(int)</code>方法遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种方式并不推荐，一是代码复杂，二是因为<code>get(int)</code>方法只有<code>ArrayList</code>的实现是高效的，换成<code>LinkedList</code>后，索引越大，访问速度越慢。</p><p>所以我们要始终坚持使用迭代器<code>Iterator</code>来访问<code>List</code>。<code>Iterator</code>本身也是一个对象，但它是由<code>List</code>的实例调用<code>iterator()</code>方法的时候创建的。<code>Iterator</code>对象知道如何遍历一个<code>List</code>，并且不同的<code>List</code>类型，返回的<code>Iterator</code>对象实现也是不同的，但<strong>总是具有最高的访问效率</strong>。</p><p><code>Iterator</code>对象有两个方法：<code>boolean hasNext()</code>判断是否有下一个元素，<code>E next()</code>返回下一个元素。因此，使用<code>Iterator</code>遍历<code>List</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有童鞋可能觉得使用<code>Iterator</code>访问<code>List</code>的代码比使用索引更复杂。但是，要记住，<strong>通过<code>Iterator</code>遍历<code>List</code>永远是最高效的方式</strong>。并且，由于<code>Iterator</code>遍历是如此常用，所以，Java 的<code>for each</code>循环本身就可以帮我们使用<code>Iterator</code>遍历。把上面的代码再改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是我们编写遍历<code>List</code>的常见代码。</p><p>实际上，只要实现了<code>Iterable</code>接口的集合类都可以直接用<code>for each</code>循环来遍历，Java 编译器本身并不知道如何遍历集合对象，但它会自动把<code>for each</code>循环变成<code>Iterator</code>的调用，原因就在于<code>Iterable</code>接口定义了一个<code>Iterator&lt;E&gt; iterator()</code>方法，强迫集合类必须返回一个<code>Iterator</code>实例。</p><h4 id="6-List-和-Array-转换"><a href="#6-List-和-Array-转换" class="headerlink" title="6. List 和 Array 转换"></a>6. List 和 Array 转换</h4><h6 id="List-转-Array"><a href="#List-转-Array" class="headerlink" title="List 转 Array"></a>List 转 Array</h6><ul><li><p>方法一：调用<code>toArray()</code>方法直接返回一个<code>Object[]</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">Object[] array = list.toArray(); <span class="comment">// 由 String 到 Object 类型</span></span><br></pre></td></tr></table></figure><p>这种方法会丢失类型信息，所以实际应用很少。</p></li><li><p>方法二：给<code>toArray(T[])</code>传入一个类型相同的<code>Array</code>，<code>List</code>内部自动把元素复制到传入的<code>Array</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> Integer[<span class="number">3</span>]); <span class="comment">// 由 Integer 到 Integer 类型</span></span><br></pre></td></tr></table></figure><p>如果传入的数组不够大，那么<code>List</code>内部会创建一个新的刚好够大的数组，填充后返回；如果传入的数组比<code>List</code>元素还要多，那么填充完元素后，剩下的数组元素一律填充<code>null</code>。</p></li><li><p>方法三：通过<code>List</code>接口定义的<code>T[] toArray(IntFunction&lt;T[]&gt; generator)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">Integer[] array = list.toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure></li></ul><h6 id="Array-转-List"><a href="#Array-转-List" class="headerlink" title="Array 转 List"></a>Array 转 List</h6><ul><li><p>通过<code>List.of(T...)</code>方法最简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);</span><br></pre></td></tr></table></figure><p>对于 JDK 11 之前的版本，可以使用<code>Arrays.asList(T...)</code>方法把数组转换成<code>List</code>。</p><p>要注意的是，返回的<code>List</code>不一定就是<code>ArrayList</code>或者<code>LinkedList</code>，因为<code>List</code>只是一个接口，如果我们调用<code>List.of()</code>，它返回的是一个只读<code>List</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">        list.add(<span class="number">999</span>); <span class="comment">// UnsupportedOperationException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="1-类"><a href="#1-类" class="headerlink" title="1. 类"></a>1. 类</h4><ul><li><code>java.util.Stack&lt;&gt;</code></li></ul><h4 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h4><ul><li><code>push()</code>：压入元素</li><li><code>pop()</code>：弹出栈顶元素，并返回栈顶元素</li><li><code>peek()</code>：返回栈顶元素</li><li><code>size()</code>：返回长度</li><li><code>empty()</code>：栈是否为空</li><li><code>clear()</code>：清空</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="1-接口-1"><a href="#1-接口-1" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.Queue&lt;&gt;</code></li></ul><h4 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2.实现"></a>2.实现</h4><ul><li><p><code>java.util.LinkedList&lt;&gt;</code>：双链表</p></li><li><p><code>java.util.PriorityQueue&lt;&gt;</code>：优先队列(<strong>堆</strong>)</p><blockquote><p>默认是小根堆，大根堆写法：<code>new PriorityQueue&lt;(Collections.reverseOrder())</code></p></blockquote></li></ul><h4 id="3-函数-1"><a href="#3-函数-1" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>add()</code>：在队尾添加元素</li><li><code>remove()</code>：删除并返回队头</li><li><code>isEmpty()</code>：是否为空</li><li><code>size()</code>：返回长度</li><li><code>peek()</code>：返回队头</li><li><code>clear()</code>：清空</li></ul><h3 id="Set（保证没有重复元素的集合）"><a href="#Set（保证没有重复元素的集合）" class="headerlink" title="Set（保证没有重复元素的集合）"></a>Set（保证没有重复元素的集合）</h3><h4 id="1-接口-2"><a href="#1-接口-2" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.Set&lt;K&gt;</code></li></ul><h5 id="2-实现-2"><a href="#2-实现-2" class="headerlink" title="2. 实现"></a>2. 实现</h5><ul><li><h4 id="java-util-HashSet-lt-K-gt-：哈希表（无序集合）"><a href="#java-util-HashSet-lt-K-gt-：哈希表（无序集合）" class="headerlink" title="java.util.HashSet&lt;K&gt;：哈希表（无序集合）"></a><code>java.util.HashSet&lt;K&gt;</code>：哈希表（无序集合）</h4></li><li><p><code>java.util.TreeSet&lt;K&gt;</code>：平衡树（有序集合，二叉排序树）</p></li></ul><h4 id="3-函数-2"><a href="#3-函数-2" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>add()</code>：添加元素</li><li><code>contains()</code>：是否包含某个元素</li><li><code>remove()</code>：删除元素</li><li><code>size()</code>：返回元素数</li><li><code>isEmpty()</code>：是否为空</li><li><code>clear()</code>：清空</li></ul><p><code>java.util.TreeSet</code>多的几个函数：</p><ul><li><code>ceiling(key)</code>：返回大于等于<code>key</code>的最小元素，不存在则返回<code>null</code></li><li><code>floor(key)</code>：返回小于等于<code>key</code>的最大元素，不存在则返回<code>null</code></li></ul><h3 id="Map（通过键值（key-value）查找的映射表集合）"><a href="#Map（通过键值（key-value）查找的映射表集合）" class="headerlink" title="Map（通过键值（key-value）查找的映射表集合）"></a>Map（通过键值（key-value）查找的映射表集合）</h3><blockquote><p>我们知道，<code>List</code>是一种顺序列表，如果有一个存储学生<code>Student</code>实例的<code>List</code>，要在<code>List</code>中根据<code>name</code>查找某个指定的<code>Student</code>的分数，应该怎么办？最简单的方法是遍历<code>List</code>并判断<code>name</code>是否相等，然后返回指定元素。这种需求其实非常常见，即通过一个键去查询对应的值。使用<code>List</code>来实现存在效率非常低的问题，因为平均需要扫描一半的元素才能确定，而<code>Map</code>这种键值（key-value）映射表的数据结构，作用就是能高效通过<code>key</code>快速查找<code>value</code>（元素）。</p></blockquote><h4 id="1-接口-3"><a href="#1-接口-3" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.Map&lt;K, V&gt;</code></li></ul><h4 id="2-实现-3"><a href="#2-实现-3" class="headerlink" title="2. 实现"></a>2. 实现</h4><ul><li><code>java.util.HashMap&lt;K, V&gt;</code>：哈希表（无序集合）</li><li><code>java.util.TreeMap&lt;K, V&gt;</code>：平衡树（有序集合，二叉排序树）</li></ul><h4 id="3-函数-3"><a href="#3-函数-3" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>put(key, value)</code>：添加关键字和其对应的值</li><li><code>get(key)</code>：返回关键字对应的值</li><li><code>containsKey(key)</code>：是否包含关键字</li><li><code>remove(key)</code>：删除关键字</li><li><code>size()</code>：返回元素数</li><li><code>isEmpty()</code>：是否为空</li><li><code>clear()</code>：清空</li><li><code>entrySet()</code>：获取<code>Map</code>中的所有对象的集合</li><li><code>Map.Entry&lt;K, V&gt;</code>：<code>Map</code>中的对象类型</li><li><code>getKey()</code>：获取关键字</li><li><code>getValue()</code>：获取值</li></ul><p><code>java.util.TreeMap&lt;K, V&gt;</code>多的函数：</p><ul><li><code>ceilingEntry(key)</code>：返回大于等于<code>key</code>的最小元素，不存在则返回<code>null</code></li><li><code>floorEntry(key)</code>：返回小于等于<code>key</code>的最大元素，不存在则返回<code>null</code></li></ul><h4 id="4-遍历Map"><a href="#4-遍历Map" class="headerlink" title="4. 遍历Map"></a>4. 遍历<code>Map</code></h4><p>对<code>Map</code>来说，要遍历<code>key</code>可以使用<code>for each</code>循环遍历<code>Map</code>实例的<code>keySet()</code>方法返回的<code>Set</code>集合，它包含不重复的<code>key</code>的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pear&quot;</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">&quot;banana&quot;</span>, <span class="number">789</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">banana = <span class="number">789</span></span><br><span class="line">apple = <span class="number">123</span></span><br><span class="line">pear = <span class="number">456</span></span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建一个新线程"><a href="#创建一个新线程" class="headerlink" title="创建一个新线程"></a>创建一个新线程</h3><p>Java 用<code>Thread</code>对象表示一个线程，通过<code>Thread</code>类<code>new</code>的实例对象调用<code>start()</code>启动一个新线程</p><p><code>Thread.sleep()</code>可以把<strong>当前线程</strong>暂停一段时间。</p><p>线程的执行代码写在<code>run()</code>方法中，一旦<code>run()</code>方法执行完毕，新线程就结束了</p><blockquote><p>一个线程实例对象只能调用一次<code>start()</code>方法；</p><p>线程调度由操作系统决定，程序本身无法决定调度顺序；</p></blockquote><p><strong>创建方法 1</strong>：从<code>Thread</code>派生一个自定义类，然后覆写<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">// 新线程的执行代码</span></span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常;</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start();  <span class="comment">// 开启新线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常;</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  <span class="comment">// 防止等待的一秒内出现异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main thread&quot;</span>);   <span class="comment">// 不要写在 try 里面 写在 try 里面会立即打印</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main thread</span><br><span class="line">game thread</span><br></pre></td></tr></table></figure><p><code>mian</code>中通过<code>game</code>实例的<code>start</code>方法，启动了一个新的线程，并执行<code>Game</code>类中覆写父类<code>Thread</code>中的<code>run</code>方法，即新线程的执行代码。</p><p>然后<code>main</code>线程与<code>game</code>线程同时<code>sleep</code>，<code>sleep</code>完后再先后各自打印结果。</p><p><strong>创建方法 2</strong>：创建<code>Thread</code>实例时，传入一个<code>Runnable</code>实例：</p><blockquote><p>这样<code>runnable</code>可以复用于多个<code>Thread</code>实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者或者用 Java8 引入的 lambda 语法进一步简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>在 Java 程序中，一个线程对象只能调用一次<code>start()</code>方法启动新线程，并在新线程中执行<code>run()</code>方法。一旦<code>run()</code>方法执行完毕，线程就结束了。因此，Java 线程的状态有以下几种：</p><ul><li><code>New</code>：新创建的线程，尚未执行；</li><li><code>Runnable</code>：运行中的线程，正在执行<code>run()</code>方法的 Java 代码；</li><li><code>Blocked</code>：运行中的线程，因为某些操作被阻塞而挂起；</li><li><code>Waiting</code>：运行中的线程，因为某些操作在等待中；</li><li><code>Timed Waiting</code>：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；</li><li><code>Terminated</code>：线程已终止，因为<code>run()</code>方法执行完毕。</li></ul><p>用一个状态转移图表示如下：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306152329299.png" alt="image-20230306152329299" style="zoom: 80%;" /><p>线程终止的原因有：</p><ul><li>线程正常终止：<code>run()</code>方法执行到<code>return</code>语句返回；</li><li>线程意外终止：<code>run()</code>方法因为未捕获的异常导致线程终止；</li><li>对某个线程的<code>Thread</code>实例调用<code>stop()</code>方法强制终止（强烈不推荐使用）。</li></ul><p>一个线程还可以等待另一个线程直到其运行结束。例如，<code>main</code>线程在启动<code>game</code>线程后，可以通过<code>game.join()</code>等待<code>game</code>线程结束后再继续运行：</p><blockquote><p><code>game.join(1000)</code>也可以指定一个等待时间，超过等待时间后就不再继续等待</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">// 新线程的执行代码</span></span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常;</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常</span></span><br><span class="line">            game.join();  <span class="comment">// main 线程等待 game 线程结束后再继续运行：</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">game thread</span><br><span class="line">main thread</span><br></pre></td></tr></table></figure><h3 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h3><p>如果线程需要执行一个长时间任务，就可能需要能中断线程。中断线程就是其他线程给该线程发一个信号，该线程收到信号后结束执行<code>run()</code>方法，使得自身线程能立刻结束运行。</p><p>我们举个栗子：假设从网络下载一个 100M 的文件，如果网速很慢，用户等得不耐烦，就可能在下载过程中点“取消”，这时，程序就需要中断下载线程的执行。</p><p><strong>中断线程有两种常用方案：</strong></p><ol><li><p>对目标线程调用<code>interrupt()</code>方法可以请求中断一个线程，目标线程通过检测<code>isInterrupted()</code>标志获取自身是否已中断。<br>如果目标线程处于等待状态，该线程会捕获到<code>InterruptedException</code>；</p><blockquote><p>目标线程检测到<code>isInterrupted()</code>为<code>true</code>或者捕获了<code>InterruptedException</code>都应该立刻结束自身线程；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start(); <span class="comment">// game 线程启动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);  <span class="comment">// main 线程睡3秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        game.interrupt(); <span class="comment">// 让 game 线程中断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main run over&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        Player player = <span class="keyword">new</span> Player();</span><br><span class="line">        player.start(); <span class="comment">// play 线程启动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            player.join();  <span class="comment">// game 线程等待 play 线程执行完</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;game interrupted&quot;</span>);  <span class="comment">// game 线程被中断则打印</span></span><br><span class="line">            player.interrupt();  <span class="comment">// 让 player 线程中断</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game run over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">while</span> (!isInterrupted())&#123;  <span class="comment">// 反复判断 player 线程是否被中断</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;player interrupted&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;player thread %d\n&quot;</span>,i++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;player run over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">player thread <span class="number">0</span></span><br><span class="line">player thread <span class="number">1</span></span><br><span class="line">main run over</span><br><span class="line">game interrupted</span><br><span class="line">game run over</span><br><span class="line">player interrupted</span><br><span class="line">player run over</span><br></pre></td></tr></table></figure></li><li><p>另一个常用的中断线程的方法是设置标志位。通常会用一个<code>running</code>标志位来标识线程是否应该继续运行，在外部线程中，通过把<code>game.running</code>置为<code>false</code>，就可以让线程结束。</p><blockquote><p><code>volatile</code>关键字表明<code>running</code>是一个线程间共享的变量。线程间共享变量需要使用<code>volatile</code>关键字标记，确保每个线程都能读取到更新后的变量值。</p><p>为什么要对线程间共享的变量用关键字<code>volatile</code>声明？这涉及到 Java 的内存模型。在 Java 虚拟机中，变量的值保存在主内存中，但是，当线程访问变量时，它会先获取一个副本，并保存在自己的工作内存中。如果线程修改了变量的值，虚拟机会在某个时刻把修改后的值回写到主内存，但是，这个时间是不确定的！</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306163452342.png" alt="image-20230306163452342"></p><p>这会导致如果一个线程更新了某个变量，另一个线程读取的值可能还是更新前的。例如，主内存的变量<code>a = true</code>，线程 1 执行<code>a = false</code>时，它在此刻仅仅是把变量<code>a</code>的副本变成了<code>false</code>，主内存的变量<code>a</code>还是<code>true</code>，在 JVM 把修改后的<code>a</code>回写到主内存之前，其他线程读取到的<code>a</code>的值仍然是<code>true</code>，这就造成了多线程之间共享的变量不一致。</p><p>因此，<code>volatile</code>关键字的目的是告诉虚拟机：</p><ul><li>每次访问变量时，总是获取主内存的最新值；</li><li>每次修改变量后，立刻回写到主内存。</li></ul><p><code>volatile</code>关键字解决的是可见性问题：当一个线程修改了某个共享变量的值，其他线程能够立刻看到修改后的值。</p><p>如果我们去掉<code>volatile</code>关键字，运行上述程序，发现效果和带<code>volatile</code>差不多，这是因为在 x86 的架构下，JVM 回写主内存的速度非常快，但是，换成 ARM 的架构，就会有显著的延迟。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        game.running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;main run over&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;  <span class="comment">// 需要添加 volatile 关键字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">while</span>(running)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;game thread %d\n&quot;</span>,i++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game run over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码执行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">game thread <span class="number">0</span></span><br><span class="line">game thread <span class="number">1</span></span><br><span class="line">main run over</span><br><span class="line">game thread <span class="number">2</span></span><br><span class="line">game run over</span><br></pre></td></tr></table></figure><p><code>game thread 2</code>之所以在<code>main run over</code>之后，是因为<code>runnig</code>设置为<code>false</code>时，上一次<code>while</code>循环的<code>sleep</code>还在等待，随后才输出<code>game thread 2</code>。</p></li></ol><p><strong>注意：</strong></p><p>正在跑的线程不会响应别的线程发出的中断。</p><p><strong>只有 sleep/wait 状态的线程会响应 interrupt。</strong></p><p>如果一个线程正在跑，别的线程给他发 interrupt，它要继续跑到什么时候才会响应 interrupt 呢？得到自己调用 sleep/wait 的时候。</p><p>如果你写了一个计算密集型任务，跑一次要 10 分钟，为了能及时响应别的线程发的 interrupt，可以每跑几秒钟就 sleep(1)一下，确保能及时被 interrupt。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>Java 程序入口就是由 JVM 启动<code>main</code>线程，<code>main</code>线程又可以启动其他线程。当所有线程都运行结束时，JVM 退出，进程结束。</p><p>如果有一个线程没有退出，JVM 进程就不会退出。所以，<strong>必须保证所有线程都能及时结束。</strong></p><p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(LocalTime.now());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个线程不结束，JVM 进程就无法结束。问题是，由谁负责结束这个线程？</p><p>答案是使用守护线程（Daemon Thread）。</p><p>守护线程是指为其他线程服务的线程。<strong>在 JVM 中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</strong></p><p>因此，JVM 退出时，不必关心守护线程是否已结束。</p><p><strong>如何创建守护线程呢？方法和普通线程一样，只是在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimerThread t = <span class="keyword">new</span> TimerThread();</span><br><span class="line">t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>在守护线程中，编写代码要注意：守护线程不能持有任何需要关闭的资源，例如打开文件等，因为虚拟机退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><h4 id="通过-synchronized-加锁"><a href="#通过-synchronized-加锁" class="headerlink" title="通过 synchronized 加锁"></a>通过 synchronized 加锁</h4><p>当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定。因此，任何一个线程都有可能在任何指令处被操作系统暂停，然后在某个时间段后继续执行。</p><p>这个时候，有个单线程模型下不存在的问题就来了：如果多个线程同时读写共享变量，会出现数据不一致的问题。</p><p>我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        <span class="keyword">var</span> dec = <span class="keyword">new</span> DecThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dec.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dec.join();</span><br><span class="line">        System.out.println(Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123; Counter.count += <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123; Counter.count -= <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码很简单，两个线程同时对一个<code>int</code>变量进行操作，一个加 10000 次，一个减 10000 次，最后结果应该是 0，但是，每次运行，结果实际上都是不一样的。</p><p>这是因为对变量进行读取和写入时，结果要正确，必须保证是原子操作。</p><blockquote><p>原子操作是指不能被中断的一个或一系列操作</p></blockquote><p>例如，对于语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = n + 1;</span><br></pre></td></tr></table></figure><p>看上去是一行语句，实际上对应了 3 条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ILOAD</span><br><span class="line">IADD</span><br><span class="line">ISTORE</span><br></pre></td></tr></table></figure><p>我们假设<code>n</code>的值是<code>100</code>，如果两个线程同时执行<code>n = n + 1</code>，得到的结果很可能不是<code>102</code>，而是<code>101</code>，原因在于：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306165409571.png" alt="image-20230306165409571"></p><p>如果线程 1 在执行<code>ILOAD</code>后被操作系统中断，此刻如果线程 2 被调度执行，它执行<code>ILOAD</code>后获取的值仍然是<code>100</code>，最终结果被两个线程的<code>ISTORE</code>写入后变成了<code>101</code>，而不是期待的<code>102</code>。</p><p>这说明多线程模型下，要保证逻辑正确，对共享变量进行读写时，必须保证一组指令以原子方式执行：<strong>即某一个线程执行时，其他线程必须等待：</strong></p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306165426556.png" alt="image-20230306165426556" style="zoom:67%;" /><p><strong>通过加锁和解锁的操作，就能保证 3 条指令总是在一个线程执行期间</strong>，不会有其他线程会进入此指令区间。即使在执行期线程被操作系统中断执行，其他线程也会因为无法获得锁导致无法进入此指令区间。只有执行线程将锁释放后，其他线程才有机会获得锁并执行。这种加锁和解锁之间的代码块我们称之为临界区（Critical Section），任何时候临界区最多只有一个线程能执行。</p><p>可见，保证一段代码的原子性就是通过加锁和解锁实现的。Java 程序使用<code>synchronized</code>关键字对<strong>一个对象进行加锁</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized(lock) &#123;</span><br><span class="line">    n = n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>synchronized</code>保证了代码块在任意时刻最多只有一个线程能执行</strong>。我们把上面的代码用<code>synchronized</code>改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        <span class="keyword">var</span> dec = <span class="keyword">new</span> DecThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dec.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dec.join();</span><br><span class="line">        System.out.println(Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object(); <span class="comment">// Counter 的所有实例锁的是同一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.count -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意到代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Counter.lock) &#123; <span class="comment">// 获取锁</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// 释放锁</span></span><br></pre></td></tr></table></figure><p>它表示<strong>用<code>Counter.lock</code>实例作为锁</strong>，两个线程在执行各自的<code>synchronized(Counter.lock) &#123; ... &#125;</code>代码块时，必须先获得锁，才能进入代码块进行。执行结束后，在<code>synchronized</code>语句块结束会自动释放锁。这样一来，对<code>Counter.count</code>变量进行读写就不可能同时进行。上述代码无论运行多少次，最终结果都是 0。</p><p>使用<code>synchronized</code>解决了多线程同步访问共享变量的正确性问题。但是，它的缺点是带来了性能下降。因为<code>synchronized</code>代码块无法并发执行。此外，加锁和解锁需要消耗一定的时间，所以，<code>synchronized</code>会降低程序的执行效率。</p><p>我们来概括一下如何使用<code>synchronized</code>：</p><ol><li>找出修改共享变量的线程代码块；</li><li>选择一个共享实例作为锁；</li><li>使用<code>synchronized(lockObject) &#123; ... &#125;</code>。</li></ol><p>在使用<code>synchronized</code>的时候，不必担心抛出异常。因为无论是否有异常，都会在<code>synchronized</code>结束处正确释放锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.value += m;</span><br><span class="line">    &#125; <span class="comment">// 无论有无异常，都会在此释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看一个错误使用<code>synchronized</code>的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        <span class="keyword">var</span> dec = <span class="keyword">new</span> DecThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dec.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dec.join();</span><br><span class="line">        System.out.println(Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock1 = <span class="keyword">new</span> Object();  <span class="comment">// 锁的不是同一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock2 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock1) &#123;</span><br><span class="line">                Counter.count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock2) &#123;</span><br><span class="line">                Counter.count -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果并不是 0，这是因为两个线程各自的<code>synchronized</code>锁住的**<em>不是同一个对象</em>**！这使得两个线程各自都可以同时获得锁：因为 JVM 只保证同一个锁在任意时刻只能被一个线程获取，但两个不同的锁在同一时刻可以被两个线程分别获取。</p><p>因此，使用<code>synchronized</code>的时候，获取到的是哪个锁非常重要。锁对象如果不对，代码逻辑就不对。</p><p>我们再看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ts = <span class="keyword">new</span> Thread[] &#123; <span class="keyword">new</span> AddStudentThread(), <span class="keyword">new</span> DecStudentThread(), <span class="keyword">new</span> AddTeacherThread(), <span class="keyword">new</span> DecTeacherThread() &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t : ts) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t : ts) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Counter.studentCount);</span><br><span class="line">        System.out.println(Counter.teacherCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> studentCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> teacherCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddStudentThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.studentCount += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecStudentThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.studentCount -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTeacherThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.teacherCount += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecTeacherThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.teacherCount -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的 4 个线程对两个共享变量分别进行读写操作，但是使用的锁都是<code>Counter.lock</code>这一个对象，这就造成了原本可以并发执行的<code>Counter.studentCount += 1</code>和<code>Counter.teacherCount += 1</code>，现在无法并发执行了，执行效率大大降低。实际上，需要同步的线程可以分成两组：<code>AddStudentThread</code>和<code>DecStudentThread</code>，<code>AddTeacherThread</code>和<code>DecTeacherThread</code>，组之间不存在竞争，因此，应该使用两个不同的锁，即：</p><p><code>AddStudentThread</code>和<code>DecStudentThread</code>使用<code>lockStudent</code>锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Counter.lockStudent) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AddTeacherThread</code>和<code>DecTeacherThread</code>使用<code>lockTeacher</code>锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Counter.lockTeacher) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才能最大化地提高执行效率。</p><h4 id="不需要-synchronized-的操作"><a href="#不需要-synchronized-的操作" class="headerlink" title="不需要 synchronized 的操作"></a>不需要 synchronized 的操作</h4><p>JVM 规范定义了几种原子操作：</p><ul><li>基本类型（<code>long</code>和<code>double</code>除外）赋值，例如：<code>int n = m</code>；</li><li>引用类型赋值，例如：<code>List&lt;String&gt; list = anotherList</code>。</li></ul><p><code>long</code>和<code>double</code>是 64 位数据，JVM 没有明确规定 64 位赋值操作是不是一个原子操作，不过在 x64 平台的 JVM 是把<code>long</code>和<code>double</code>的赋值作为原子操作实现的。</p><p>单条原子操作的语句不需要同步。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void set(int m) &#123;</span><br><span class="line">    synchronized(lock) &#123;</span><br><span class="line">        this.value = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不需要同步。</p><p>对引用也是类似。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void set(String s) &#123;</span><br><span class="line">    this.value = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述赋值语句并不需要同步。</p><p>但是，如果是多行赋值语句，就必须保证是同步操作，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Pair &#123;</span><br><span class="line">    int first;</span><br><span class="line">    int last;</span><br><span class="line">    public void set(int first, int last) &#123;</span><br><span class="line">        synchronized(this) &#123;</span><br><span class="line">            this.first = first;</span><br><span class="line">            this.last = last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些时候，通过一些巧妙的转换，可以把非原子操作变为原子操作。例如，上述代码如果改造成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Pair &#123;</span><br><span class="line">    int[] pair;</span><br><span class="line">    public void set(int first, int last) &#123;</span><br><span class="line">        int[] ps = new int[] &#123; first, last &#125;;</span><br><span class="line">        this.pair = ps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不再需要同步，因为<code>this.pair = ps</code>是引用赋值的原子操作。而语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] ps = new int[] &#123; first, last &#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>ps</code>是方法内部定义的局部变量，每个线程都会有各自的局部变量，互不影响，并且互不可见，并不需要同步。</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>我们知道 Java 程序依靠<code>synchronized</code>对线程进行同步，使用<code>synchronized</code>的时候，锁住的是哪个对象非常重要。</p><p>让线程自己选择锁对象往往会使得代码逻辑混乱，也不利于封装。更好的方法是把<code>synchronized</code>逻辑封装起来。例如，我们编写一个计数器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count -= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;  <span class="comment">// 只是读 不需要加锁</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，线程调用<code>add()</code>、<code>dec()</code>方法时，它不必关心同步逻辑，因为<code>synchronized</code>代码块在<code>add()</code>、<code>dec()</code>方法内部。并且，我们注意到，<code>synchronized</code>锁住的对象是<code>this</code>，即当前实例，这又使得创建多个<code>Counter</code>实例的时候，它们之间互不影响，可以并发执行。</p><p>现在，对于<code>Counter</code>类，多线程可以正确调用。</p><p>如果一个类被设计为允许多线程正确访问，我们就说这个类就是“线程安全”的（thread-safe），上面的<code>Counter</code>类就是线程安全的。Java 标准库的<code>java.lang.StringBuffer</code>也是线程安全的。</p><p>还有一些不变类，例如<code>String</code>，<code>Integer</code>，<code>LocalDate</code>，它们的所有成员变量都是<code>final</code>，多线程同时访问时只能读不能写，这些不变类也是线程安全的。</p><p>最后，类似<code>Math</code>这些只提供静态方法，没有成员变量的类，也是线程安全的。</p><p>除了上述几种少数情况，大部分类，例如<code>ArrayList</code>，都是非线程安全的类，我们不能在多线程中修改它们。但是，如果所有线程都只读取，不写入，那么<code>ArrayList</code>是可以安全地在线程间共享的。</p><blockquote><p>没有特殊说明时，一个类默认是非线程安全的。</p></blockquote><p>我们再观察<code>Counter</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们锁住的是<code>this</code>实例时，实际上可以用<code>synchronized</code>修饰这个方法。下面两种写法是等价的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">// 锁住 this</span></span><br><span class="line">        count += n;</span><br><span class="line">    &#125; <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 锁住 this</span></span><br><span class="line">    count += n;</span><br><span class="line">&#125; <span class="comment">// 解锁</span></span><br></pre></td></tr></table></figure><p>因此，用<code>synchronized</code>修饰的方法就是同步方法，它表示整个方法都必须用<code>this</code>实例加锁。</p><p>我们再思考一下，如果对一个静态方法添加<code>synchronized</code>修饰符，它锁住的是哪个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>static</code>方法，是没有<code>this</code>实例的，因为<code>static</code>方法是针对类而不是实例。但是我们注意到任何一个类都有一个由 JVM 自动创建的<code>Class</code>实例，因此，对<code>static</code>方法添加<code>synchronized</code>，锁住的是该类的<code>Class</code>实例。上述<code>synchronized static</code>方法实际上相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Counter.class) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再考察<code>Counter</code>的<code>get()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它没有同步，因为读一个<code>int</code>变量不需要同步。</p><p>然而，如果我们把代码稍微改一下，返回一个包含两个<code>int</code>的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pair <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pair p = <span class="keyword">new</span> Pair();</span><br><span class="line">        p.first = first;</span><br><span class="line">        p.last = last;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就必须要同步了。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>Java 的线程锁是可重入的锁。</p><p>什么是可重入的锁？我们还是来看例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dec(-n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        count += n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察<code>synchronized</code>修饰的<code>add()</code>方法，一旦线程执行到<code>add()</code>方法内部，说明它已经获取了当前实例的<code>this</code>锁。如果传入的<code>n &lt; 0</code>，将在<code>add()</code>方法内部调用<code>dec()</code>方法。由于<code>dec()</code>方法也需要获取<code>this</code>锁，现在问题来了：</p><p>对同一个线程，能否在获取到锁以后继续获取同一个锁？</p><p>答案是肯定的。JVM 允许同一个线程重复获取同一个锁，这种能被同一个线程反复获取的锁，就叫做可重入锁。</p><p>由于 Java 的线程锁是可重入锁，所以，获取锁的时候，不但要判断是否是第一次获取，还要记录这是第几次获取。每获取一次锁，记录+1，每退出<code>synchronized</code>块，记录-1，<strong>减到 0 的时候，才会真正释放锁</strong>。</p><p>一个线程可以获取一个锁后，再继续获取另一个锁。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得 lockA 的锁</span></span><br><span class="line">        <span class="keyword">this</span>.value += m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得 lockB 的锁</span></span><br><span class="line">            <span class="keyword">this</span>.another += m;</span><br><span class="line">        &#125; <span class="comment">// 释放 lockB 的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放 lockA 的锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得 lockB 的锁</span></span><br><span class="line">        <span class="keyword">this</span>.another -= m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得 lockA 的锁</span></span><br><span class="line">            <span class="keyword">this</span>.value -= m;</span><br><span class="line">        &#125; <span class="comment">// 释放 lockA 的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放 lockB 的锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获取多个锁的时候，不同线程获取多个不同对象的锁可能导致死锁。对于上述代码，线程 1 和线程 2 如果分别执行<code>add()</code>和<code>dec()</code>方法时：</p><ul><li>线程 1：进入<code>add()</code>，获得<code>lockA</code>；</li><li>线程 2：进入<code>dec()</code>，获得<code>lockB</code>。</li></ul><p>随后：</p><ul><li>线程 1：准备获得<code>lockB</code>，失败，等待中；</li><li>线程 2：准备获得<code>lockA</code>，失败，等待中。</li></ul><p><strong>此时，两个线程各自持有不同的锁，然后各自试图获取对方手里的锁，造成了双方无限等待下去，这就是死锁</strong>。</p><p>死锁发生后，没有任何机制能解除死锁，只能强制结束 JVM 进程。</p><p>因此，在编写多线程应用时，要特别注意防止死锁。因为死锁一旦形成，就只能强制结束进程。</p><p>那么我们应该如何避免死锁呢？答案是：线程获取锁的顺序要一致。即严格按照先获取<code>lockA</code>，再获取<code>lockB</code>的顺序，改写<code>dec()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得 lockA 的锁</span></span><br><span class="line">        <span class="keyword">this</span>.value -= m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得 lockB 的锁</span></span><br><span class="line">            <span class="keyword">this</span>.another -= m;</span><br><span class="line">        &#125; <span class="comment">// 释放 lockB 的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放 lockA 的锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wait、notify、notifyAll"><a href="#wait、notify、notifyAll" class="headerlink" title="wait、notify、notifyAll"></a>wait、notify、notifyAll</h3><h4 id="多线程协调问题"><a href="#多线程协调问题" class="headerlink" title="多线程协调问题"></a>多线程协调问题</h4><p>在 Java 程序中，<code>synchronized</code>解决了多线程竞争的问题。例如，对于一个任务管理器，<strong>多个线程同时往队列中添加任务</strong>，可以用<code>synchronized</code>加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// synchronized 保证了在任意时刻最多只有一个线程往队列中添加任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是<code>synchronized</code>并没有解决多线程协调的问题。</p><p>仍然以上面的<code>TaskQueue</code>为例，我们再编写一个<code>getTask()</code>方法取出队列的第一个任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码看上去没有问题：<code>getTask()</code>内部先判断队列是否为空，如果为空，就循环等待，直到另一个线程往队列中放入了一个任务，<code>while()</code>循环退出，就可以返回队列的元素了。</p><p>但实际上<code>while()</code>循环永远不会退出。因为线程在执行<code>while()</code>循环时，已经在<code>getTask()</code>入口获取了<code>this</code>锁，其他线程根本无法调用<code>addTask()</code>，因为<code>addTask()</code>执行条件也是获取<code>this</code>锁。</p><p>因此，执行上述代码，线程会在<code>getTask()</code>中因为死循环而 100%占用 CPU 资源。</p><p>如果深入思考一下，我们想要的执行效果是：</p><ul><li>线程 1 可以调用<code>addTask()</code>不断往队列中添加任务；</li><li>线程 2 可以调用<code>getTask()</code>从队列中获取任务。如果队列为空，则<code>getTask()</code>应该等待，直到队列中至少有一个任务时再返回。</li></ul><p>因此，<strong>多线程协调运行的原则就是：当条件不满足时，线程进入等待状态；当条件满足时，线程被唤醒，继续执行任务</strong>。</p><h4 id="wait-方法"><a href="#wait-方法" class="headerlink" title="wait()方法"></a>wait()方法</h4><p>对于上述<code>TaskQueue</code>，我们先改造<code>getTask()</code>方法，在条件不满足时，线程进入等待状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个线程执行到<code>getTask()</code>方法内部的<code>while</code>循环时，它必定已经获取到了<code>this</code>锁，此时，线程执行<code>while</code>条件判断，如果条件成立（队列为空），线程将执行<code>this.wait()</code>，进入等待状态，且<strong>会释放线程获得的锁</strong>，直到将来某个时刻，线程从等待状态被其他线程唤醒后，<code>wait()</code>方法才会返回，线程又会重新试图获得锁，然后，继续执行下一条语句。</p><blockquote><p><code>wait()</code>方法必须在当前获取的锁对象上调用，这里获取的是<code>this</code>锁，因此调用<code>this.wait()</code>。</p></blockquote><h4 id="notify-方法"><a href="#notify-方法" class="headerlink" title="notify 方法"></a>notify 方法</h4><p>如何让等待的线程被重新唤醒，然后从<code>wait()</code>方法返回？答案是在相同的锁对象上调用<code>notify()</code>方法。我们修改<code>addTask()</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">    <span class="keyword">this</span>.notify(); <span class="comment">// 唤醒在 this 锁等待的线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="notifyAll-方法"><a href="#notifyAll-方法" class="headerlink" title="notifyAll 方法"></a>notifyAll 方法</h4><p>当有多个线程正在<code>getTask()</code>方法内部的<code>wait()</code>中等待，使用<code>notifyAll()</code>可以将其一次性全部唤醒，而<code>notify()</code>只会唤醒其中一个（具体哪个依赖操作系统，有一定的随机性），通常来说，<code>notifyAll()</code>更安全。有些时候，如果我们的代码逻辑考虑不周，用<code>notify()</code>会导致只唤醒了一个线程，而其他线程可能永远等待下去醒不过来了</p><p>但使用<code>notifyAll</code>需格外注意：</p><ul><li><strong>当前等待的多个线程全部被唤醒，不代表这多个线程全部都会重新获得锁，他们其中只会有一个线程会重新获得锁，并执行<code>wait</code>方法后面的代码。</strong></li></ul><p>例如：开了 5 个线程一直等待从任务队列里获取任务，随后开了 1 个线程每 0.1 秒往任务队列里添加任务，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TaskQueue q = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">        ArrayList&lt;Thread&gt; getTaskTherads = <span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">// 存放线程的 list</span></span><br><span class="line">        <span class="comment">// 开启5个线程 一直等待从任务队列里获取任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  <span class="comment">// 会一直等待 死循环</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            String s = q.getTask();</span><br><span class="line">                            System.out.println(<span class="string">&quot;execute task: &quot;</span> + s);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            getTaskTherads.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启1个线程 每0.1秒往任务队列里添加任务</span></span><br><span class="line">        Thread add = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String s = <span class="string">&quot;task-&quot;</span> + i;</span><br><span class="line">                System.out.println(<span class="string">&quot;add task: &quot;</span> + s);</span><br><span class="line">                q.addTask(s);</span><br><span class="line">                <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">100</span>); &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        add.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待 add 线程结束后再继续运行 main 线程;</span></span><br><span class="line">        add.join();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add 线程结束后 因为从任务队列里获取任务的5个线程是一直等待的，一旦任务队列不为空，其就会取出任务，</span></span><br><span class="line">        <span class="comment">// 即使 add 进程结束，获取任务的5个进程也会一直 while 循环 所以这里需要中断这5个进程</span></span><br><span class="line">        <span class="keyword">for</span> (Thread t : getTaskTherads) &#123;</span><br><span class="line">            t.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();  <span class="comment">// 唤醒所有等待的进程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里，<code>wait()</code>方法返回时需要重新获得<code>this</code>锁。假设当前有 3 个线程被唤醒，唤醒后，首先要等待执行<code>addTask()</code>的线程结束此方法后，才能释放<code>this</code>锁，随后，这 3 个线程中只能有一个获取到<code>this</code>锁，剩下 2 个将继续等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">             <span class="comment">// 释放 this 锁:</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">            <span class="comment">// 重新获取 this 锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将<code>while</code>改为<code>if</code>,则会出现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queue.isEmpty()) &#123;</span><br><span class="line">             <span class="comment">// 释放 this 锁:</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">            <span class="comment">// 重新获取 this 锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为，假设任务队列中新加了一个任务，且任务队列中只有一个任务，</p><p>对于 5 个正在一直等待获取任务的线程，通过<code>notifyAll</code>将其全部唤醒，假设只有线程 1 重新获取了锁，再执行完<code>return queue.remove();</code>后，此时队列为空，且线程 1 因为执行完了<code>getTask</code>方法会释放锁，那么对于线程 2，因为是<code>if</code>，它会直接执行<code>this.wait</code>下的代码，跳过<code>if</code>判断，直接<code>return queue.remove();</code>，但此刻任务队列可能已经没有任何元素了。</p><p>总结：如果是用<code>while</code>作判断，每次<code>wait</code>被<code>notifyAll</code>唤醒后都要先判断当前队列是否为空，而<code>if</code>做判断时，如果<code>wait</code>被唤醒，则直接执行<code>wait</code>后的代码，获取队列元素。</p><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>从 Java 5 开始，引入了一个高级的处理并发的<code>java.util.concurrent</code>包，它提供了大量更高级的并发功能，能大大简化多线程程序的编写。</p><p>我们知道 Java 语言直接提供了<code>synchronized</code>关键字用于加锁，但这种锁一是很重，二是获取时必须一直等待，没有额外的尝试机制。</p><p><code>java.util.concurrent.locks</code>包提供的<code>ReentrantLock</code>用于替代<code>synchronized</code>加锁，我们来看一下传统的<code>synchronized</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用<code>ReentrantLock</code>替代，可以把代码改造为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>synchronized</code>是 Java 语言层面提供的语法，所以我们不需要考虑异常，而<code>ReentrantLock</code>是 Java 代码实现的锁，我们就必须先获取锁，然后在<code>finally</code>中正确释放锁。</p><p>顾名思义，<code>ReentrantLock</code>是可重入锁，它和<code>synchronized</code>一样，一个线程可以多次获取同一个锁。</p><p>和<code>synchronized</code>不同的是，<code>ReentrantLock</code>可以尝试获取锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lock.tryLock(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在尝试获取锁的时候，最多等待 1 秒。如果 1 秒后仍未获取到锁，<code>tryLock()</code>返回<code>false</code>，程序就可以做一些额外处理，而不是无限等待下去。</p><p>所以，使用<code>ReentrantLock</code>比直接使用<code>synchronized</code>更安全，线程在<code>tryLock()</code>失败的时候不会导致死锁。</p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>使用<code>ReentrantLock</code>比直接使用<code>synchronized</code>更安全，可以替代<code>synchronized</code>进行线程同步。</p><p>但是，<code>synchronized</code>可以配合<code>wait</code>和<code>notify</code>实现线程在条件不满足时等待，条件满足时唤醒，用<code>ReentrantLock</code>我们怎么编写<code>wait</code>和<code>notify</code>的功能呢？</p><p>答案是使用<code>Condition</code>对象来实现<code>wait</code>和<code>notify</code>的功能。</p><p>我们仍然以<code>TaskQueue</code>为例，把前面用<code>synchronized</code>实现的功能通过<code>ReentrantLock</code>和<code>Condition</code>来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition(); <span class="comment">// 从 lock 获取 condition</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queue.add(s);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> queue.remove();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，<strong>使用<code>Condition</code>时，引用的<code>Condition</code>对象必须从<code>Lock</code>实例的<code>newCondition()</code>返回，这样才能获得一个绑定了<code>Lock</code>实例的<code>Condition</code>实例</strong>。</p><p><code>Condition</code>提供的<code>await()</code>、<code>signal()</code>、<code>signalAll()</code>原理和<code>synchronized</code>锁对象的<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>是一致的，并且其行为也是一样的：</p><ul><li><code>await()</code>会释放当前锁，进入等待状态；</li><li><code>signal()</code>会唤醒某个等待线程；</li><li><code>signalAll()</code>会唤醒所有等待线程；</li><li>唤醒线程从<code>await()</code>返回后需要重新获得锁。</li></ul><p>此外，和<code>tryLock()</code>类似，<code>await()</code>可以在等待指定时间后，如果还没有被其他线程通过<code>signal()</code>或<code>signalAll()</code>唤醒，可以自己醒来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition.await(<span class="number">1</span>, TimeUnit.SECOND)) &#123;</span><br><span class="line">    <span class="comment">// 被其他线程唤醒</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 指定时间内没有被其他线程唤醒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，使用<code>Condition</code>配合<code>Lock</code>，我们可以实现更灵活的线程同步。</p><h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p>前面讲到的<code>ReentrantLock</code>保证了只有一个线程可以执行临界区代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counts[index] += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] get() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(counts, counts.length);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有些时候，这种保护有点过头。因为我们发现，任何时刻，只允许一个线程修改，也就是调用<code>inc()</code>方法是必须获取锁，但是，<code>get()</code>方法只读取数据，不修改数据，它实际上允许多个线程同时调用。</p><p>实际上我们想要的是：允许多个线程同时读，但只要有一个线程在写，其他线程就必须等待：</p><table><thead><tr><th align="left"></th><th align="left">读</th><th align="left">写</th></tr></thead><tbody><tr><td align="left">读</td><td align="left">允许</td><td align="left">不允许</td></tr><tr><td align="left">写</td><td align="left">不允许</td><td align="left">不允许</td></tr></tbody></table><p>使用<code>ReadWriteLock</code>可以解决这个问题，它保证：</p><ul><li>只允许一个线程写入（其他线程既不能写入也不能读取）；</li><li>没有写入时，多个线程允许同时读（提高性能）。</li></ul><p>用<code>ReadWriteLock</code>实现这个功能十分容易。我们需要创建一个<code>ReadWriteLock</code>实例，然后分别获取读锁和写锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock rwlock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock rlock = rwlock.readLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock wlock = rwlock.writeLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        wlock.lock(); <span class="comment">// 加写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counts[index] += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            wlock.unlock(); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] get() &#123;</span><br><span class="line">        rlock.lock(); <span class="comment">// 加读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(counts, counts.length);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rlock.unlock(); <span class="comment">// 释放读锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把读写操作分别用读锁和写锁来加锁，在读取时，多个线程可以同时获得读锁，这样就大大提高了并发读的执行效率。</p><p>使用<code>ReadWriteLock</code>时，适用条件是同一个数据，有大量线程读取，但仅有少数线程修改。</p><p>例如，一个论坛的帖子，回复可以看做写入操作，它是不频繁的，但是，浏览可以看做读取操作，是非常频繁的，这种情况就可以使用<code>ReadWriteLock</code>。</p><h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><p>前面介绍的<code>ReadWriteLock</code>可以解决多线程同时读，但只有一个线程能写的问题。</p><p>如果我们深入分析<code>ReadWriteLock</code>，会发现它有个潜在的问题：如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种悲观的读锁。</p><p>要进一步提升并发执行效率，Java 8 引入了新的读写锁：<code>StampedLock</code>。</p><p><code>StampedLock</code>和<code>ReadWriteLock</code>相比，改进之处在于：<strong>读的过程中也允许获取写锁后写入</strong>！这样一来，我们读的数据就可能不一致，所以，需要一点额外的代码来判断读的过程中是否有写入，这种读锁是一种乐观锁。</p><p>乐观锁的意思就是乐观地估计读的过程中大概率不会有写入，因此被称为乐观锁。反过来，悲观锁则是读的过程中拒绝有写入，也就是写入必须等待。<strong>显然乐观锁的并发效率更高，但一旦有小概率的写入导致读取的数据不一致，需要能检测出来，再读一遍就行。</strong></p><p>我们来看例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StampedLock stampedLock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">double</span> deltaY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = stampedLock.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x += deltaX;</span><br><span class="line">            y += deltaY;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stampedLock.unlockWrite(stamp); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = stampedLock.tryOptimisticRead(); <span class="comment">// 获得一个乐观读锁</span></span><br><span class="line">        <span class="comment">// 注意下面两行代码不是原子操作</span></span><br><span class="line">        <span class="comment">// 假设 x,y = (100,200)</span></span><br><span class="line">        <span class="keyword">double</span> currentX = x;</span><br><span class="line">        <span class="comment">// 此处已读取到 x=100，但 x,y 可能被写线程修改为(300,400)</span></span><br><span class="line">        <span class="keyword">double</span> currentY = y;</span><br><span class="line">        <span class="comment">// 此处已读取到 y，如果没有写入，读取是正确的(100,200)</span></span><br><span class="line">        <span class="comment">// 如果有写入，读取是错误的(100,400)</span></span><br><span class="line">        <span class="keyword">if</span> (!stampedLock.validate(stamp)) &#123; <span class="comment">// 检查乐观读锁后是否有其他写锁发生,有的话 则再用悲观锁读一遍</span></span><br><span class="line">            stamp = stampedLock.readLock(); <span class="comment">// 获取一个悲观读锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentX = x;</span><br><span class="line">                currentY = y;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stampedLock.unlockRead(stamp); <span class="comment">// 释放悲观读锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和<code>ReadWriteLock</code>相比，写入的加锁是完全一样的，不同的是读取。注意到<strong>首先我们通过<code>tryOptimisticRead()</code>获取一个乐观读锁，并返回版本号</strong>。接着进行读取，读取完成后，我们<strong>通过<code>validate()</code>去验证版本号</strong>，如果在读取过程中没有写入，版本号不变，验证成功，我们就可以放心地继续后续操作。如果在读取过程中有写入，版本号会发生变化，验证将失败。在失败的时候，我们再通过获取悲观读锁再次读取。由于写入的概率不高，程序在绝大部分情况下可以通过乐观读锁获取数据，极少数情况下使用悲观读锁获取数据。</p><blockquote><p>注意一开始用乐观锁读入时，允许其他线程获取写锁后写入，但这样会导致读的数据就可能不一致，所以需要判断读的过程中是否有写入（允许写入和是否有写入是两回事）</p><p>若有写入则再通过获取悲观读锁再次读取，使用悲观锁读取时不允许其他线程获取写锁后写入。</p></blockquote><p>可见，<code>StampedLock</code>把读锁细分为乐观读和悲观读，能进一步提升并发效率。但这也是有代价的：一是代码更加复杂，二是**<code>StampedLock</code>是不可重入锁，不能在一个线程中反复获取同一个锁**。</p><p><code>StampedLock</code>还提供了更复杂的将悲观读锁升级为写锁的功能，它主要使用在 if-then-update 的场景：即先读，如果读的数据满足条件，就返回，如果读的数据不满足条件，再尝试写。</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a><a href="https://zhuanlan.zhihu.com/p/98593407">Semaphore</a></h3><p>前面我们讲了各种锁的实现，本质上锁的目的是保护一种受限资源，保证同一时刻只有一个线程能访问（ReentrantLock），或者只有一个线程能写入（ReadWriteLock）。</p><p>还有一种受限资源，它需要保证同一时刻最多有 N 个线程能访问，比如同一时刻最多创建 100 个数据库连接，最多允许 10 个用户下载等。</p><p>这种限制数量的锁，如果用 Lock 数组来实现，就太麻烦了，这种情况就可以使用<code>Semaphore</code>。</p><h4 id="1-Semaphore-是什么"><a href="#1-Semaphore-是什么" class="headerlink" title="1. Semaphore 是什么"></a>1. Semaphore 是什么</h4><p>Semaphore 通常我们叫它信号量， 可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源。</p><p>可以把它简单的理解成我们停车场入口立着的那个显示屏，每有一辆车进入停车场显示屏就会显示剩余车位减 1，每有一辆车从停车场出去，显示屏上显示的剩余车辆就会加 1，当显示屏上的剩余车位为 0 时，停车场入口的栏杆就不会再打开，车辆就无法进入停车场了，直到有一辆车从停车场出去为止。</p><h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><p>通常用于那些资源有明确访问数量限制的场景，常用于限流 。</p><p>比如：数据库连接池，同时进行连接的线程有数量限制，连接不能超过一定的数量，当连接达到了限制数量后，后面的线程只能排队等前面的线程释放了数据库连接才能获得数据库连接。</p><p>比如：停车场场景，车位数量有限，同时只能容纳多少台车，车位满了之后只有等里面的车离开停车场外面的车才可以进入。</p><h4 id="3-Semaphore-常用方法说明"><a href="#3-Semaphore-常用方法说明" class="headerlink" title="3. Semaphore 常用方法说明"></a>3. Semaphore 常用方法说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">acquire()</span><br><span class="line">获取一个令牌，在获取到令牌、或者被其他线程调用中断之前线程一直处于阻塞状态。</span><br><span class="line"></span><br><span class="line">acquire(<span class="keyword">int</span> permits)</span><br><span class="line">获取一个令牌，在获取到令牌、或者被其他线程调用中断、或超时之前线程一直处于阻塞状态。</span><br><span class="line"></span><br><span class="line">acquireUninterruptibly()</span><br><span class="line">获取一个令牌，在获取到令牌之前线程一直处于阻塞状态（忽略中断）。</span><br><span class="line"></span><br><span class="line">tryAcquire()</span><br><span class="line">尝试获得令牌，返回获取令牌成功或失败，不阻塞线程。</span><br><span class="line"></span><br><span class="line">tryAcquire(<span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">尝试获得令牌，在超时时间内循环尝试获取，直到尝试获取成功或超时返回，不阻塞线程。</span><br><span class="line"></span><br><span class="line">release()</span><br><span class="line">释放一个令牌，唤醒一个获取令牌不成功的阻塞线程。</span><br><span class="line"></span><br><span class="line">hasQueuedThreads()</span><br><span class="line">等待队列里是否还存在等待线程。</span><br><span class="line"></span><br><span class="line">getQueueLength()</span><br><span class="line">获取等待队列里阻塞的线程数。</span><br><span class="line"></span><br><span class="line">drainPermits()</span><br><span class="line">清空令牌把可用令牌数置为<span class="number">0</span>，返回清空令牌的数量。</span><br><span class="line"></span><br><span class="line">availablePermits()</span><br><span class="line">返回可用的令牌数量。</span><br></pre></td></tr></table></figure><h4 id="4-用-semaphore-实现停车场提示牌功能"><a href="#4-用-semaphore-实现停车场提示牌功能" class="headerlink" title="4. 用 semaphore 实现停车场提示牌功能"></a>4. 用 semaphore 实现停车场提示牌功能</h4><p>每个停车场入口都有一个提示牌，上面显示着停车场的剩余车位还有多少，当剩余车位为 0 时，不允许车辆进入停车场，直到停车场里面有车离开停车场，这时提示牌上会显示新的剩余车位数。</p><p><strong>业务场景 ：</strong></p><p>1、停车场容纳总停车量 10。</p><p>2、当一辆车进入停车场后，显示牌的剩余车位数响应的减 1.</p><p>3、每有一辆车驶出停车场后，显示牌的剩余车位数响应的加 1。</p><p>4、停车场剩余车位不足时，车辆只能在外面等待。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停车场同时容纳的车辆10</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟100辆车进入停车场</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;====&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;来到停车场&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(semaphore.availablePermits()==<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;车位不足，请耐心等待&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        semaphore.acquire();<span class="comment">//获取令牌尝试进入停车场</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;成功进入停车场&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));<span class="comment">//模拟车辆在停车场停留的时间</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;驶出停车场&quot;</span>);</span><br><span class="line">                        semaphore.release();<span class="comment">//释放令牌，腾出停车场车位</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,i+<span class="string">&quot;号车&quot;</span>);</span><br><span class="line"></span><br><span class="line">            thread.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Concurrent-集合"><a href="#Concurrent-集合" class="headerlink" title="Concurrent 集合"></a>Concurrent 集合</h3><p>我们在前面已经通过<code>ReentrantLock</code>和<code>Condition</code>实现了一个<code>BlockingQueue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queue.add(s);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> queue.remove();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BlockingQueue</code>的意思就是说，<strong>当一个线程调用这个<code>TaskQueue</code>的<code>getTask()</code>方法时，该方法内部可能会让线程变成等待状态，直到队列条件满足不为空，线程被唤醒后，<code>getTask()</code>方法才会返回</strong>。</p><p>因为<code>BlockingQueue</code>非常有用，所以我们不必自己编写，可以直接使用 Java 标准库的<code>java.util.concurrent</code>包提供的线程安全的集合：<code>ArrayBlockingQueue</code>。</p><p>除了<code>BlockingQueue</code>外，针对<code>List</code>、<code>Map</code>、<code>Set</code>、<code>Deque</code>等，<code>java.util.concurrent</code>包也提供了对应的并发集合类。我们归纳一下：</p><table><thead><tr><th align="left">interface</th><th align="left">non-thread-safe</th><th align="left">thread-safe</th></tr></thead><tbody><tr><td align="left">List</td><td align="left">ArrayList</td><td align="left">CopyOnWriteArrayList</td></tr><tr><td align="left">Map</td><td align="left">HashMap</td><td align="left">ConcurrentHashMap</td></tr><tr><td align="left">Set</td><td align="left">HashSet / TreeSet</td><td align="left">CopyOnWriteArraySet</td></tr><tr><td align="left">Queue</td><td align="left">ArrayDeque / LinkedList</td><td align="left">ArrayBlockingQueue / LinkedBlockingQueue</td></tr><tr><td align="left">Deque</td><td align="left">ArrayDeque / LinkedList</td><td align="left">LinkedBlockingDeque</td></tr></tbody></table><p>使用这些并发集合与使用非线程安全的集合类完全相同。我们以<code>ConcurrentHashMap</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 在不同的线程读写:</span></span><br><span class="line">map.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">map.get(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>因为所有的同步和加锁的逻辑都在集合内部实现，对外部调用者来说，只需要正常按接口引用，其他代码和原来的非线程安全代码完全一样。即当我们需要多线程访问时，把：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>就可以了。</p><p><code>java.util.Collections</code>工具类还提供了一个旧的线程安全集合转换器，可以这么用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map unsafeMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map threadSafeMap = Collections.synchronizedMap(unsafeMap);</span><br></pre></td></tr></table></figure><p>但是它实际上是用一个包装类包装了非线程安全的<code>Map</code>，然后对所有读写方法都用<code>synchronized</code>加锁，这样获得的线程安全集合的性能比<code>java.util.concurrent</code>集合要低很多，所以不推荐使用。</p><h3 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h3><h4 id="Atomic-简介"><a href="#Atomic-简介" class="headerlink" title="Atomic 简介"></a>Atomic 简介</h4><p><strong>解决并发的<a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8&spm=1001.2101.3001.7020">线程安全</a>问题有两种方式：</strong></p><ol><li><strong>等待唤醒机制</strong><br>如果抢不到锁，就将线程挂起，当锁释放的时候，然后将其唤醒重新抢锁。</li><li><strong>自旋 CAS</strong><br>自旋就是设置循环 CAS 抢锁的意思，当 CAS 成功的时候才会退出循环</li></ol><table><thead><tr><th>名称</th><th>适用场景</th></tr></thead><tbody><tr><td>等待唤醒机制</td><td>当长时间都无法抢到锁的时候，还是将线程挂起，然后等待唤醒的好。因为等待和唤醒牵扯到线程挂起和切换，会导致从用户态到内核态的切换，并且线程切换会导致上下文的切换，现场保存什么的，会比较浪费资源</td></tr><tr><td>自旋 CAS</td><td>当短时间内就可以获取到锁的时候，自旋 CAS 比较合适，短时间的自旋 CAS 肯定会比线程切换消耗的资源要少，如果要是时间长的话，就不太划算了，因为自旋 CAS 会一直占用 CPU</td></tr></tbody></table><p><strong>Atomic 原子类就是利用自旋 CAS 来保证线程安全的。</strong></p><p>我们以<code>AtomicInteger</code>为例，它提供的主要操作有：</p><ul><li>增加值并返回新值：<code>int addAndGet(int delta)</code></li><li>加 1 后返回新值：<code>int incrementAndGet()</code></li><li>获取当前值：<code>int get()</code></li><li>用 CAS 方式设置：<code>int compareAndSet(int expect, int update)</code></li></ul><h4 id="Atomic-例子"><a href="#Atomic-例子" class="headerlink" title="Atomic 例子"></a>Atomic 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// lock 加锁方式</span></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAgeByLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        id++;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Atomic 原子类方式</span></span><br><span class="line">    AtomicLong atolong = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atolong.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>如果我们自己通过 CAS 编写<code>incrementAndGet()</code>，它大概长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">(AtomicInteger <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prev, next;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        prev = <span class="keyword">var</span>.get();</span><br><span class="line">        next = prev + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( ! <span class="keyword">var</span>.compareAndSet(prev, next));</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS 是指，在这个操作中，如果<code>AtomicInteger</code>的当前值是<code>prev</code>，即<strong>内存中的值没变</strong>，那么就更新为<code>next</code>，返回<code>true</code>。如果<code>AtomicInteger</code>的当前值不是<code>prev</code>，即<strong>内存中的值变了</strong>，就什么也不干，返回<code>false</code>。通过 CAS 操作并配合<code>do ... while</code>循环，即使其他线程修改了<code>AtomicInteger</code>的值，最终的结果也是正确的。</p><p>我们利用<code>AtomicLong</code>可以编写一个多线程安全的全局唯一 ID 生成器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line">    AtomicLong <span class="keyword">var</span> = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span>.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，我们并不需要直接用<code>do ... while</code>循环调用<code>compareAndSet</code>实现复杂的并发操作，而是用<code>incrementAndGet()</code>这样的封装好的方法，因此，使用起来非常简单。</p><p>在高度竞争的情况下，还可以使用 Java 8 提供的<code>LongAdder</code>和<code>LongAccumulator</code>。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>使用<code>java.util.concurrent.atomic</code>提供的原子操作可以简化多线程编程：</p><ul><li>原子操作实现了无锁的线程安全；</li><li>适用于计数器，累加器等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署云端</title>
      <link href="/2023/03/17/hexo%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AB%AF/"/>
      <url>/2023/03/17/hexo%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-部署云端"><a href="#hexo-部署云端" class="headerlink" title="hexo 部署云端"></a>hexo 部署云端</h1><blockquote><p>这里新创建 git 用户，并限制其权限，然后将 blog 相关的部署在<code>home/chjm</code>目录下</p></blockquote><h2 id="1-创建新用户"><a href="#1-创建新用户" class="headerlink" title="1.创建新用户"></a>1.创建新用户</h2><p>创建一个 git 用户，并在家目录下建立一个<code>.ssh</code>目录，赋予其 700 权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser git</span><br><span class="line">su git</span><br><span class="line">mkdir ~/.ssh &amp;&amp; chmod 700 ~/.ssh</span><br><span class="line">touch ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将下述<code>id_ras_pub</code>里公钥复制到<code>authorized_keys</code>，就可以通过 ssh 免密登录 git 用户</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316153401537.png" alt="image-20230316153401537" style="zoom: 50%;" /><p>注意这里是 20000 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@81.69.254.50 -p 20000</span><br></pre></td></tr></table></figure> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316153621456.png" alt="image-20230316153621456" style="zoom: 50%;" /><p>这可以通过在本地<code>C:user/ssh/config</code>里配置别名，方便登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh hexo_git</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316154341738.png" alt="image-20230316154341738" style="zoom:50%;" /><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316154414245.png" alt="image-20230316154414245" style="zoom:50%;" /></p><h2 id="2-限制-git-用户的-shell"><a href="#2-限制-git-用户的-shell" class="headerlink" title="2.限制 git 用户的 shell"></a>2.限制 git 用户的 shell</h2><p>上面创建的 git 用户可以通过 ssh 连接，进行任何操作。为了安全性，我们需要将 git 用户的活动限制在与 Git 相关的范围，也就是把 git 用户的 shell 改成 <code>git-shell</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh git -s $(<span class="built_in">which</span> git-shell) <span class="comment">## 在root用户下执行</span></span><br></pre></td></tr></table></figure><p>这里 git 用户就没办法创建文件啥的了，所以后续操作都得在 root 用户下执行</p><h2 id="3-创建-blog-对应的-git-仓库"><a href="#3-创建-blog-对应的-git-仓库" class="headerlink" title="3.创建 blog 对应的 git 仓库"></a>3.创建 blog 对应的 git 仓库</h2><p>在 <code>/home/chjm/var/repo</code>下，创建一个空的<code>hexo_blog.git</code>仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/chjm/var/repo</span><br><span class="line"><span class="built_in">cd</span> /home/chjm/var/repo</span><br><span class="line">git init --bare hexo_blog.git</span><br></pre></td></tr></table></figure><h2 id="4-配置-git-hooks"><a href="#4-配置-git-hooks" class="headerlink" title="4.配置 git-hooks"></a>4.配置 git-hooks</h2><p>也就是配置 git 推送后执行的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/chjm/var/repo/hexo_blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/home/chjm/var/www/hexo --git-dir=/home/chjm/var/repo/hexo_blog.git checkout -f</span><br></pre></td></tr></table></figure><p>意思是从<code>hexo_blog.git</code>仓库覆盖掉<code>/var/hexo</code>目录，达到更新的目的。为其添加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/chjm/var/repo/hexo_blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>改变<code>hexo_blog.git</code>目录的拥有者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git hexo_blog.git  <span class="comment"># 在/home/chjm/var/repo/目录下执行</span></span><br></pre></td></tr></table></figure><h2 id="5-创建静态文件目录，并赋予权限"><a href="#5-创建静态文件目录，并赋予权限" class="headerlink" title="5.创建静态文件目录，并赋予权限"></a>5.创建静态文件目录，并赋予权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/chjm/var/www/hexo</span><br><span class="line">chown -R git:git /home/chjm/var/www/hexo</span><br><span class="line">chmod -R 755 /home/chjm/var/www/hexo</span><br></pre></td></tr></table></figure><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><p>配置完 git 后，可以通过<code>git clone ssh://git@ip:端口号:/home/chjm/var/repo/hexo_blog.git</code>来测试<code>git ssh</code></p><p>也可以将<code>ssh://git@ip:端口号:</code>替换为上面配置的别名<code>hexo_git</code>，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">git <span class="built_in">clone</span> ssh://git@81.69.254.50:20000/home/chjm/var/repo/hexo_blog.git  <span class="comment"># 20000为端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">git <span class="built_in">clone</span> hexo_git:/home/chjm/var/repo/hexo_blog.git</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316160250088.png" alt="image-20230316160250088"></p><h2 id="7-配置-hexo"><a href="#7-配置-hexo" class="headerlink" title="7.配置 hexo"></a>7.配置 hexo</h2><p>这里掠过如何创建 hexo 博客，请见<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/index.html">hexo doc</a></p><p>打开 hexo blog 的目录，修改<code>_config.yml</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ssh://git@81.69.254.50:20000/home/chjm/var/repo/hexo_blog.git #用户名@服务器Ip:git仓库位置</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后在<code>package.json</code>中配置脚本<code> &quot;cblog&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot;</code>，这样就可以通过<code>npm run cblog</code>将博客上传到服务器上了</p><blockquote><p>clean 是清理</p><p>g 是 generate 生成静态文件</p><p>d 是 deploy 部署网站。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server -p 4399&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cblog&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一篇博客  如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替</span></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="8-配置-nginx"><a href="#8-配置-nginx" class="headerlink" title="8.配置 nginx"></a>8.配置 nginx</h2><p>现在云服务器上有静态网页了，只需要配置<code>nginx</code>就能从网络访问了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="comment">#SSL 默认访问端口号为 443</span></span><br><span class="line">listen 443 ssl;</span><br><span class="line"><span class="comment">#请填写绑定证书的域名</span></span><br><span class="line">server_name chjm.online;</span><br><span class="line"><span class="comment">#请填写证书文件的相对路径或绝对路径</span></span><br><span class="line">ssl_certificate  cert/chjm.online_bundle.pem;</span><br><span class="line"><span class="comment">#请填写私钥文件的相对路径或绝对路径</span></span><br><span class="line">ssl_certificate_key cert/chjm.online.key;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line"><span class="comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"><span class="comment">#请按照以下协议配置</span></span><br><span class="line">ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">location / &#123;</span><br><span class="line">  <span class="comment">#网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span></span><br><span class="line">  <span class="comment">#例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。</span></span><br><span class="line">  root /home/chjm/var/www/hexo;</span><br><span class="line">           index index.html;</span><br><span class="line">           try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SprintBoot学习</title>
      <link href="/2023/03/16/SprintBoot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/16/SprintBoot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SprintBoot-框架课"><a href="#SprintBoot-框架课" class="headerlink" title="SprintBoot 框架课"></a>SprintBoot 框架课</h1><h2 id="配置-Mysql-与注册登录模块"><a href="#配置-Mysql-与注册登录模块" class="headerlink" title="配置 Mysql 与注册登录模块"></a>配置 Mysql 与注册登录模块</h2><h3 id="1-Mysql"><a href="#1-Mysql" class="headerlink" title="1. Mysql"></a>1. Mysql</h3><h4 id="1-1-mysql-服务的关闭与启动"><a href="#1-1-mysql-服务的关闭与启动" class="headerlink" title="1.1 mysql 服务的关闭与启动"></a>1.1 mysql 服务的关闭与启动</h4><blockquote><p>默认开机自动启动，如果想手动操作，可以参考如下命令</p><p>启动 mysql5.7 版本不需要加 80，直接<code>net start mysql</code></p></blockquote><ul><li>关闭：<code>net stop mysql80</code></li><li>启动：<code>net start mysql80</code></li></ul><h4 id="1-2-常用操作"><a href="#1-2-常用操作" class="headerlink" title="1.2 常用操作"></a>1.2 常用操作</h4><ul><li>连接用户名为<code>root</code>，密码为<code>123456</code>的数据库服务：<code>mysql -uroot -p123456</code></li><li><code>show databases</code>：列出所有数据库</li><li><code>create database kob</code>：创建数据库</li><li><code>drop database kob</code>：删除数据库</li><li><code>use kob</code>：使用数据库 kob</li><li><code>show tables</code>：列出当前数据库的所有表</li><li><code>create table user(id int, username varchar(100))</code>：创建名称为 user 的表，表中包含 id 和 username 两个属性。</li><li><code>drop table user</code>：删除表</li><li><code>insert into user values(1, &#39;yxc&#39;)</code>：在表中插入数据</li><li><code>select * from user</code>：查询表中所有数据</li><li><code>delete from user where id = 2</code>：删除某行数据</li></ul><p><strong>SpringBoot 中可以可视化 mysql 数据库</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226093901090.png" alt="image-20230226093901090"></p><h3 id="2-SpringBoot-配置-mysql"><a href="#2-SpringBoot-配置-mysql" class="headerlink" title="2. SpringBoot 配置 mysql"></a>2. SpringBoot 配置 mysql</h3><ol><li><p>在<a href="https://mvnrepository.com/">Maven 仓库地址</a>中查找如下依赖，并添加到<code>pom.xml</code>文件中：</p><ul><li><p><strong>Spring Boot Starter JDBC</strong></p><blockquote><p>JDBCTemplate 为我们提供了增删改查数据库的方法</p></blockquote></li><li><p><strong>Project Lombok</strong></p><blockquote><p>Lombok 是一种 Java 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注释实现这一目的。通过在开发环境中实现 Lombok，开发人员可以节省构建诸如 hashCode() 和 equals() 这样的方法以及以往用来分类各种 accessor 和 mutator 的大量时间。</p></blockquote><p>使用 Lombok：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226101449302.png" alt="image-20230226101449302" style="zoom: 54%;" /><p>源文件：</p>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226101742593.png" alt="image-20230226101742593" style="zoom: 67%;" /><p>生成的 target 后的文件：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226101336841.png" alt="image-20230226101336841" style="zoom:67%;" /></li><li><p><strong>MySQL Connector/J</strong></p><blockquote><p>mysql 连接</p></blockquote></li><li><p><strong>mybatis-plus-boot-starter</strong></p><blockquote><p><a href="https://blog.csdn.net/chaizepeng/article/details/119384531">关于 mybatis</a>，使用 mybatis-plus 就不用写 sql 语句了</p></blockquote></li><li><p><strong>mybatis-plus-generator</strong></p><blockquote><p>生成 Mapper 接口和配置文件</p></blockquote><p><strong>MyBatis-Plus 最核心的功能要数通用 Mapper 了，只要我们的 Mapper 接口继承了 BaseMapper，就可以进行单表 CRUD 操作，具体接口见</strong><a href="https://baomidou.com/">Mybatis-Plus 官网</a></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226102611248.png" alt="image-20230226102611248"></p></li></ul></li><li><p>然后让 Maven 更新依赖：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226092348496.png" alt="image-20230226092348496"></p></li><li><p>在<code>application.properties</code>中添加数据库配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3307/kob?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：在安装上述依赖后，建议关闭如下选项：</strong></p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226093421511.png" alt="image-20230226093421511" style="zoom: 67%;" /><h3 id="3-接口编写整体流程"><a href="#3-接口编写整体流程" class="headerlink" title="3.接口编写整体流程"></a>3.接口编写整体流程</h3><h4 id="3-1-SpringBoot-中的各个层"><a href="#3-1-SpringBoot-中的各个层" class="headerlink" title="3.1 SpringBoot 中的各个层"></a>3.1 SpringBoot 中的各个层</h4><ul><li><code>pojo</code>层：将数据库中的表对应成<code>Java</code>中的<code>Class</code></li><li><code>mapper</code>层（也叫<code>Dao</code>层）：将<code>pojo</code>层的<code>class</code>中的操作，映射成<code>sql</code>语句</li><li><code>service</code>层：写具体的业务逻辑，组合使用<code>mapper</code>中的操作</li><li><code>controller</code>层：负责请求转发，接受页面过来的参数，传给<code>Service</code>处理，接到返回值，再传给页面</li></ul><h4 id="3-2-具体实现"><a href="#3-2-具体实现" class="headerlink" title="3.2 具体实现"></a>3.2 具体实现</h4><p>文件目录如下：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226111207030.png" alt="image-20230226111207030" style="zoom:67%;" /><ol><li>首先在<code>pojo</code>层新建<code>User</code>类，数据库中的<code>User</code>表对应成<code>Java</code>中的<code>User</code>类。</li></ol><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226111347059.png" alt="image-20230226111347059" style="zoom:67%;" /><ol start="2"><li>然后在<code>mapper</code>层中新建<code>UserMapper</code>接口，让其继承 MyBatis-Plus 库实现的 BaseMapper，这样就可以对<code>user</code>表 CRUD 操作，具体 CRUD 操作 API 见<a href="https://baomidou.com/">Mybatis-Plus 官网</a></li></ol><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226111507605.png" alt="image-20230226111507605" style="zoom:67%;" /><ol start="3"><li><p>然后在<code>controller</code>层中实现接口</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226112059568.png" alt="image-20230226112059568" style="zoom:67%;" /><ul><li><p><code>@RestController</code>：个人理解是指定接口返回数据的规范，相关理解可参考<a href="https://www.cnblogs.com/justn0w/p/11628287.html">这个网站</a></p></li><li><p><code>@Autowired</code>：可以对类成员变量、方法及构造函数进行标注，让 <code>spring</code> 完成<code> bean自动装配</code>的工作。默认是按照类去匹配，配合@<a href="https://so.csdn.net/so/search?q=Qualifier&spm=1001.2101.3001.7020">Qualifier</a> 指定按照名称去装配 bean。</p><blockquote><p>在使用 Spring 进行项目开发的时候，会大量使用到自动装配，那自动装配是什么呢？简单来说：Spring 利用依赖注入（DI）功能，完成 SpringIOC 容器中各个组件之间的依赖关系赋值管理。</p></blockquote></li><li><p><code>@GetMapping</code>：GET 接口</p></li><li><p><code>selectList</code>方法是<code>userMapper</code>继承的父类<code>BaseMapper</code>（<code>MyBatis-Plus</code>库实现)中的<code>API</code>，详情见<a href="https://baomidou.com/">Mybatis-Plus 官网</a></p></li></ul></li></ol><h3 id="4-修改-Spring-Security"><a href="#4-修改-Spring-Security" class="headerlink" title="4. 修改 Spring Security"></a>4. 修改 Spring Security</h3><h4 id="4-1-安装相关依赖"><a href="#4-1-安装相关依赖" class="headerlink" title="4.1 安装相关依赖"></a>4.1 安装相关依赖</h4><ol><li><p>在<a href="https://mvnrepository.com/">Maven 仓库地址</a>中查找如下依赖，并添加到<code>pom.xml</code>文件中，并更新 Maven 依赖</p><ul><li>spring-boot-starter-security</li></ul></li><li><p>然后重启项目后，访问相关端口需要先登录。<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227082643042.png" alt="image-20230227082643042"></p></li><li><p>username 默认为 user,密码为随机生成，见命令行。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227082620583.png" alt="image-20230227082620583"></p></li></ol><h4 id="4-2-修改-security"><a href="#4-2-修改-security" class="headerlink" title="4.2 修改 security"></a>4.2 修改 security</h4><ol><li><p>实现实现由数据库中的用户登录</p><ul><li>首先在如下目录中，新建 UserDetailsServiceImpl 类，继承自 UserDetailsService 接口，用来接入数据库信息</li></ul><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227090455634.png" alt="image-20230227090455634" style="zoom:67%;" /><ul><li><p>UserDetailsServiceImpl 实现了根据 username 返回用户信息，用于登录验证，代码如下：</p><blockquote><p>这里会将数据库中该用户的 password 与用户输入的 password 进行比较，注意这里是明文比较，需要在数据库中的 password 字段前前加<code>&#123;noop&#125;</code>，表示密码没有加密。</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227092255287.png" alt="image-20230227092255287" style="zoom: 67%;" /></blockquote></li></ul><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227090546982.png" alt="image-20230227090546982" style="zoom:67%;" /><ul><li>其中，UserDetailsImpl 为实现的工具，用于返回用户各种信息，该类继承于 implements，按<code>alt+insert</code>可自动补全父类中需要重写的方法，部分代码截图如下：</li></ul><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227090846640.png" alt="image-20230227090846640" style="zoom:60%;" /><p>以上实现的为密码<strong>明文比较</strong>进行登录，还未对密码进行加密。</p></li><li><p>实现 config.SecurityConfig 类，用来实现用户密码的加密存储</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227093653414.png" alt="image-20230227093653414" style="zoom: 67%;" /><blockquote><p>可以在 test 中进行测试，如图：</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227095103549.png" alt="image-20230227095103549" style="zoom:67%;" /></blockquote><p>然后在新建用户时将 password 换为加密后的密码即可，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/add/&#123;userId&#125;/&#123;username&#125;/&#123;password&#125;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PathVariable</span> <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PathVariable</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PathVariable</span> String password)</span></span>&#123;</span><br><span class="line">        PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        String encodePassword = passwordEncoder.encode(password);</span><br><span class="line">        User user = <span class="keyword">new</span> User(userId,username,encodePassword);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Add User Successfully&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-jwt-验证"><a href="#5-jwt-验证" class="headerlink" title="5. jwt 验证"></a>5. jwt 验证</h3><h4 id="5-1-安装相关依赖"><a href="#5-1-安装相关依赖" class="headerlink" title="5.1 安装相关依赖"></a>5.1 安装相关依赖</h4><ol><li><p>在<a href="https://mvnrepository.com/">Maven 仓库地址</a>中查找如下依赖，并添加到<code>pom.xml</code>文件中，然后更新 maven 依赖：</p><ul><li><code>jjwt-api</code></li><li><code>jjwt-impl</code></li><li><code>jjwt-jackson</code></li></ul></li><li><p>实现<code>utils.JwtUtil</code>类，为<code>jwt</code>工具类，用来创建、解析<code>jwt token</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> JWT_TTL = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span> * <span class="number">24</span> * <span class="number">14</span>;  <span class="comment">// 有效期14天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JWT_KEY = <span class="string">&quot;SDFGjhdsfalshdfHFdsjkdsfds121232131afasdfac&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, <span class="keyword">null</span>, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> </span>&#123;</span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line">        SecretKey secretKey = generalKey();</span><br><span class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> expMillis = nowMillis + ttlMillis;</span><br><span class="line">        Date expDate = <span class="keyword">new</span> Date(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuer(<span class="string">&quot;sg&quot;</span>)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .signWith(signatureAlgorithm, secretKey)</span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">generalKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encodeKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(encodeKey, <span class="number">0</span>, encodeKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKey secretKey = generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>config.filter.JwtAuthenticationTokenFilter</code>类，用来验证<code>jwt token</code>，如果验证成功，则将<code>User</code>信息注入上下文中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kob.backend.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.service.impl.utils.UserDetailsImpl;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, <span class="meta">@NotNull</span> HttpServletResponse response, <span class="meta">@NotNull</span> FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token) || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        token = token.substring(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User user = userMapper.selectById(Integer.parseInt(userid));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserDetailsImpl loginUser = <span class="keyword">new</span> UserDetailsImpl(user);</span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置<code>config.SecurityConfig</code>类，放行登录、注册等接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kob.backend.config.filter.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/account/token/&quot;</span>, <span class="string">&quot;/user/account/register/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-2-编写-API"><a href="#5-2-编写-API" class="headerlink" title="5.2 编写 API"></a>5.2 编写 API</h4><ol><li><p>将数据库中的<code>id</code>域变为自增</p><ul><li>在数据库中将<code>id</code>列变为自增</li><li>在<code>pojo.User</code>类中添加注解：<code>@TableId(type = IdType.AUTO)</code></li></ul></li><li><p>实现<code>/user/account/token/</code>：验证用户名密码，验证成功后返回<code>jwt token</code>（令牌）</p><p><strong>注意：在 POST 方法中</strong></p><ul><li><p><code>@RequestBody</code>获取的是<code>axios</code>中<code>data</code>字段携带的数据</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227163918163.png" alt="image-20230227163918163" style="zoom:67%;" /> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227164055094.png" alt="image-20230227164055094" style="zoom:67%;" /></li><li><p><code>@RequestParam</code>获取的是<code>axios</code>中<code>params</code>字段携带的数据</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227164252146.png" alt="image-20230227164252146" style="zoom:67%;" /> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227164321030.png" alt="image-20230227164321030" style="zoom:67%;" /></li></ul></li><li><p>实现<code>/user/account/info/</code>：根据令牌返回用户信息</p></li><li><p>实现<code>/user/account/register/</code>：注册账号</p></li></ol><h2 id="编写-API-的总结"><a href="#编写-API-的总结" class="headerlink" title="编写 API 的总结"></a>编写 API 的总结</h2><ol><li><p>首先在 pojo 封装与数据库对应的类</p><blockquote><p>注意：数据库里字段命名用 create_time，pojo 里用驼峰命名 createTime</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227172944636.png" alt="image-20230227172944636"></p></li><li><p>在 mapper 层，实现<code>UserMapper</code>接口 让其继承<code>mybatis</code>封装的<code>BaseMapper</code>接口，该接口内定义了许多封装好的接口，用于查询数据库，这样就可以避免写 sql 语句了,相关 api 见<a href="https://baomidou.com/">Mybatis-Plus 官网</a></p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227174734447.png" alt="image-20230227174734447" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;  <span class="comment">// 让UserMapper接口继承mybatis封装的BaseMapper接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在 service 层定义接口，并实现该接口。</p><ul><li><p>service 层整体目录：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227173402697.png" alt="image-20230227173402697" style="zoom:67%;" /></li><li><p><code>service/user/account/RegisterService</code>中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">register</span><span class="params">(String username, String password, String confirmedPassword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>service/impl/user/account/RegisterService</code>中实现接口</p><p>public class RegisterServiceImpl implements RegisterService {<br>@Autowired<br>private UserMapper userMapper; // 继承了 mybatis 中的 BaseMapper 类 不用写 sql 语句了 直接调 api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;  <span class="comment">// 密码加密的接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">register</span><span class="params">(String username, String password, String confirmedPassword)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;  <span class="comment">// null判断是否有这个参数 和 参数长度为0不一样</span></span><br><span class="line">        map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password == <span class="keyword">null</span> || confirmedPassword == <span class="keyword">null</span>) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .... 此处省略各种特判......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据库 验证用户名是否存在</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (!users.isEmpty()) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建用户</span></span><br><span class="line">    String encodedPassword = passwordEncoder.encode(password);</span><br><span class="line">    String photo = <span class="string">&quot;https://cdn.acwing.com/media/user/profile/photo/1_lg_844c66b332.jpg&quot;</span>;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="keyword">null</span>, username, encodedPassword, photo); <span class="comment">// id是自增的 所以不用传</span></span><br><span class="line">    userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后在<code>controller</code>层映射指定路径到接口</p><p><code>controller/user/account/</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RegisterService registerService; <span class="comment">// 生成之前实现的接口实例，这样可以调用接口里实现的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/account/register/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">register</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        String username = map.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = map.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String confirmedPassword = map.get(<span class="string">&quot;confirmedPassword&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registerService.register(username, password, confirmedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="匹配系统"><a href="#匹配系统" class="headerlink" title="匹配系统"></a>匹配系统</h2><h3 id="1-前后端-WebSocekt-连接"><a href="#1-前后端-WebSocekt-连接" class="headerlink" title="1. 前后端 WebSocekt 连接"></a>1. 前后端 WebSocekt 连接</h3><h4 id="后端集成-WebSocket"><a href="#后端集成-WebSocket" class="headerlink" title="后端集成 WebSocket"></a>后端集成 WebSocket</h4><ol><li><p>在 pom.xml 文件中添加依赖：</p><ul><li><code>spring-boot-starter-websocket</code></li><li><code>fastjson</code></li></ul></li><li><p>添加<code>config.WebSocketConfig</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加<code>consumer.WebSocketServer</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;token&#125;&quot;)</span>  <span class="comment">// 注意不要以&#x27;/&#x27;结尾</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存所有的用户 静态变量 ConcurrentHashMap是进程安全的HashMap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;Integer,WebSocketServer&gt; users =  <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个session对应一个user</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 匹配池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;User&gt; matchPool = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例模式注入UserMapper</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span></span>&#123;</span><br><span class="line">        WebSocketServer.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;token&quot;)</span> String token)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">System.out.println(<span class="string">&quot;onOpen&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关闭链接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;onclose&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            users.remove(<span class="keyword">this</span>.user.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从Client接收消息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;onMessage&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;onError&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 发送消息给从Client</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.session)&#123;  <span class="comment">// 锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>config.SecurityConfig</code>中添加如下代码，跳过 jwt 验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     web.ignoring().antMatchers(<span class="string">&quot;/websocket/**&quot;</span>);  <span class="comment">// 开发接口 跳过jwt验证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="前端集成-WebSocket"><a href="#前端集成-WebSocket" class="headerlink" title="前端集成 WebSocket"></a>前端集成 WebSocket</h4><blockquote><p>前端有封装好的 WebSocket 类，直接调用相关 api 即可，这里没有跨域问题，直接使用后端端口就行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socketUrl = <span class="string">`ws://localhost:3030/websocket/<span class="subst">$&#123;store.state.user.token&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> socket: WebSocket | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 建立连接</span></span><br><span class="line">  socket = <span class="keyword">new</span> WebSocket(socketUrl);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始连接的钩子函数</span></span><br><span class="line">  socket.onopen = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onopen&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向服务端发送消息</span></span><br><span class="line">  socket.send(<span class="built_in">JSON</span>.stringify(&#123; <span class="attr">event</span>: <span class="string">&quot;start-matching&quot;</span> &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从服务端接收消息</span></span><br><span class="line">  socket.onmessage = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(msg.data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结束连接的钩子函数</span></span><br><span class="line">  socket.onclose = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onclose&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 断开连接</span></span><br><span class="line">  socket?.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-创建微服务"><a href="#2-创建微服务" class="headerlink" title="2.创建微服务"></a>2.创建微服务</h3><ol><li><p>新建一个<code>backendcloud</code>项目，勾选<code>spring web</code>依赖</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307210913920.png" alt="image-20230307210913920" style="zoom: 67%;" /> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307210957305.png" alt="image-20230307210957305" style="zoom: 67%;" /></li><li><p>删除其 src 文件，并在<code>pom.xml</code>文件中添加<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p><blockquote><p>配置<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>的意思是使用 maven 分模块管理，都会有一个父级项目，pom 文件一个重要的属性就是 packaging（打包类型），一般来说所有的父级项目的 packaging 都为 pom，packaging 默认类型 jar 类型，如果不做配置，maven 会将该项目打成 jar 包。</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307211455062.png"></p></li><li><p>然后在<code>SpringCloud</code>项目中添加依赖：<a href="https://mvnrepository.com/">Maven 仓库地址</a></p><ul><li>spring-cloud-dependencies</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2021.0</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后在<code>backendcloud</code>中新建一个<strong>模块</strong>，命名为<code>matchingsystem</code></p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307211947105.png" alt="image-20230307211947105" style="zoom:67%;" /></li></ol>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307212543356.png" alt="image-20230307212543356" style="zoom:67%;" /><ol start="5"><li><p>将<code>backencloud</code>项目<code>pom.xml</code>中<code>spring Web</code>的依赖<strong>剪切</strong>到<code>matchingsystem</code>项目的<code>pom.xml</code>中，然后同步父项目<code>backencloud</code>和子项目<code>matchingsystem</code>的<code>maven</code>依赖。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307212811987.png" alt="image-20230307212811987" style="zoom: 46%;" /><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307212930685.png" alt="image-20230307212930685" style="zoom: 62%;" /></p></li><li><p>在子项目<code>matchingsystem</code>下的<code>resources</code>文件夹下新建<code>application.properties</code>文件，并配置端口号</p><blockquote><p>注意：别和 backend 的端口重了</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307213327245.png" alt="image-20230307213327245"></p></li><li><p>在子项目<code>matchingsystem</code>下创建<code>service</code>和<code>controller</code>层，编写相关端口</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307213932988.png" alt="image-20230307213932988" style="zoom:50%;" /><p>其中<code>MatchingController</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchingController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MatchingService matchingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/player/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addPlayer</span><span class="params">(<span class="meta">@RequestParam</span> MultiValueMap&lt;String, String&gt; data)</span> </span>&#123; <span class="comment">// 这里必须是MultiValueMap</span></span><br><span class="line">        Integer userId = Integer.parseInt(Objects.requireNonNull(data.getFirst(<span class="string">&quot;user_id&quot;</span>)));</span><br><span class="line">        Integer rating = Integer.parseInt(Objects.requireNonNull(data.getFirst(<span class="string">&quot;rating&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> matchingService.addPlayer(userId, rating);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/player/remove&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removePlayer</span><span class="params">(<span class="meta">@RequestParam</span> MultiValueMap&lt;String, String&gt; data)</span> </span>&#123;</span><br><span class="line">        Integer userId = Integer.parseInt(Objects.requireNonNull(data.getFirst(<span class="string">&quot;user_id&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> matchingService.removePlayer(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>security</code>，设置权限管理，只需要<code>backend</code>项目访问<code>matchingsystem</code>里的<code>addPlayer</code>和<code>removePlayer</code>接口。</p><ul><li><p>安装 security 依赖，并更新 maven</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>config/SecurityConfig</code>，并配置<code>security</code><strong>只允许本地 iP 访问</strong></p>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307214820943.png" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.matchingsystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/player/add&quot;</span>, <span class="string">&quot;/player/remove&quot;</span>).hasIpAddress(<span class="string">&quot;127.0.0.1&quot;</span>)<span class="comment">//只允许本地访问</span></span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>将<code>matchingsystem</code>下的<code>Main</code>文件重命名为<code>MatchingSystemApplication</code>，并修改为<code>SpringWeb</code>的入口文件<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307215346426.png" alt="image-20230307215346426"></p></li><li><p>启动<code>MatchingSystemApplication</code>项目，访问本地<code>3040</code>端口，结果如下，即为成功</p>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307215529013.png" style="zoom:67%;" /></li><li><p>重新创建一个子模块<code>backend</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;C:\Users\chjm\AppData\Roaming\Typora\typora-user-images\image-20230310163002032.png&quot;</span> alt=<span class="string">&quot;image-20230310163002032&quot;</span> style=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><pre><code> 12. 删除其`src`文件夹，再将之前`backend`里的`src`文件复制过来，并将其`pom`里依赖复制过来。 13.  创建`RestTemplateConfig`Bean，它的作用是**几个子项目之间通信**     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     并注入到`WebSocketServer`中：     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;token&#125;&quot;)</span>  <span class="comment">// 注意不要以&#x27;/&#x27;结尾</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子模块通信的url</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String addPlayerUrl =  <span class="string">&quot;http://127.0.0.1:3040/player/add&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String removePlayerUrl =  <span class="string">&quot;http://127.0.0.1:3040/player/remove&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入RestTemplateConfig</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRestTemplate</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        WebSocketServer.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始匹配时</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title">startMatching</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MultiValueMap&lt;String,String&gt; data = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        data.add(<span class="string">&quot;user_id&quot;</span>,<span class="keyword">this</span>.user.getId().toString());</span><br><span class="line">        data.add(<span class="string">&quot;rating&quot;</span>,<span class="keyword">this</span>.user.getRating().toString());</span><br><span class="line">        restTemplate.postForObject(addPlayerUrl,data,String.class); <span class="comment">// 发送给匹配系统服务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束匹配时</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title">stopMatching</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MultiValueMap&lt;String,String&gt; data = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        data.add(<span class="string">&quot;user_id&quot;</span>,<span class="keyword">this</span>.user.getId().toString());</span><br><span class="line">        restTemplate.postForObject(removePlayerUrl,data,String.class); <span class="comment">// 发送给匹配系统服务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     这里`restTemplate.postForObject(addPlayerUrl,data,String.class)`通过`post`给`matching Server`发送信息，而`Match Server`通过如下代码接受消息：     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchingController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MatchingService matchingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/player/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addPlayer</span><span class="params">(<span class="meta">@RequestParam</span> MultiValueMap&lt;String, String&gt; data)</span> </span>&#123; <span class="comment">// 这里必须是MultiValueMap</span></span><br><span class="line">        Integer userId = Integer.parseInt(Objects.requireNonNull(data.getFirst(<span class="string">&quot;user_id&quot;</span>)));</span><br><span class="line">        Integer rating = Integer.parseInt(Objects.requireNonNull(data.getFirst(<span class="string">&quot;rating&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> matchingService.addPlayer(userId, rating);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="Bot-代码执行"><a href="#Bot-代码执行" class="headerlink" title="Bot 代码执行"></a>Bot 代码执行</h2><ol><li><p>创建<code>SpringCloud</code>的子项目<code>BotRunningSystem</code></p></li><li><p>在<code>BotRunningSystem</code>项目中添加依赖：<a href="https://mvnrepository.com/">Maven 仓库地址</a></p><ul><li><code>joor-java-8</code>：java 代码编译</li><li><code>spring-cloud-dependencies</code></li><li><code>spring-boot-starter-security</code> ：网关</li><li><code>lombok</code> : 自动实现类的构建、getter、eques 方法</li></ul></li><li><p>创建<code>controller</code>,<code>service</code>,<code>config</code>等层，并创建启动文件<code>BotRunningSystemApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BotRunningSystemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动匹配池线程</span></span><br><span class="line">        <span class="comment">// 运行spring服务</span></span><br><span class="line">        SpringApplication.run(BotRunningSystemApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>resources/application.properties</code>中配置端口号，并在<code>config</code>中创建如下文件：</p><p><code>RestTemplateConfig</code>，用于子服务之间通信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/bot/add&quot;</span>).hasIpAddress(<span class="string">&quot;127.0.0.1&quot;</span>) <span class="comment">// 只允许本地访问</span></span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>SecurityConfig</code>，起到网关的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>在<code>config.MybatisConfig</code>中添加分页配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatisPlus配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatisPlus拦截器（用于分页）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//添加MySQL的分页拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="spring-整合-Minio"><a href="#spring-整合-Minio" class="headerlink" title="spring 整合 Minio"></a>spring 整合 Minio</h2><h3 id="1-腾讯云-ubuntu-系统改为-root-登陆"><a href="#1-腾讯云-ubuntu-系统改为-root-登陆" class="headerlink" title="1. 腾讯云 ubuntu 系统改为 root 登陆"></a>1. 腾讯云 ubuntu 系统改为 root 登陆</h3><p>因为腾讯云默认不是 root 用户，无法通过 xftp 传输文件，所以这里需要先修改下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 root 密码</span></span><br><span class="line">sudo passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 ssh 配置</span></span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改PermitRootLogin 将它后面改为yes</span></span><br><span class="line">:/PermitRootLogin  <span class="comment"># 向光标之下寻找第一个值为word的字符串  按n为接着找下一个</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316100300151.png" alt="image-20230316100300151"></p><p>最后重启 ssh 服务即可,这样本地就可以通过 ssh 登录 root 用户了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h3 id="2-通过-docker-安装-Minio"><a href="#2-通过-docker-安装-Minio" class="headerlink" title="2. 通过 docker 安装 Minio"></a>2. 通过 docker 安装 Minio</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索是否有 minio 镜像</span></span><br><span class="line">docker search minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有则拉取镜像</span></span><br><span class="line">docker pull minio/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先创建minio 文件和配置 存放的位置</span></span><br><span class="line">sudo mkdir -p /home/chjm/docker/minio/data</span><br><span class="line">sudo mkdir -p /home/chjm/docker/minio/config</span><br></pre></td></tr></table></figure><h3 id="3-启动-及配置-Minio"><a href="#3-启动-及配置-Minio" class="headerlink" title="3. 启动 及配置 Minio"></a>3. 启动 及配置 Minio</h3><h4 id="配置https访问"><a href="#配置https访问" class="headerlink" title="配置https访问"></a>配置<code>https</code>访问</h4><p>需要将<code>ssl</code>证书中的<code>.key</code>，<code>.crt</code>，移动到<code>minio</code>的<code>/home/chjm/docker/minio/config</code>下面，并重命名为<code>private.key</code>和<code>public.crt</code>两个文件</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316103239444.png" alt="image-20230316103239444"></p><h4 id="启动-minio"><a href="#启动-minio" class="headerlink" title="启动 minio"></a>启动 minio</h4><p>这里需要在腾讯云开放 9000 和 9090 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动并指定端口</span></span><br><span class="line">docker run -p 9000:9000 -p 9090:9090 \</span><br><span class="line">     --net=host \</span><br><span class="line">     --name minio \</span><br><span class="line">     -d --restart=always \</span><br><span class="line">     -e <span class="string">&quot;MINIO_ACCESS_KEY=chjm&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;MINIO_SECRET_KEY=ldx186729..&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;MINIO_SERVER_URL=https://chjm.online:9000&quot;</span> \</span><br><span class="line">     -v /home/chjm/docker/minio/data:/data  \</span><br><span class="line">     -v /home/chjm/docker/minio/config:/root/.minio  \</span><br><span class="line">     minio/minio server \</span><br><span class="line">     /data --console-address <span class="string">&quot;:9090&quot;</span> -address <span class="string">&quot;:9000&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里解释一下 docker 里面的几个参数</p><p>-p: 指定<a href="https://so.csdn.net/so/search?q=%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84&spm=1001.2101.3001.7020">端口映射</a>，格式为：主机（宿主）端口:容器端口</p><p>-e “MINIO_ROOT_USER=Jonny”: 设置环境变量；</p><p>-d: 后台运行容器，并返回容器 ID；</p><p>-v: 绑定一个卷</p><p>9090 端口指的是 minio 的客户端端口</p><p>MINIO_ACCESS_KEY ：账号</p><p>MINIO_SECRET_KEY ：密码（账号长度必须大于等于 5，密码长度必须大于等于 8 位）</p><p>MINIO_SERVER_URL ：ssl 证书绑定的域名 ，后面要加端口号 ，不然默认是 443</p><p>-v /home/chjm/docker/minio/config:/root/.minio : 修改 config 文件夹的地址</p></blockquote><h3 id="4-登录-Minio-服务端"><a href="#4-登录-Minio-服务端" class="headerlink" title="4.登录 Minio 服务端"></a>4.登录 Minio 服务端</h3><p>访问<a href="https://chjm.online:9090/login%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE">https://chjm.online:9090/login进行相关设置</a></p><p>首先下载 key</p><p><img src="C:\Users\chjm\AppData\Roaming\Typora\typora-user-images\image-20230315091010457.png" alt="image-20230315091010457"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230315091049492.png" alt="image-20230315091049492"></p><p>文件内容如下，保存文件，SDK 操作文件的 API 需要用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://127.0.0.1:9000&quot;</span>,<span class="string">&quot;accessKey&quot;</span>:<span class="string">&quot;PM9mZ2mFvU5jFHkz&quot;</span>,<span class="string">&quot;secretKey&quot;</span>:<span class="string">&quot;Sds7XdVDQX7sFgUm1MqIbEwPAc02H7yl&quot;</span>,<span class="string">&quot;api&quot;</span>:<span class="string">&quot;s3v4&quot;</span>,<span class="string">&quot;path&quot;</span>:<span class="string">&quot;auto&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个 bucket</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230315095349830.png" alt="image-20230315095349830" style="zoom: 67%;" /><p>记得开放桶的权限</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230315183403197.png" alt="image-20230315183403197"></p><h3 id="4-SpringBoot-整合-MinIO"><a href="#4-SpringBoot-整合-MinIO" class="headerlink" title="4. SpringBoot 整合 MinIO"></a>4. SpringBoot 整合 MinIO</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.minio/minio --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-application-yml-配置信息"><a href="#2-application-yml-配置信息" class="headerlink" title="2. application.yml 配置信息"></a>2. application.yml 配置信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minio:</span><br><span class="line">  endpoint: https://chjm.online:9000 <span class="comment"># Minio服务所在地址</span></span><br><span class="line">  bucketName: kob <span class="comment">#存储桶名称</span></span><br><span class="line">  accessKey: PM9mZ2mFvU5jFHkz <span class="comment">#访问的key</span></span><br><span class="line">  secretKey: Sds7XdVDQX7sFgUm1MqIbEwPAc02H7yl <span class="comment">#访问的秘钥</span></span><br></pre></td></tr></table></figure><h4 id="3-MinioConfig-配置类"><a href="#3-MinioConfig-配置类" class="headerlink" title="3.MinioConfig 配置类"></a>3.MinioConfig 配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MinioClient <span class="title">minioClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-MinioUtil-工具类"><a href="#4-MinioUtil-工具类" class="headerlink" title="4.MinioUtil 工具类"></a>4.MinioUtil 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.utils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfig prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看存储bucket是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">bucketExists</span><span class="params">(String bucketName)</span> </span>&#123;</span><br><span class="line">        Boolean found;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">makeBucket</span><span class="params">(String bucketName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">removeBucket</span><span class="params">(String bucketName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部bucket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Bucket&gt; <span class="title">getAllBuckets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Bucket&gt; buckets = minioClient.listBuckets();</span><br><span class="line">            <span class="keyword">return</span> buckets;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNowDate</span><span class="params">(String dateFormat)</span> </span>&#123;</span><br><span class="line">        Date currentTime = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        String dateString = formatter.format(currentTime);</span><br><span class="line">        <span class="keyword">return</span> dateString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(originalFilename))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">        UUID uuid = UUID.randomUUID();</span><br><span class="line">        String uid = uuid.toString().substring(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        String fileName = uid + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        String objectName = getNowDate(<span class="string">&quot;dd-MM-yyyy&quot;</span>) + <span class="string">&quot;/&quot;</span> + fileName;  <span class="comment">// 中间加个/ 意味着是在一个文件夹下</span></span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = file.getInputStream();</span><br><span class="line">            PutObjectArgs objectArgs = PutObjectArgs.builder()</span><br><span class="line">                    .bucket(prop.getBucketName())</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .stream(in, in.available(), -<span class="number">1</span>)</span><br><span class="line">                    .contentType(file.getContentType()).build();</span><br><span class="line">            <span class="comment">//文件名称相同会覆盖</span></span><br><span class="line">            minioClient.putObject(objectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预览图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">preview</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 查看文件地址</span></span><br><span class="line">        GetPresignedObjectUrlArgs build = <span class="keyword">new</span> GetPresignedObjectUrlArgs().builder().bucket(prop.getBucketName()).object(fileName).method(Method.GET).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String url = minioClient.getPresignedObjectUrl(build);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileName, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line">        GetObjectArgs objectArgs = GetObjectArgs.builder().bucket(prop.getBucketName())</span><br><span class="line">                .object(fileName).build();</span><br><span class="line">        <span class="keyword">try</span> (GetObjectResponse response = minioClient.getObject(objectArgs))&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">try</span> (FastByteArrayOutputStream os = <span class="keyword">new</span> FastByteArrayOutputStream())&#123;</span><br><span class="line">                <span class="keyword">while</span> ((len=response.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    os.write(buf,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                os.flush();</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = os.toByteArray();</span><br><span class="line">                res.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">// 设置强制下载不打开</span></span><br><span class="line">                <span class="comment">// res.setContentType(&quot;application/force-download&quot;);</span></span><br><span class="line">                res.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + fileName);</span><br><span class="line">                <span class="keyword">try</span> (ServletOutputStream stream = res.getOutputStream())&#123;</span><br><span class="line">                    stream.write(bytes);</span><br><span class="line">                    stream.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储bucket内文件对象信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">listObjects</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(prop.getBucketName()).build());</span><br><span class="line">        List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                items.add(result.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject( RemoveObjectArgs.builder().bucket(prop.getBucketName()).object(fileName).build());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-文件处理接口"><a href="#5-文件处理接口" class="headerlink" title="5.文件处理接口"></a>5.文件处理接口</h4><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><p><code>UploadImageService</code>层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.kob.backend.service.user.account;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public interface UploadImageService &#123;</span><br><span class="line">    public JsonResult&lt;JSONObject&gt; uploadImage (MultipartFile file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UploadImageServiceImpl</code>层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.service.impl.user.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadImageServiceImpl</span> <span class="keyword">implements</span> <span class="title">UploadImageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfig prop;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;JSONObject&gt; <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        String objectName = minioUtil.upload(file);</span><br><span class="line">        JSONObject resp = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != objectName) &#123;</span><br><span class="line">            resp.put(<span class="string">&quot;url&quot;</span>,(prop.getEndpoint() + <span class="string">&quot;/&quot;</span> + prop.getBucketName() + <span class="string">&quot;/&quot;</span> + objectName));</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> JsonResult&lt;&gt;(resp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult&lt;&gt;(<span class="number">1</span>,<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UploadImageController</code>层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.controller.user.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api/user/account/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadImageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadImageService uploadImageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;uploadImage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;JSONObject&gt; <span class="title">uploadImage</span><span class="params">(<span class="meta">@RequestBody</span> MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  uploadImageService.uploadImage(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><p>axio 接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export function uploadImage(formData: FormData) &#123;</span><br><span class="line">  return hyRequest.post&lt;IDataType&lt;&#123; url: string &#125;&gt;&gt;(&#123;</span><br><span class="line">    url: userAPI.uploadImage,</span><br><span class="line">    data: formData,</span><br><span class="line">    showLoading: false,</span><br><span class="line">    // psot发送FormData类型的数据需将请求头设置为 multipart/form-data</span><br><span class="line">    headers: &#123; &quot;Content-Type&quot;: &quot;multipart/form-data&quot; &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-upload action=&quot;none&quot; :auto-upload=&quot;false&quot; :on-change=&quot;handleUploadChange&quot;&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;Click to upload&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">const handleUploadChange: UploadProps[&quot;onChange&quot;] = async (</span><br><span class="line">  uploadFile,</span><br><span class="line">  uploadFiles</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  let formData = new FormData();</span><br><span class="line">  formData.append(&quot;file&quot;, uploadFile.raw as any);</span><br><span class="line">  const res = await uploadImage(formData);</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="上线服务"><a href="#上线服务" class="headerlink" title="上线服务"></a>上线服务</h2><h3 id="配置-docker-容器"><a href="#配置-docker-容器" class="headerlink" title="配置 docker 容器"></a>配置 docker 容器</h3><p>将<code>AC Terminal</code>里的<code>django_lesson:1.0</code>镜像传到服务器上</p><p><code>cd /var/lib/acwing/docker/images/</code></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314174452964.png" alt="image-20230314174452964"></p><p>然后在服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 将镜像加载到本地</span></span><br><span class="line">docker load -i django_lesson_1_0.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用该镜像，创建并启动一个容器，开放相关kob项目所需的端口，并设置name为kob_docker_server</span></span><br><span class="line">docker run -p 20000:22 -p 443:443 -p 80:80 -p 3030:3030 -p 3040:3040 -p 3050:3050 --name kob_docker_server -itd django_lesson:1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入创建的docker容器</span></span><br><span class="line">docker attach kob_docker_server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新root用户密码</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><blockquote><p>这里腾讯云里也要开启 20000 端口</p></blockquote><p>为防止 root 用户权限过大，导致误操作，先在 root 账户下添加一个新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adduser chjm  <span class="comment"># 创建用户chjm</span></span><br><span class="line">usermod -aG chjm  <span class="comment"># 给用户chjm分配sudo权限</span></span><br><span class="line">adduser chjm sudo <span class="comment"># 将用户名chjm添加到sudoers文件</span></span><br><span class="line">su chjm  <span class="comment"># 切换到chjm用户</span></span><br></pre></td></tr></table></figure><p>然后<code>ctrl+p</code>,<code>ctrl+q</code>挂起，通过<code>ssh</code>进行连接，注意这里连接的端口号是<code>20000</code>，</p><p>然后将祖传配置传到<code>root</code>文件夹和<code>chjm</code>文件夹下</p><blockquote><p>这里登录 root 用户使用<code>xftp</code>传才有权限进入 root 目录</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314181424294.png" alt="image-20230314181424294"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp .bashrc .vimrc .tmux.conf /root</span><br><span class="line">sudo cp .bashrc .vimrc .tmux.conf /home/chjm</span><br></pre></td></tr></table></figure><p>然后创建<code>/home/chjm/kob</code>文件夹，并在其中创建<code>backcloud</code>，<code>web</code>文件夹</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316105437026.png" alt="image-20230316105437026" style="zoom:67%;" /><h3 id="安装、配置-mysql"><a href="#安装、配置-mysql" class="headerlink" title="安装、配置 mysql"></a>安装、配置 mysql</h3><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先更新</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo service mysql start <span class="comment"># 可以输入top 查看启动的进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">sudo mysql -u root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在mysql下设置root用户的密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH caching_sha2_password BY <span class="string">&#x27;yourpasswd&#x27;</span>;  <span class="comment"># yourpasswd为要输入密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><strong>登录<code>mysql</code>，创建<code>kob</code>数据库，并进入<code>kob</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码登录</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kob数据库</span></span><br><span class="line">create database kob; <span class="comment"># show databases; 查看当前所有数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入kob数据库</span></span><br><span class="line">use kob;</span><br><span class="line"></span><br><span class="line">show tables;  <span class="comment"># 可以查看当前所有表</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 ：mysql 里面输入命令行 最后都需要加<code>；</code></p></blockquote><p><strong>在<code>kob</code>数据库下创建表：</strong></p><p>复制<code>idea</code>生产的 DDL</p>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230313211347346.png" alt="image-20230313211347346" style="zoom:67%;" /><p>在云端创建 sql 文件，并将复制的 DDL 粘贴过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim create_table.sql</span><br><span class="line">:<span class="built_in">set</span> paste</span><br><span class="line">i</span><br><span class="line"><span class="built_in">shift</span>+insert</span><br></pre></td></tr></table></figure>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230313211806888.png" alt="image-20230313211806888" style="zoom:67%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码登录mysql</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入kob数据库</span></span><br><span class="line">use kob;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line"><span class="built_in">source</span> /home/chjm/kob/create_table.sql;</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314183609263.png" alt="image-20230314183609263"></p><h3 id="安装-java"><a href="#安装-java" class="headerlink" title="安装 java"></a>安装 java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先更新</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否安装成功</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="打包后端"><a href="#打包后端" class="headerlink" title="打包后端"></a>打包后端</h3><p><code>pom.xml</code>中添加配置：</p><p>三个服务都需要进行如下配置：</p><p>添加一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打包的类型</span></span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>以及打包的相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;!--这里写上main方法所在类的路径--&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;mainClass&gt;com.kob.backend.BackendApplication&lt;/mainClass&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><mainClass>com.kob.backend.BackendApplication</mainClass> 要改为三个包主文件相符的路径</p></blockquote><p><strong>注意打包前修改下 mysql 数据库的账户和密码与服务器里数据库设置的要相匹配</strong></p><p>然后使用<code>maven</code>进行打包,会在三个文件夹里生产<code>target</code>目录</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314084612859.png" alt="image-20230314084612859"></p><p>将各自<code>target</code>中的<code>jar</code>文件传到服务器即可</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314091644554.png" alt="image-20230314091644554"></p><p>将三个<code>jar</code>文件移动到<code>chjm/kob/backendcloud</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将三个jar文件移动到当前目录</span></span><br><span class="line">cp ~/*.jar .</span><br></pre></td></tr></table></figure><p><img src="C:\Users\chjm\AppData\Roaming\Typora\typora-user-images\image-20230316111656492.png" alt="image-20230316111656492"></p><p>然后使用<code>tmux</code>开启三个窗口，分别运行三个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行java后端</span><br><span class="line">java -jar 包名</span><br><span class="line">sudo java -jar botrunningsystem-0.0.1-SNAPSHOT.jar  <span class="comment"># 注意因为这个服务需要读取文件 所以需要夹sudo权限</span></span><br></pre></td></tr></table></figure><h3 id="打包前端"><a href="#打包前端" class="headerlink" title="打包前端"></a>打包前端</h3><p>请求接口配置</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314203919574.png" alt="image-20230314203919574" style="zoom:67%;" /><p>websocket 配置，这里需要改为 wss</p><blockquote><p>http 协议下使用 ws，在 https 协议下使用 wss</p><p>WS 一般默认是 80 端口，而 WSS 默认是 443 端口，大多数网站用的就是 80 和 433 端口</p></blockquote><p><img src="C:\Users\chjm\AppData\Roaming\Typora\typora-user-images\image-20230316141814490.png" alt="image-20230316141814490"></p><p>在打包后的<code>index.html</code>中添加如下代码，意思是自动将 http 的不安全请求升级为 https</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>然后将打包的 dist 文件夹内的内容复制到服务器端</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314204408094.png" alt="image-20230314204408094"></p><h3 id="设置-nginx"><a href="#设置-nginx" class="headerlink" title="设置 nginx"></a>设置 nginx</h3><p>部署<code>ssl</code>证书</p><p>在腾讯云申请后，点击下载，并选择<code>Nginx</code>的配置文件</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316091726912.png" alt="image-20230316091726912"></p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314095742527.png" alt="image-20230314095742527" style="zoom:67%;" /><p>下载后如图：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316091703426.png" alt="image-20230316091703426" style="zoom:67%;" /><p>将<code>.key</code>和<code>.pem</code>文件传到到云端<code>etc/nginx/cert/</code>文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认是没有cert文件夹的</span></span><br><span class="line">sudo mkdir cert</span><br></pre></td></tr></table></figure><p>使用<code>xftp</code>传文件，<code>kob_docker_server</code>需要使用<code>root</code>账户登录<strong>才有权限</strong>进入<code>/etc</code>文件下</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316091807404.png" alt="image-20230316091807404"></p><p>将下列内容写入<code>/etc/nginx/.conf</code>配置文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled<span class="comment">/*.conf;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">events &#123;</span></span><br><span class="line"><span class="comment">worker_connections 768;</span></span><br><span class="line"><span class="comment"># multi_accept on;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">http &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Basic Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sendfile on;</span></span><br><span class="line"><span class="comment">tcp_nopush on;</span></span><br><span class="line"><span class="comment">tcp_nodelay on;</span></span><br><span class="line"><span class="comment">keepalive_timeout 65;</span></span><br><span class="line"><span class="comment">types_hash_max_size 2048;</span></span><br><span class="line"><span class="comment"># server_tokens off;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line"><span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">include /etc/nginx/mime.types;</span></span><br><span class="line"><span class="comment">default_type application/octet-stream;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># SSL Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE</span></span><br><span class="line"><span class="comment">ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Logging Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">access_log /var/log/nginx/access.log;</span></span><br><span class="line"><span class="comment">error_log /var/log/nginx/error.log;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Gzip Settings</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">gzip on;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># gzip_vary on;</span></span><br><span class="line"><span class="comment"># gzip_proxied any;</span></span><br><span class="line"><span class="comment"># gzip_comp_level 6;</span></span><br><span class="line"><span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line"><span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line"><span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Virtual Host Configs</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment">include /etc/nginx/sites-enabled/*;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">server &#123;</span></span><br><span class="line"><span class="comment">         listen 80;</span></span><br><span class="line"><span class="comment">         server_name chjm.online;</span></span><br><span class="line"><span class="comment">         rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">server &#123;</span></span><br><span class="line"><span class="comment"> #SSL 默认访问端口号为 443</span></span><br><span class="line"><span class="comment"> listen 443 ssl;</span></span><br><span class="line"><span class="comment"> #请填写绑定证书的域名</span></span><br><span class="line"><span class="comment"> server_name chjm.online;</span></span><br><span class="line"><span class="comment"> #请填写证书文件的相对路径或绝对路径</span></span><br><span class="line"><span class="comment"> ssl_certificate  cert/chjm.online_bundle.pem;</span></span><br><span class="line"><span class="comment"> #请填写私钥文件的相对路径或绝对路径</span></span><br><span class="line"><span class="comment"> ssl_certificate_key cert/chjm.online.key;</span></span><br><span class="line"><span class="comment"> ssl_session_timeout 5m;</span></span><br><span class="line"><span class="comment"> #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class="line"><span class="comment"> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span><br><span class="line"><span class="comment"> #请按照以下协议配置</span></span><br><span class="line"><span class="comment"> ssl_protocols TLSv1.2 TLSv1.3;</span></span><br><span class="line"><span class="comment"> ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment"> location / &#123;</span></span><br><span class="line"><span class="comment">   #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span></span><br><span class="line"><span class="comment">   #例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。</span></span><br><span class="line"><span class="comment">   root /home/chjm/kob/web;</span></span><br><span class="line"><span class="comment">            index index.html;</span></span><br><span class="line"><span class="comment">            try_files $uri $uri/ /index.html;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">location /api &#123;</span></span><br><span class="line"><span class="comment">            proxy_pass http://127.0.0.1:3030;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">location /websocket &#123;</span></span><br><span class="line"><span class="comment">            proxy_pass http://127.0.0.1:3030;</span></span><br><span class="line"><span class="comment">            proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line"><span class="comment">            proxy_set_header Host $http_host;</span></span><br><span class="line"><span class="comment">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            proxy_http_version 1.1;</span></span><br><span class="line"><span class="comment">            proxy_set_header Upgrade $http_upgrade;</span></span><br><span class="line"><span class="comment">            proxy_set_header Connection &quot;upgrade&quot;;</span></span><br><span class="line"><span class="comment">            proxy_read_timeout  36000s;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>然后启动<code>nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx start  <span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/nginx reload <span class="comment"># 重启动</span></span><br></pre></td></tr></table></figure><p>若为<code>fail</code></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314103040049.png" alt="image-20230314103040049"></p><p>可在<code>/var/log/nginxerror.log</code>查看报错信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/<span class="built_in">log</span>/nginx</span><br><span class="line">sudo vim error.log</span><br></pre></td></tr></table></figure><p>启动成功即可通过<a href="https://chjm.online访问部署的网站/">https://chjm.online访问部署的网站</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习</title>
      <link href="/2023/01/15/Linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/15/Linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-基础课"><a href="#Linux-基础课" class="headerlink" title="Linux 基础课"></a>Linux 基础课</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="1-文件结构"><a href="#1-文件结构" class="headerlink" title="1.文件结构"></a>1.文件结构</h3><p>(1) / 根目录 bin 可执行文件<br>(2) etc 配置文件<br>(3) var/log 日志<br>(4) lib 头文件、各种库<br>(5) home/acs 用户文件夹<br>(6) proc 进程相关的信息</p><h3 id="2-路径问题"><a href="#2-路径问题" class="headerlink" title="2.路径问题"></a>2.路径问题</h3><p>(1) ./ 是当前目录<br>(2) ../ 是上一级目录<br>(3) / 是根目录<br>(4) ~/ 是家目录（即用户目录）</p><h3 id="3-常用文件管理命令"><a href="#3-常用文件管理命令" class="headerlink" title="3.常用文件管理命令"></a>3.常用文件管理命令</h3><ol><li><p>ctrl c : 取消命令，并且换行</p></li><li><p>ctrl u : 清空本行命令</p></li><li><p>history : 输出历史输入命令</p></li><li><p>方向键 ↑ 是输入上一次输入的命令</p></li><li><p>tab 键 ：可以补全命令和文件名，如果补全不了快速按两下 tab 键，可以显示备选选项</p></li><li><p>ls : 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p><blockquote><p>ls -l : 查看所有文件信息<br>ls -lh : 文件信息 30952-&gt;31k 更加人性化<br>ls -a : 查看以点开头的隐藏文件</p></blockquote></li><li><p>cd XXX : 进入 XXX 目录下。</p><ul><li>cd .. 返回上层目录</li><li>cd - 返回上一个待过的目录</li></ul></li><li><p>find a : 展示 a 文件夹里有啥</p></li><li><p>cat XXX : 展示文件 XXX 中的内容 只能看文件的内容 不能看文件夹</p></li><li><p>pwd : 显示当前路径</p></li><li><p>cp XXX YYY : 将 XXX 文件复制成 YYY，XXX 和 YYY 可以是一个路径，</p><blockquote><p>eg1: cp a/tmp.txt b/ 就是将 a 文件夹下的 tmp.txt 移动到 b 文件夹下并命名为 tmp.txt<br>eg2: cp a/tmp.txt b/tmp2.txt 就是将 a 文件夹下的 tmp.txt 移动到 b 文件夹下并命名为 tmp2.txt<br>eg3: cp a b -r 将 a 整个文件夹复制到 b 文件夹里 (当前文件夹内有 b 文件夹）<br>eg4: cp a c -r 将 a 在当前文件夹以 c 为命名重新复制一份 (当前文件夹内无 c 文件夹）</p></blockquote></li><li><p>mv XXX YYY : 将 XXX 文件移动到 YYY，和 cp 命令一样，XXX 和 YYY 可以是一个路径；<strong>重命名</strong>也是用这个命令</p><blockquote><p>eg1: mv a/tmp.txt b/ 只移动</p><p>eg2: mv a/tmp.txt b/tmp2.txt 移动加重命名</p><p>eg3: mv tmp.txt tmp2.txt 只重命名</p></blockquote></li><li><p>mkdir XXX : 创建文件夹</p><blockquote><p>eg1: mkdir /home/acs/a/b 以绝对路径的方式在 a 文件夹内创建 b 文件夹(home,acs,a 文件夹都存在)</p><p>eg2 mkdir a/b/c/d -p 在 a 文件夹下连续创建嵌套的 b,c,d 文件夹 任意一层存在了则跳过创建</p></blockquote></li><li><p>touch XXX : 创建一个文件</p></li><li><p>rm XXX : 删除普通文件; rm XXX -r: 删除文件夹</p><blockquote><p>eg1: rm t1.txt t2.txt 删除两个文件 支持正则表达式 即 rm t1.txt t2.txt -&gt; rm *.txt</p><p>eg2: rm a/* 删除 a 文件夹下所有的东西 但不删除 a 文件夹</p></blockquote></li><li><p>复制文本<br>windows/Linux 下：Ctrl + insert，Mac 下：command + c</p></li><li><p>粘贴文本<br>windows/Linux 下：Shift + insert，Mac 下：command + v</p></li></ol><h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1.功能"></a>1.功能</h3><ol><li>分屏。</li><li>允许断开 Terminal 连接后，继续运行进程。</li></ol><h3 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a>2.结构</h3><ul><li><p>一个 tmux 可以包含多个 session，一个 session 可以包含多个 window，一个 window 可以包含多个 pane，每个 pane 都可以打开一个 shell 对话框</p><blockquote><p>tmux：<br>session 0：<br>window 0：<br>pane 0<br>pane 1<br>pane 2<br>…<br>window 1<br>window 2<br>…<br>session 1<br>session 2<br>…</p></blockquote></li></ul><h3 id="3-操作"><a href="#3-操作" class="headerlink" title="3.操作"></a>3.操作</h3><ol><li><p>tmux：新建一个 session，其中包含一个 window，window 中包含一个 pane，pane 里打开了一个 shell 对话框。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动tmux 默认为自增的编号</span></span><br><span class="line">tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命名tmux</span></span><br><span class="line">tmux new -s &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可看到当前所有的tmux伪窗口</span></span><br><span class="line">tmux ls <span class="comment"># 注意一个每个用户的tmux列表是不互通的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出tmux伪窗口</span></span><br><span class="line">tmux detach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重接会话</span></span><br><span class="line">tmux attach -t 0  <span class="comment"># 使用伪窗口编号</span></span><br><span class="line">tmux attach -t xiaoqi <span class="comment"># 使用伪窗口名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死对话</span></span><br><span class="line">tmux kill-session -t 0 <span class="comment"># 使用会话编号</span></span><br><span class="line">tmux kill-session -t &lt;name&gt; <span class="comment"># 使用会话名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换会话</span></span><br><span class="line">tmux switch -t 0 <span class="comment"># 使用会话编号</span></span><br><span class="line">tmux switch -t &lt;session-name&gt; <span class="comment"># 使用会话名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名会话</span></span><br><span class="line">tmux rename-session -t 0 &lt;new-name&gt; <span class="comment"># 使用会话编号</span></span><br></pre></td></tr></table></figure></li><li><p>按下 Ctrl + a 后手指松开，然后按%：将当前 pane 左右平分成两个 pane。</p></li><li><p>按下 Ctrl + a 后手指松开，然后按”（注意是双引号”）：将当前 pane 上下平分成两个 pane。</p></li><li><p>Ctrl + d：关闭当前 pane；如果当前 window 的所有 pane 均已关闭，则自动关闭 window；如果当前 session 的所有 window 均已关闭，则自动关闭 session。</p></li><li><p>鼠标点击可以选 pane。</p></li><li><p>按下 ctrl + a 后手指松开，然后按方向键：选择相邻的 pane。</p></li><li><p>鼠标拖动 pane 之间的分割线，可以调整分割线的位置。</p></li><li><p>按住 ctrl + a 的同时按方向键，可以调整 pane 之间分割线的位置。</p></li><li><p>按下 ctrl + a 后手指松开，然后按 z：将当前 pane 全屏/取消全屏。</p></li><li><p>按下 ctrl + a 后手指松开，然后按 d：挂起当前 session。</p></li><li><p>tmux a：打开之前挂起的 session。</p></li><li><p>按下 ctrl + a 后手指松开，然后按 s：选择其它 session。</p></li></ol><blockquote><p>方向键 —— 上：选择上一项 session/window/pane<br>方向键 —— 下：选择下一项 session/window/pane<br>方向键 —— 右：展开当前项 session/window<br>方向键 —— 左：闭合当前项 session/window</p></blockquote><ol start="13"><li><p>按下 Ctrl + a 后手指松开，然后按 c：在当前 session 中创建一个新的 window。</p></li><li><p>按下 Ctrl + a 后手指松开，然后按 w：选择其他 window，操作方法与(12)完全相同。</p></li><li><p>按下 Ctrl + a 后手指松开，然后按 PageUp：翻阅当前 pane 内的内容。</p></li><li><p>鼠标滚轮：翻阅当前 pane 内的内容。</p></li><li><p>在 tmux 中选中文本时，需要按住 shift 键。（仅支持 Windows 和 Linux，不支持 Mac，不过该操作并不是必须的，因此影响不大）</p><blockquote><p>:set nonu 删除行号</p><p>shift + 鼠标选择内容</p><p>Ctrl + insert 复制选中内容</p><p>:set paste 进入粘贴模式</p><p>i 进入编辑模式</p><p>Shift + insert 粘贴内容</p></blockquote></li><li><p>tmux 中复制/粘贴文本的通用方式：</p></li></ol><blockquote><p>(1) 按下 Ctrl + a 后松开手指，然后按[</p><blockquote><p>(2) 用鼠标选中文本，被选中的文本会被自动复制到 tmux 的剪贴板<br>(3) 按下 Ctrl + a 后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</p></blockquote></blockquote><ol start="19"><li><p>关闭对话</p><blockquote><p>使用会话编号或名称</p><p>tmux kill-session -t 0<br>tmux kill-session -t <session-name></p></blockquote></li></ol><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h3 id="1-功能-1"><a href="#1-功能-1" class="headerlink" title="1.功能"></a>1.功能</h3><ol><li><p>命令行模式下的文本编辑器。</p></li><li><p>根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</p></li><li><p>使用方式：vim filename</p><blockquote><p>如果已有该文件，则打开它。<br>如果没有该文件，则打开个一个新的文件，并命名为 filename</p></blockquote></li></ol><h3 id="2-模式"><a href="#2-模式" class="headerlink" title="2.模式"></a>2.模式</h3><p>(1) 一般命令模式<br>默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。<br>(2) 编辑模式<br>在一般命令模式里按下 i，会进入编辑模式。<br>按下 ESC 会退出编辑模式，返回到一般命令模式。<br>(3) 命令行模式<br>在一般命令模式里按下:/?三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>可以查找、替换、保存、退出、配置编辑器等。</p><h3 id="3-操作-1"><a href="#3-操作-1" class="headerlink" title="3.操作"></a>3.操作</h3><ol><li><p>i：进入编辑模式</p></li><li><p>ESC：进入一般命令模式</p></li><li><p>h 或 左箭头键：光标向左移动一个字符</p></li><li><p>j 或 向下箭头：光标向下移动一个字符</p></li><li><p>k 或 向上箭头：光标向上移动一个字符</p></li><li><p>l 或 向右箭头：光标向右移动一个字符</p></li><li><p>n&lt;Space&gt;：n 表示数字，按下数字后再按空格，光标会向右移动这一行的 n 个字符</p></li><li><p>0 或 功能键[Home]：光标移动到本行开头</p></li><li><p>$ 或 功能键[End]：光标移动到本行末尾</p></li><li><p>G：光标移动到最后一行</p></li><li><p>:n 或 nG ：n 为数字，光标移动到第 n 行 :即进入命令行模式</p></li><li><p>gg：光标移动到第一行，相当于 1G</p></li><li><p>n&lt;Enter&gt;：n 为数字，光标向下移动 n 行</p></li><li><p>/word：向光标之下寻找第一个值为 word 的字符串。</p></li><li><p>?word：向光标之上寻找第一个值为 word 的字符串。</p></li><li><p>n：重复前一个查找操作 往后找</p></li><li><p>N：反向重复前一个查找操作 往前找</p></li><li><p>:n1,n2s/word1/word2/g：n1 与 n2 为数字，在第 n1 行与 n2 行之间寻找 word1 这个字符串，并将该字符串替换为 word2</p><blockquote><p>eg: :5,7s/int/double/g 是将 5 到 7 行的 int 替换为 double</p></blockquote></li><li><p>:1,$s/word1/word2/g：将全文的 word1 替换为 word</p></li><li><p>:1,$s/word1/word2/gc：将全文的 word1 替换为 word2，且在<strong>每次替换前</strong>要求用户确认。</p></li><li><p>v：选中文本</p></li><li><p>d：删除选中的文本</p></li><li><p>dd: 删除当前行 带剪贴功能</p></li><li><p>y：复制选中的文本</p></li><li><p>yy: 复制当前行</p></li><li><p>p: 将复制的数据在光标的下一行/下一个位置粘贴</p></li><li><p>u：撤销</p></li><li><p>Ctrl + r：取消撤销</p></li><li><p>Ctrl + z：挂起</p></li><li><p>fg: 恢复挂起</p></li><li><p>大于号 &gt;：将选中的文本整体向右缩进一次</p></li><li><p>小于号 &lt;：将选中的文本整体向左缩进一次</p></li><li><p>:w 保存</p></li><li><p>:w! 强制保存</p></li><li><p>:q 退出</p></li><li><p>:q! 强制退出</p></li><li><p>:wq 保存并退出</p></li><li><p>:set paste 设置成粘贴模式，取消代码自动缩进</p></li><li><p>:set nopaste 取消粘贴模式，开启代码自动缩进</p><blockquote><p>粘贴代码前先设置成粘贴模式，<br>粘贴成功后再取消粘贴模式</p></blockquote></li><li><p>:set nu 显示行号</p></li><li><p>:set nonu 隐藏行号</p></li><li><p>:noh 关闭查找关键词高亮</p></li><li><p>Ctrl + q：当 vim 卡死时，可以取消当前正在执行的命令</p></li></ol><h4 id="3-1-连招"><a href="#3-1-连招" class="headerlink" title="3.1 连招"></a>3.1 连招</h4><ol><li>gg d G：删除全部</li><li>gg = G：将全文代码格式化</li></ol><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4 .异常处理"></a>4 .异常处理</h3><p>每次用 vim 编辑文件时，会自动创建一个.filename.swp 的临时文件。<br>如果打开某个文件时，该文件的 swp 文件已存在，则会报错。此时解决办法有两种：</p><blockquote><p>(1) 找到正在打开该文件的程序，并退出<br>(2) 直接删掉该 swp 文件即可</p></blockquote><h2 id="shell-语法"><a href="#shell-语法" class="headerlink" title="shell 语法"></a>shell 语法</h2><h3 id="1-概论"><a href="#1-概论" class="headerlink" title="1.概论"></a>1.概论</h3><p>shell 是我们通过命令行与操作系统沟通的语言。</p><p>shell 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p><p>Linux 中常见的 shell 脚本有很多种，常见的有：</p><blockquote><p>Bourne Shell(/usr/bin/sh 或/bin/sh)<br>Bourne Again Shell(/bin/bash)<br>C Shell(/usr/bin/csh)<br>K Shell(/usr/bin/ksh)<br>zsh<br>…</p></blockquote><h4 id="1-1-脚本示例"><a href="#1-1-脚本示例" class="headerlink" title="1.1 脚本示例"></a>1.1 脚本示例</h4><p>新建一个 test.sh 文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash  # 文件开头需要写#! /bin/bash，指明bash为脚本解释器。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-运行方式"><a href="#1-2-运行方式" class="headerlink" title="1.2 运行方式"></a>1.2 运行方式</h4><ul><li><p>作为可执行文件</p><blockquote><p>ls -l test.sh 查看文件信息</p><p>-rw-rw-r– 1 acs acs 33 sep 1 20:16 test.sh</p><p>r（Read，读取权限）<br>w（Write，写入权限）<br>x（eXecute，执行权限）</p><p>前三个 -rw：本人的权限</p><p>中间三个 -rw：同组的权限</p><p>后三个 r–：其他用户的权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh  <span class="comment"># 使脚本具有可执行权限</span></span><br><span class="line"><span class="comment"># 三种运行方式</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh  <span class="comment"># 当前路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ /home/acs/test.sh  <span class="comment"># 绝对路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ ~/test.sh  <span class="comment"># 家目录路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure></li><li><p>用解释器执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ bash test.sh</span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h3><h4 id="2-1-单行注释"><a href="#2-1-单行注释" class="headerlink" title="2.1 单行注释"></a>2.1 单行注释</h4><p>每行中#之后的内容均是注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一行注释</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World&#x27;</span>  <span class="comment">#  这也是注释</span></span><br></pre></td></tr></table></figure><h4 id="2-1-多行注释"><a href="#2-1-多行注释" class="headerlink" title="2.1 多行注释"></a>2.1 多行注释</h4><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>其中 EOF 可以换成其它任意字符串。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">abc</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h3><h4 id="3-1-定义变量"><a href="#3-1-定义变量" class="headerlink" title="3.1 定义变量"></a>3.1 定义变量</h4><p>定义变量，不需要加$符号，例如：</p><blockquote><p>注意等号两边不能有空格</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;yxc&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;yxc&quot;  # 双引号定义字符串</span><br><span class="line">name3=yxc    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><h4 id="3-2-使用变量"><a href="#3-2-使用变量" class="headerlink" title="3.2 使用变量"></a>3.2 使用变量</h4><p>使用变量，需要加上$符号，或者${}符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出yxc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>  <span class="comment"># 输出yxc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>acwing  <span class="comment"># 输出yxcacwing</span></span><br></pre></td></tr></table></figure><h4 id="3-3-只读变量"><a href="#3-3-只读变量" class="headerlink" title="3.3 只读变量"></a>3.3 只读变量</h4><p>使用<strong>readonly</strong>或者<strong>declare</strong>可以将变量变为只读。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line"><span class="built_in">declare</span> -r name  <span class="comment"># 两种写法均可</span></span><br><span class="line"></span><br><span class="line">name=abc  <span class="comment"># 会报错，因为此时name只读</span></span><br></pre></td></tr></table></figure><h4 id="3-4-删除变量"><a href="#3-4-删除变量" class="headerlink" title="3.4 删除变量"></a>3.4 删除变量</h4><p><strong>unset</strong>可以删除变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出空行  不存在的变量即为空行</span></span><br></pre></td></tr></table></figure><h4 id="3-5-变量类型"><a href="#3-5-变量类型" class="headerlink" title="3.5 变量类型"></a>3.5 变量类型</h4><ol><li><p>自定义变量（局部变量）<br>子进程不能访问的变量</p></li><li><p>环境变量（全局变量）<br>子进程可以访问的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:bash   <span class="comment">#  可以直接开一个子进程</span></span><br><span class="line">acs@9e0ebfcd82d7:<span class="built_in">exit</span>     <span class="comment">#  退出当前子进程</span></span><br><span class="line">acs@9e0ebfcd82d7:top      <span class="comment">#  查看当前所有进程</span></span><br><span class="line">acs@9e0ebfcd82d7: pstree [选项]   <span class="comment"># 以树状的形式展示进程信息</span></span><br><span class="line">acs@9e0ebfcd82d7:q          <span class="comment"># 退出查看当前所有进程</span></span><br></pre></td></tr></table></figure><blockquote><p>shift + F 进程列表按内存排序</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230120103502124.png" alt="image-20230120103502124"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7: <span class="built_in">kill</span> [参数] 进程号    <span class="comment"># []代表可选</span></span><br><span class="line">acs@9e0ebfcd82d7: killall [参数] 进程名称</span><br></pre></td></tr></table></figure><p>常用参数： -9 表示强制结束进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 6804   <span class="comment"># 结束id为6804的进程</span></span><br><span class="line">killall sshd   <span class="comment"># 结束所有名为sshd的进程</span></span><br></pre></td></tr></table></figure></li></ol><p>自定义变量改成环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ name=yxc  <span class="comment"># 定义变量</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">export</span> name  <span class="comment"># 第一种方法</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">declare</span> -x name  <span class="comment"># 第二种方法</span></span><br></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">export</span> name=yxc  <span class="comment"># 定义环境变量</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span><br></pre></td></tr></table></figure><h4 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单引号与双引号的区别</strong>：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc  <span class="comment"># 不用引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello, $name \&quot;hh\&quot;&#x27;</span>  <span class="comment"># 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello, <span class="variable">$name</span> \&quot;hh\&quot;&quot;</span>  <span class="comment"># 双引号字符串，输出 hello, yxc &quot;hh&quot;</span></span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;yxc&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span>  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><p><strong>提取子串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;hello, yxc&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:0:5&#125;</span>  <span class="comment"># 提取从0开始的5个字符</span></span><br></pre></td></tr></table></figure><h4 id="3-7-默认变量"><a href="#3-7-默认变量" class="headerlink" title="3.7 默认变量"></a>3.7 默认变量</h4><p>在执行 shell 脚本时，可以向脚本传递参数。$1 是第一个参数，$2 是第二个参数，以此类推。特殊的，$0 是文件名（包含路径）。例如：</p><p>创建文件 test.sh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：&quot;</span><span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：&quot;</span><span class="variable">$4</span></span><br><span class="line">...................</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数：&quot;</span><span class="variable">$&#123;10&#125;</span>  <span class="comment"># 两位需要用&#123;&#125;括上</span></span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh</span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4 .... 10  <span class="comment"># 执行命令时 可传参 一一对应的关系  eg: 1传参给$1</span></span><br><span class="line">文件名：./test.sh <span class="comment"># 对应执行命令时输入的 ./test.sh</span></span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br><span class="line">.........</span><br><span class="line">第十个参数：10</span><br></pre></td></tr></table></figure><p>其它参数相关变量</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230214095354257.png" alt="image-20230214095354257"></p><blockquote><p>区别：</p><p>1.exit code : 上一条命令的退出状态</p><p>2.$(command) : 获取这条命令的 stdout，即标准输出 command 即为命令</p><p>eg：echo $(ls) 执行脚本时即输出当前目录的文件</p></blockquote><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<strong>数组下标从 0 开始</strong></p><h4 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br></pre></td></tr></table></figure><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[4]=yxc</span><br></pre></td></tr></table></figure><h4 id="4-2-读取数组中某个元素的值"><a href="#4-2-读取数组中某个元素的值" class="headerlink" title="4.2 读取数组中某个元素的值"></a>4.2 读取数组中某个元素的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[index]&#125;</span></span><br><span class="line">eg：</span><br><span class="line">array = (1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-读取整个数组"><a href="#4-3-读取整个数组" class="headerlink" title="4.3 读取整个数组"></a>4.3 读取整个数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br><span class="line">eg：</span><br><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><h4 id="4-4-数组长度"><a href="#4-4-数组长度" class="headerlink" title="4.4 数组长度"></a>4.4 数组长度</h4><p>类似于字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[1000]=yxc  <span class="comment"># 虽然1000位置赋值了 但是数组长度为4 即数组长度为有效位个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><h3 id="5-expr-命令"><a href="#5-expr-命令" class="headerlink" title="5. expr 命令"></a>5. expr 命令</h3><p>expr 命令用于求表达式的值，格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 表达式</span><br></pre></td></tr></table></figure><blockquote><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在 shell 特定的字符前面（发现表达式运行错误时，可以试试<strong>转义</strong>）</li><li>对包含空格和其他特殊字符的字符串要用<strong>引号</strong>括起来</li><li>expr 会在 stdout 中输出结果。如果为逻辑关系表达式，则结果为真，stdout 为 1，否则为 0。</li><li>expr 同时会在 exit code 返回标识符：如果为逻辑关系表达式，则结果为真，exit code 为 0，否则为 1。</li></ul></blockquote><h4 id="5-1-字符串表达式"><a href="#5-1-字符串表达式" class="headerlink" title="5.1 字符串表达式"></a>5.1 字符串表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.length STRING</span><br><span class="line"><span class="comment">#返回STRING的长度</span></span><br><span class="line"></span><br><span class="line">2.index STRING CHARSET</span><br><span class="line"><span class="comment"># CHARSET中任意单个字符在STRING中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</span></span><br><span class="line"></span><br><span class="line">3.substr STRING POSITION LENGTH</span><br><span class="line"><span class="comment"># 返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>`  <span class="comment"># ``不是单引号，表示执行该命令，输出12</span></span><br><span class="line">   <span class="comment">#  &quot;$str&quot;加&quot;&quot;是防止str的值里有空格</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd`  <span class="comment"># 输出7，下标从1开始</span></span><br><span class="line"><span class="built_in">echo</span> `expr substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 3`  <span class="comment"># 输出 ell</span></span><br></pre></td></tr></table></figure><h4 id="5-2-整数表达式"><a href="#5-2-整数表达式" class="headerlink" title="5.2 整数表达式"></a>5.2 整数表达式</h4><p>expr 支持普通的算术操作，不支持浮点运算，因为该语言多处理文件，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li>+ -<br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li>/ %<br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li>() 可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> + <span class="variable">$b</span>`  <span class="comment"># 输出7</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> - <span class="variable">$b</span>`  <span class="comment"># 输出-1</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \* <span class="variable">$b</span>`  <span class="comment"># 输出12，*需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> / <span class="variable">$b</span>`  <span class="comment"># 输出0，整除</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> % <span class="variable">$b</span>` <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `expr \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)`  <span class="comment"># 输出20，值为(a + 1) * (b + 1)</span></span><br></pre></td></tr></table></figure><h4 id="5-3-逻辑关系表达式-（支持短路运算）"><a href="#5-3-逻辑关系表达式-（支持短路运算）" class="headerlink" title="5.3 逻辑关系表达式 （支持短路运算）"></a>5.3 逻辑关系表达式 （支持短路运算）</h4><ul><li>|<br>如果第一个参数非空且非 0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非 0，否则返回 0。如果第一个参数是非空或非 0 时，不会计算第二个参数</li><li>&amp;<br>如果两个参数都非空且非 0，则返回第一个参数，否则返回 0。如果第一个参为 0 或为空，则不会计算第二个参数。</li><li>&lt; &lt;= = == != &gt;= &gt;<br>比较两端的参数，如果为 true，则返回 1，否则返回 0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li>() 可以改变优先级，但需要用反斜杠转义</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \&gt; <span class="variable">$b</span>`  <span class="comment"># 输出0，&gt;需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出1，也可以将特殊字符用引号引起来</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> <span class="string">&#x27;&gt;=&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \&lt;\= <span class="variable">$b</span>`  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$c</span> \&amp; <span class="variable">$d</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \&amp; <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$c</span> \| <span class="variable">$d</span>`  <span class="comment"># 输出5</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \| <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><h3 id="6-read-命令"><a href="#6-read-命令" class="headerlink" title="6. read 命令"></a>6. read 命令</h3><p>read 命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code 为 1，否则为 0。</p><p>参数说明</p><ul><li>-p: 后面可以接提示信息</li><li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">read</span> name  <span class="comment"># 读入name的值</span></span><br><span class="line">acwing yxc  <span class="comment"># 标准输入</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span><br><span class="line">acwing yxc  <span class="comment">#标准输出</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">read</span> -p <span class="string">&quot;Please input your name: &quot;</span> -t 30 name  <span class="comment"># 读入name的值，等待时间30秒</span></span><br><span class="line">Please input your name: acwing yxc  <span class="comment"># 标准输入</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span><br><span class="line">acwing yxc  <span class="comment"># 标准输出</span></span><br></pre></td></tr></table></figure><h3 id="7-echo-命令"><a href="#7-echo-命令" class="headerlink" title="7. echo 命令"></a>7. echo 命令</h3><blockquote><p>man echo 可以查看 echo 的命令</p></blockquote><p>echo 用于输出字符串。命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> STRING</span><br></pre></td></tr></table></figure><h4 id="7-1-显示普通字符串"><a href="#7-1-显示普通字符串" class="headerlink" title="7.1 显示普通字符串"></a>7.1 显示普通字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello AC Terminal&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello AC Terminal  <span class="comment"># 引号可以省略</span></span><br></pre></td></tr></table></figure><h4 id="7-2-显示转义字符"><a href="#7-2-显示转义字符" class="headerlink" title="7.2 显示转义字符"></a>7.2 显示转义字符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello AC Terminal\&quot;&quot;</span>  <span class="comment"># 注意只能使用双引号，如果使用单引号，则不转义</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;Hello AC Terminal\&quot;  <span class="comment"># 也可以省略双引号</span></span><br></pre></td></tr></table></figure><h4 id="7-3-显示变量"><a href="#7-3-显示变量" class="headerlink" title="7.3 显示变量"></a>7.3 显示变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is <span class="variable">$name</span>&quot;</span>  <span class="comment"># 输出 My name is yxc 注意是用双引号</span></span><br></pre></td></tr></table></figure><h4 id="7-4-显示换行"><a href="#7-4-显示换行" class="headerlink" title="7.4 显示换行"></a>7.4 显示换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi\n&quot;</span>  <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;acwing&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><h4 id="7-5-显示不换行"><a href="#7-5-显示不换行" class="headerlink" title="7.5 显示不换行"></a>7.5 显示不换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;acwing&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><h4 id="7-5-显示结果定向至文件"><a href="#7-5-显示结果定向至文件" class="headerlink" title="7.5 显示结果定向至文件"></a>7.5 显示结果定向至文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; output.txt  <span class="comment"># 将内容以覆盖的方式输出到output.txt中</span></span><br></pre></td></tr></table></figure><h4 id="7-6-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-6-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.6 原样输出字符串，不进行转义或取变量(用单引号)"></a>7.6 原样输出字符串，不进行转义或取变量(用单引号)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>\&quot;</span><br></pre></td></tr></table></figure><h4 id="7-7-显示命令的执行结果"><a href="#7-7-显示命令的执行结果" class="headerlink" title="7.7 显示命令的执行结果"></a>7.7 显示命令的执行结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><h3 id="8-printf-命令"><a href="#8-printf-命令" class="headerlink" title="8. printf 命令"></a>8. printf 命令</h3><p>printf 命令用于格式化输出，类似于 C/C++中的 printf 函数。</p><p>默认不会在字符串末尾添加换行符。</p><p><strong>命令格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments...]</span><br></pre></td></tr></table></figure><p><strong>用法示例：</strong></p><p>脚本内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d.\n&quot;</span> 123  <span class="comment"># 占10位，右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f.\n&quot;</span> 123.123321  <span class="comment"># 占10位，保留2位小数，左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;yxc&quot;</span>  <span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span>  2 3 `expr 2 \* 3` <span class="comment"># 表达式的值作为参数</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is yxc</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><h3 id="9-test-命令与判断符号"><a href="#9-test-命令与判断符号" class="headerlink" title="9. test 命令与判断符号[ ]"></a>9. test 命令与判断符号[ ]</h3><h4 id="9-1-逻辑运算符-amp-amp-和"><a href="#9-1-逻辑运算符-amp-amp-和" class="headerlink" title="9.1 逻辑运算符&amp;&amp;和||"></a>9.1 逻辑运算符&amp;&amp;和||</h4><ul><li><p>&amp;&amp; 表示与，|| 表示或</p></li><li><p>二者具有短路原则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr1 &amp;&amp; expr2  <span class="comment">#当expr1为假时，直接忽略expr2</span></span><br><span class="line">expr1 || expr2  <span class="comment">#当expr1为真时，直接忽略expr2</span></span><br></pre></td></tr></table></figure></li><li><p>表达式的 exit code 为 0，表示真；为非零，表示假。（与 C/C++中的定义相反）</p><blockquote><p>注意区别：</p><p>expr stdout 1 表示真，0 表示假（输出过程）</p><p>test exit code 0 表示真 非 0 表示假（进程过程）</p></blockquote></li></ul><h4 id="9-2-test-命令"><a href="#9-2-test-命令" class="headerlink" title="9.2 test 命令"></a>9.2 test 命令</h4><ul><li><p>在命令行中输入 man test，可以查看 test 命令的用法。</p></li><li><p>test 命令用于判断文件类型，以及对变量做比较。</p></li><li><p>test 命令用 exit code 返回结果，而不是使用 stdout。0 表示真，非 0 表示假。</p></li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> 2 -lt 3  <span class="comment"># 为真，返回值为0  -lt等价于小于号</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ ls  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span> <span class="comment">#短路运算实现if else</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">test</span> -e test2.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure><p><strong>文件类型判断</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -e filename  <span class="comment"># 判断文件是否存在</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215084804551.png"></p><p><strong>文件权限判断</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -r filename  <span class="comment"># 判断文件是否可读</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085029019.png" alt="image-20230215085029019"></p><p><strong>整数间的比较</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="variable">$a</span> -eq <span class="variable">$b</span>  <span class="comment"># a是否等于b</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085123279.png" alt="image-20230215085123279"></p><blockquote><p>-eq ：equal（相等）</p><p>-ne ：not equal（不等）</p><p>-gt ：greater than（大于）</p><p>-ge ：greater than or equal（大于或等于）</p><p>-lt ：less than（小于）</p><p>-le ：less than or equal（小于或等于）</p><p>注意：在 shell 中这些符号只能用于整数的比较，不能用于字符串。</p></blockquote><p><strong>字符串比较</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085151868.png" alt="image-20230215085151868"></p><p><strong>多重条件判定</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -r filename -a -x filename  <span class="comment"># 这里是-a连接两个条件 即两个条件是否同时成立</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085237161.png" alt="image-20230215085237161"></p><h4 id="9-3-判断符号"><a href="#9-3-判断符号" class="headerlink" title="9.3 判断符号[ ]"></a>9.3 判断符号[ ]</h4><p>[ ]与 test 用法几乎一模一样，更常用于 if 语句中。另外[[]]是[]的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  <span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ ls  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">acs@9e0ebfcd82d7:~$ [ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ [ -e test2.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>[ ]内的每一项都要用<strong>空格隔开</strong></p></li><li><p>中括号内的<strong>变量，最好用双引号括起来</strong></p></li><li><p>中括号内的常数，最好用单或双引号括起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;acwing yxc&quot;</span></span><br><span class="line">[ <span class="variable">$name</span> == <span class="string">&quot;acwing yxc&quot;</span> ]  <span class="comment"># 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$name</span>&quot;</span> == <span class="string">&quot;acwing yxc&quot;</span> ]  <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="10-判断语句"><a href="#10-判断语句" class="headerlink" title="10. 判断语句"></a>10. 判断语句</h3><blockquote><p>if…then 形式</p><p>类似于 C/C++中的 if-else 语句。</p></blockquote><h4 id="10-1-单层-if"><a href="#10-1-单层-if" class="headerlink" title="10.1 单层 if"></a>10.1 单层 if</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -gt 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>在范围内</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3在范围内</span><br></pre></td></tr></table></figure><h4 id="10-2-单层-if-else"><a href="#10-2-单层-if-else" class="headerlink" title="10.2 单层 if-else"></a>10.2 单层 if-else</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>不小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3小于4</span><br></pre></td></tr></table></figure><h4 id="10-3-多层-if-elif-elif-else"><a href="#10-3-多层-if-elif-elif-else" class="headerlink" title="10.3 多层 if-elif-elif-else"></a>10.3 多层 if-elif-elif-else</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 3 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> 其他</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h4 id="10-4-case…esac-形式"><a href="#10-4-case…esac-形式" class="headerlink" title="10.4 case…esac 形式"></a>10.4 case…esac 形式</h4><blockquote><p>类似于 C/C++中的 switch 语句。</p></blockquote><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名称 <span class="keyword">in</span></span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  <span class="comment"># 类似于C/C++中的break</span></span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  <span class="comment"># 类似于C/C++中的default</span></span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">    1)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line">        ;;</span><br><span class="line">    2)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line">        ;;</span><br><span class="line">    3)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> 其他</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h3 id="11-循环语句"><a href="#11-循环语句" class="headerlink" title="11. 循环语句"></a>11. 循环语句</h3><h4 id="11-1-for…in…do…done"><a href="#11-1-for…in…do…done" class="headerlink" title="11.1 for…in…do…done"></a>11.1 for…in…do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> val1 val2 val3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 1，输出 a 2 cc，每个元素一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a 2 cc</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 2，输出当前路径下的所有文件名，每个文件名一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls`    <span class="comment"># 这里`ls` 可以用(ls)替换</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 3，输出 1-10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 4，使用{1..10} 或者 {a..z}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;a..z&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-2-for-…-…-…-do…done"><a href="#11-2-for-…-…-…-do…done" class="headerlink" title="11.2 for ((…;…;…)) do…done"></a>11.2 for ((…;…;…)) do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((expression; condition; expression))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，输出 1-10，每个数占一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=1; i&lt;=10; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-3-while…do…done-循环"><a href="#11-3-while…do…done-循环" class="headerlink" title="11.3 while…do…done 循环"></a>11.3 while…do…done 循环</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例：文件结束符为 Ctrl+d，输入文件结束符后 read 指令返回 false。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name  <span class="comment"># 每次读入一个变量</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-4-until…do…done-循环"><a href="#11-4-until…do…done-循环" class="headerlink" title="11.4 until…do…done 循环"></a>11.4 until…do…done 循环</h4><blockquote><p>当条件为真时结束。</p></blockquote><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，当用户输入 yes 或者 YES 时结束，否则一直等待读入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;yes&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;YES&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Please input yes/YES to stop this program: &quot;</span> word</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-5-break-命令"><a href="#11-5-break-命令" class="headerlink" title="11.5 break 命令"></a>11.5 break 命令</h4><blockquote><p>跳出当前一层循环，注意与 C/C++不同的是：break 不能跳出 case 语句。</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></span><br><span class="line">            8)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">                ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该示例每读入非 EOF 的字符串，会输出一遍 1-7。<br>该程序可以输入 Ctrl+d 文件结束符来结束，也可以直接用 Ctrl+c 杀掉该进程。</p><h4 id="11-6-continue-命令"><a href="#11-6-continue-命令" class="headerlink" title="11.6 continue 命令"></a>11.6 continue 命令</h4><blockquote><p>跳出当前循环。</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ `expr <span class="variable">$i</span> % 2` -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该程序输出 1-10 中的所有奇数。</p><h4 id="11-7-死循环的处理方式"><a href="#11-7-死循环的处理方式" class="headerlink" title="11.7 死循环的处理方式"></a>11.7 死循环的处理方式</h4><p>如果 AC Terminal 可以打开该程序，则输入 Ctrl+c 即可。</p><p>否则可以直接关闭进程：</p><ol><li><p>使用 top 命令找到进程的 PID</p><blockquote><p>shift + F 进程列表按内存排序</p></blockquote></li><li><p>输入 kill -9 PID 即可关掉此进程</p></li></ol><h3 id="12-函数"><a href="#12-函数" class="headerlink" title="12. 函数"></a>12. 函数</h3><ul><li>bash 中的函数类似于 C/C++中的函数，但 return 的返回值与 C/C++不同，返回的是 exit code，取值为 0-255，<strong>0 表示正常结束</strong>。</li><li>如果想获取函数的输出结果，可以通过 echo 输出到 stdout 中，然后<strong>通过$(function_name)来获取 stdout 中的结果</strong>。</li><li><strong>函数的 return 值可以通过$?来获取</strong>。</li></ul><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">function</span>] <span class="function"><span class="title">func_name</span></span>() &#123;  <span class="comment"># function关键字可以省略</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-1-不获取-return-值和-stdout-值"><a href="#12-1-不获取-return-值和-stdout-值" class="headerlink" title="12.1 不获取 return 值和 stdout 值"></a>12.1 不获取 return 值和 stdout 值</h4><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func  <span class="comment"># 调用不需要加小括号</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello yxc</span><br></pre></td></tr></table></figure><h4 id="12-2-获取-return-值和-stdout-值"><a href="#12-2-获取-return-值和-stdout-值" class="headerlink" title="12.2 获取 return 值和 stdout 值"></a>12.2 获取 return 值和 stdout 值</h4><blockquote><p>不写 return 时，默认 return 0。</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?   <span class="comment"># 获取上次进程的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;output = <span class="variable">$output</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return = <span class="variable">$ret</span>&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = Hello yxc</span><br><span class="line"><span class="built_in">return</span> = 123</span><br></pre></td></tr></table></figure><h4 id="12-3-函数的输入参数"><a href="#12-3-函数的输入参数" class="headerlink" title="12.3 函数的输入参数"></a>12.3 函数的输入参数</h4><p>在函数内，$1 表示第一个输入参数，$2 表示第二个输入参数，依此类推。</p><blockquote><p>注意：函数内的$0 仍然是文件名，而不是函数名。</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215104731961.png" alt="image-20230215104731961"></p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;  <span class="comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span></span><br><span class="line">    word=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;要进入func(<span class="variable">$1</span>)函数吗？请输入y/n：&quot;</span> word</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$word</span>&quot;</span> == <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> -le 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    sum=$(func $(expr <span class="variable">$1</span> - 1))  <span class="comment"># 递归调用 $(expr $1 - 1)可用`expr $1 - 1`替换</span></span><br><span class="line">    <span class="built_in">echo</span> $(expr <span class="variable">$sum</span> + <span class="variable">$1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure><h4 id="12-4-函数内的局部变量"><a href="#12-4-函数内的局部变量" class="headerlink" title="12. 4 函数内的局部变量"></a>12. 4 函数内的局部变量</h4><ul><li><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p></li><li><p>可以在递归函数中定义局部变量。</p></li></ul><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> 变量名=变量值</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>第一行为函数内的 name 变量，第二行为函数外调用 name 变量，会发现此时该变量不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yxc   <span class="comment">#第一行</span></span><br><span class="line">      <span class="comment">#第二行</span></span><br></pre></td></tr></table></figure><h4 id="13-exit-命令"><a href="#13-exit-命令" class="headerlink" title="13. exit 命令"></a>13. exit 命令</h4><ul><li><p>exit 命令用来退出当前 shell 进程，并返回一个退出状态；<strong>使用$?可以接收这个退出状态</strong>。</p></li><li><p>exit 命令可以接受一个整数值作为参数，代表退出状态。如果不指定，<strong>默认状态值是 0</strong>。</p></li><li><p>exit 退出状态只能是一个介于 0~255 之间的整数，其中<strong>只有 0 表示成功</strong>，其它值都表示失败。</p></li></ul><p>示例：</p><p>创建脚本 test.sh，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]  <span class="comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments not valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh</span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh acwing</span><br><span class="line">arguments valid</span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">echo</span> $?  <span class="comment"># 传入一个参数，则正常退出，exit code为0</span></span><br><span class="line">0</span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh</span><br><span class="line">arguments not valid</span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">echo</span> $?  <span class="comment"># 传入参数个数不是1，则非正常退出，exit code为1</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="13-文件重定向"><a href="#13-文件重定向" class="headerlink" title="13. 文件重定向"></a>13. 文件重定向</h3><p>每个进程默认打开 3 个文件描述符：</p><ul><li>stdin 标准输入，从命令行读取数据，文件描述符为 0</li><li>stdout 标准输出，向命令行输出数据，文件描述符为 1</li><li>stderr 标准错误输出，向命令行输出数据，文件描述符为 2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><p><strong>重定向命令列表</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215103257564.png" alt="image-20230215103257564"></p><p><strong>输入和输出重定向</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hello \c&quot;</span> &gt; output.txt  <span class="comment"># 将stdout重定向到output.txt中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;World&quot;</span> &gt;&gt; output.txt  <span class="comment"># 将字符串追加到output.txt中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> str &lt; output.txt  <span class="comment"># 从output.txt中读取字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>  <span class="comment"># 输出结果：Hello World</span></span><br></pre></td></tr></table></figure><p><strong>同时重定向 stdin 和 stdout</strong></p><p>创建 bash 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(expr <span class="string">&quot;<span class="variable">$a</span>&quot;</span> + <span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建 input.txt，里面的内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh  <span class="comment"># 添加可执行权限</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh &lt; input.txt &gt; output.txt  <span class="comment"># 从input.txt中读取内容，将输出写入output.txt中</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ cat output.txt  <span class="comment"># 查看output.txt中的内容</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="14-引入外部文件"><a href="#14-引入外部文件" class="headerlink" title="14. 引入外部文件"></a>14. 引入外部文件</h3><blockquote><p>类似于 C/C++中的 include 操作，bash 也可以引入其他文件中的代码。</p></blockquote><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename  <span class="comment"># 注意点和文件名之间有一个空格</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>创建 test1.sh，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yxc  <span class="comment"># 定义变量name</span></span><br></pre></td></tr></table></figure><p>然后创建 test2.sh，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh <span class="comment"># 或 . test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> My name is: <span class="variable">$name</span>  <span class="comment"># 可以使用test1.sh中的变量</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test2.sh</span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test2.sh</span><br><span class="line">My name is: yxc</span><br></pre></td></tr></table></figure><h3 id="exit-与-return-的区别"><a href="#exit-与-return-的区别" class="headerlink" title="exit 与 return 的区别"></a>exit 与 return 的区别</h3><ol><li>作用不同。exit 用于在程序运行的过程中随时结束程序，exit 的参数是返回给 OS 的，注意在函数中调用 exit 不是退出函数，而是直接退出执行的脚本文件。exit 是结束一个进程，它将删除进程使用的内存空间，同时把错误信息返回父进程。而 return 是返回函数值并退出函数；</li><li>语义层级不同。return 是语言级别的，它表示了调用堆栈的返回；而 exit 是系统调用级别的，它表示了一个进程的结束；</li><li>使用方法不用。return 一般用在函数方法体内，exit 可以出现在 Shell 脚本中的任意位置。</li><li>如果你用 脚本 a 调用 脚本 b ，要在 a 中判断 b 是否正常返回，就是根据 exit 0 or 1 来识别。执行完 b 后， 判断 $? 就是返回值。如果 shel 脚本中调用的子脚本的 exit，那么会退出子脚本。如果是 source 一个子脚本，里面的 exit 会导致外面的脚本也退出。</li></ol><h3 id="小技巧：如何将服务器中的文件整体复制出来？"><a href="#小技巧：如何将服务器中的文件整体复制出来？" class="headerlink" title="小技巧：如何将服务器中的文件整体复制出来？"></a>小技巧：如何将服务器中的文件整体复制出来？</h3><ol><li><p>退出 tmux</p></li><li><p>cat filename：展示 filename 的文件内容</p></li><li><p>鼠标选中文本开头的若干字符</p></li><li><p>用滚轮滑到文件结尾</p></li><li><p>按住 Shift，同时鼠标点击文件结尾，此时会选中文件所有内容</p><blockquote><p>Windows/Linux 下，按 Ctrl + insert 可以复制全文；Mac 下，按 Command + c 可以复制全文。</p></blockquote></li></ol><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><h3 id="1-ssh-登录"><a href="#1-ssh-登录" class="headerlink" title="1. ssh 登录"></a>1. ssh 登录</h3><h4 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h4><p>远程登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure><blockquote><p>user: 用户名<br>hostname: IP 地址或域名</p></blockquote><p>第一次登录时会提示：</p><p><code>The authenticity of host &#39;123.57.47.211 (123.57.47.211)&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8. Are you sure you want to continue connecting (yes/no/[fingerprint])?</code></p><p>输入 yes，然后回车即可。</p><p>这样会将该服务器的信息记录在<strong>本地</strong><code>~/.ssh/known_hosts</code>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><blockquote><p>退出当前服务器为 Ctrl + d 或者输入命令 exit</p></blockquote><p>默认登录端口号为<code>22</code>。如果想登录某一特定端口：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p <span class="number">22</span></span><br></pre></td></tr></table></figure><h4 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h4><p><strong>本地</strong>创建文件 <code>~/.ssh/config</code></p><p>然后在文件中输入：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">HostName  IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line">Port 端口</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名 myserver1、myserver2。</p><h4 id="1-3-密钥登录"><a href="#1-3-密钥登录" class="headerlink" title="1.3 密钥登录"></a>1.3 密钥登录</h4><p><strong>本地</strong>创建密钥：（配置秘钥与上面配置文件无关，上面配置文件只是起个别名 方便 ssh 连接）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<code>myserver1</code>服务器。则将公钥中的内容，复制到<code>myserver1</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。</p><p>也可以在本地使用如下命令一键添加公钥：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id myserver1</span><br></pre></td></tr></table></figure><p>**本地用 git bash 配置 ssh 免密登录需要先移动到家目录下 **</p><p><strong>即<code>cd ~</code>,一般为<code>/c/Users/chjm</code></strong></p><h4 id="1-4-执行命令"><a href="#1-4-执行命令" class="headerlink" title="1.4 执行命令"></a>1.4 执行命令</h4><p>命令格式：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname ls -a</span><br><span class="line"># 单引号中的$i可以求值 双引号不行</span><br><span class="line">ssh myserver <span class="comment">&#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-scp-传文件"><a href="#2-scp-传文件" class="headerlink" title="2. scp 传文件"></a>2. scp 传文件</h3><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h4><p>命令格式：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source destination</span><br></pre></td></tr></table></figure><p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p><p><strong>复制文件：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source1 source2 destination  ## 复制source1，source2两个文件到目标地址</span><br></pre></td></tr></table></figure><p><strong>复制文件夹：</strong></p><ol><li><p>将本地家目录中的 tmp 文件夹复制到 myserver 服务器中的/home/acs/目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:/home/acs/  <span class="comment"># -r 放在前面</span></span><br></pre></td></tr></table></figure></li><li><p>将本地家目录中的 tmp 文件夹复制到 myserver 服务器中的~/homework/目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure></li><li><p>将 myserver 服务器中的~/homework/文件夹复制到本地的当前路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r myserver:homework .    <span class="comment"># . 代表本地的当前路径下</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>指定服务器的端口号：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P <span class="number">22</span> source1 source2 destination</span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>scp</code>的<code>-r -P</code>等参数尽量加在<code>source</code>和<code>destination</code>之前。</p></blockquote><h3 id="2-使用-scp-配置其他服务器的-vim-和-tmux"><a href="#2-使用-scp-配置其他服务器的-vim-和-tmux" class="headerlink" title="2. 使用 scp 配置其他服务器的 vim 和 tmux"></a>2. 使用 scp 配置其他服务器的 vim 和 tmux</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.vimrc ~/.tmux.conf myserver: # 把配置文件传到云端</span><br></pre></td></tr></table></figure><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li><p><strong>工作区（Working Directory）</strong>：仓库的目录。工作区是独立于各个分支的。</p></li><li><p><strong>暂存区（Staging area）/索引（index）</strong>：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</p></li><li><p><strong>版本库/仓库（Repository）</strong>：存放所有已经提交到本地仓库的代码版本。工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</p></li><li><p>版本结构：树结构，树中每个节点代表一个代码版本。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216172859412.png"></p><p>Git 的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p></li></ul><h3 id="2-全局设置"><a href="#2-全局设置" class="headerlink" title="2. 全局设置"></a>2. 全局设置</h3><ol><li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li></ol><h3 id="3-整体流程"><a href="#3-整体流程" class="headerlink" title="3. 整体流程"></a>3. 整体流程</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216164842061.png"></p><ol><li><p><code>git init</code>：将当前目录配置成 git 仓库，信息记录在隐藏的<code>.git</code>文件夹中</p><blockquote><p>注意初始化后，还没有生成提交节点，所以 HEAD 指针指向还未形成的 master 分支</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216174017691.png" alt="image-20230216174017691"></p></li><li><p><code>git add</code>告诉<code>Git</code>，把文件添加到仓库，进行变化跟踪：</p><blockquote><ol><li><p>删除文件 a.txt b.txt 后 同样可以使用<code>git add a.txt b.txt</code>将删除后的状态添加到缓存区</p></li><li><p><code>git add -A</code> ：提交所有变化</p></li><li><p><code>git add -u</code>：提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</p></li><li><p><code>git add .  </code>：提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</p></li></ol></blockquote><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216173942581.png" alt="image-20230216173942581" style="zoom:67%;" /></li><li><p><code>git commit -m &quot;给自己看的备注信息&quot;</code>，它首先会移除索引（index）中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。</p><img src="C:\Users\15957\AppData\Roaming\Typora\typora-user-images\image-20230216173829563.png" alt="image-20230216173829563" style="zoom: 67%;" /></li><li><p>添加远程库</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">remote add origin https://github.com/xx/test.git # 在项目文件夹中使用</span></span><br></pre></td></tr></table></figure><p>添加后，远程库的名字就是<code>origin</code>，这是<code>Git</code>默认远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p></li><li><p>把本地库的所有内容推送到远程库上</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支</p><p><code>master</code>推送到远程。由于远程库是空的，我们第一次推送<code>master</code>分支</p><p>时，加上了<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送的远程</p><p>新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关</p><p>联起来，在以后的推送或者拉取时就不需要加<code>-u</code>了。</p></li><li><p>将远程仓库 XXX 下载到当前目录下</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@git.acwing.<span class="keyword">com</span>:xxx/XXX.git</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-流程详解"><a href="#4-流程详解" class="headerlink" title="4. 流程详解"></a>4. 流程详解</h3><h4 id="4-1-几个术语"><a href="#4-1-几个术语" class="headerlink" title="4.1 几个术语"></a>4.1 几个术语</h4><ul><li><p>HEAD：这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</p></li><li><p>Index：index 也被称为 staging area，是指一整套即将被下一个提交的文件集合。他也是将成为<code>HEAD</code>的父亲的那个 commit</p></li><li><p>Working Copy：working copy 代表你正在工作的那个文件集</p></li></ul><p>在下图中，可以看到部分<code>Git</code>命令是如何影响工作区和暂存区（<code>stage</code>，亦称<code>index</code>）的。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216180553224.png" alt="image-20230216180553224"></p><p>图中左侧为工作区，右侧为版本库。在版本库中标记为<code>index</code>的区域是暂存区（<code>stage</code>，亦称<code>index</code>），标记为<code>master</code>的是<code>master</code>分支所代表的目录树。</p><ul><li><code>HEAD</code>实际是指向指向当前所在的本地分支的一个“游标”。告诉<code>Git</code>当前的工作区在哪一个分支上。</li><li><code>head</code>(小写)是<code>commit</code>对象的引用，每个<code>head</code>都有一个名字（分支名字或者标签名字等等），但是默认情况下，每个叫<code>master</code>的<code>repository</code>都会有一个<code>head</code>, 一个<code>repository</code>可以包含任意数量的<code>head</code>。在任何时候，只要这个<code>head</code>被选择成为<code>current head</code>，那么这个<code>head</code>就成了<code>HEAD</code>,总是大写</li><li>图中的<code>objects</code>标识的区域为<code>Git</code>的对象库，实际位于<code>.git/objects</code>目录下。</li></ul><h4 id="4-2-HEAD-的指向变化"><a href="#4-2-HEAD-的指向变化" class="headerlink" title="4.2 HEAD 的指向变化"></a>4.2 HEAD 的指向变化</h4><ol><li><p>当你第一次<code>checkout</code>一个分支，**<code>HEAD</code>就指向当前分支的最近一个<code>commit</code>(即该分支最后提交的 commit)**，在<code>HEAD</code>中的文件集和在<code>index</code>中的文件集是相同的，在<code>working copy</code>的文件集和<code>HEAD</code>,<code>Index</code>中的是完全相同的。所有三者(<code>HEAD</code>,<code>Index(Staging)</code>,<code>Working Copy</code>)都是相同的文件集。</p><blockquote><p>checkout 作用是修改 HEAD 的指向，变更 Index 区域里的内容，修改 Working Directory(工作区)里的内容</p></blockquote></li><li><p>当你对一个文件执行一次修改，即<code>Working Copy</code>不再和<code>index</code>,<code>head</code>相同，<code>Git</code>会标记这个文件是修改过的。</p></li><li><p>当你执行一个<code>git add</code>, 它就<code>stages the file in the index</code>，此时<code>working copy</code>和<code>index</code>区是相同的，但是他们和<code>HEAD</code>区是不同的。</p></li><li><p>当你执行一个<code>git commit</code>, Git 就创建一个新的<code>commit</code>，**随后<code>HEAD就</code>指向这个新的<code>commit</code>**，此时<code>index</code>, <code>working copy</code>的状态和<code>HEAD</code>就又完全匹配相同了</p></li></ol><h3 id="5-Git-文件的四种状态"><a href="#5-Git-文件的四种状态" class="headerlink" title="5. Git 文件的四种状态"></a>5. Git 文件的四种状态</h3><ul><li><strong>Untracked</strong>: 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制. 通过<code>git add</code>状态变为<code>Staged</code>.</li><li><strong>Unmodify</strong>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为<code>Modified</code>. 如果使用<code>git rm</code>移出版本库, 则成为<code>Untracked</code>文件</li><li><strong>Modified</strong>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code>可进入暂存<code>staged</code>状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到<code>unmodify</code>状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改</li><li><strong>Staged</strong>: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<code>Unmodify</code>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<code>Modified</code></li></ul><h3 id="6-查看命令"><a href="#6-查看命令" class="headerlink" title="6. 查看命令"></a>6. 查看命令</h3><ol><li><p><code>git status</code>：查看仓库状态</p></li><li><p><code>git diff XX</code>：查看 XX 文件相对于暂存区修改了哪些内容</p><blockquote><p>当工作区有改动，临时区为空，diff 的对比是“工作区与最后一次 commit 提交的仓库的共同文件”；当工作区有改动，临时区不为空，diff 对比的是“工作区与暂存区的共同文件”</p></blockquote></li></ol><h3 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7. 删除文件"></a>7. 删除文件</h3><ol><li><p>场景一：要删除的文件是没有修改过的，即和当前版本库文件的内容相同</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;file&gt;  # 删除工作区文件，并且将这次删除放入暂存区</span><br></pre></td></tr></table></figure><blockquote><p>此时<code>git commit</code>会删除工作区和版本库的文件</p></blockquote></li><li><p>场景二：要删除的文件已经修改过，即和当前版本库文件的内容不相同</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`git rm -f &lt;file&gt; ` # 强制删除工作区和暂存区文件，并且将这次删除放入暂存区</span><br></pre></td></tr></table></figure><blockquote><p>此时<code>git commit</code>会删除工作区和版本库的文件</p></blockquote></li><li><p>场景三：想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;file&gt; # 删除暂存区文件，但保留工作区的文件，并且将这次删除放入暂存区。</span><br></pre></td></tr></table></figure><blockquote><p>此时<code>git commit</code>会导致删除了暂存区和版本库的文件，但保留了工作区的文件</p></blockquote></li></ol><h3 id="8-撤销修改"><a href="#8-撤销修改" class="headerlink" title="8. 撤销修改"></a>8. 撤销修改</h3><ol><li><p>场景一：修改了工作区，未添加到暂存区时，想丢弃本地修改</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file  # 把文件从暂存区域复制到工作区</span><br><span class="line">注意：此时暂存区&lt;file&gt;文件版本为空</span><br></pre></td></tr></table></figure></li><li><p>场景二：修改了工作区，且添加到了暂存区时，想丢弃本地修改</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="number">1</span>. `git <span class="keyword">reset</span> HEAD file`  # 先 取消暂存,就回到了场景一;</span><br><span class="line"><span class="number">2</span>. `git checkout -- file` # 再 把文件从暂存区域复制到工作区</span><br><span class="line"></span><br><span class="line">注意：此时暂存区&lt;file&gt;文件版本为空，这时用暂存区的版本覆盖工作区的版本，则会丢弃本地修改</span><br><span class="line"></span><br><span class="line">方法二（常用）：</span><br><span class="line"><span class="number">1</span>.git <span class="keyword">restore</span> --staged &lt;file&gt;：先 用暂存区的版本覆盖工作区的版本，并将&lt;file&gt;文件的暂存区版本从暂存区移除</span><br><span class="line"><span class="number">2</span>.git <span class="keyword">restore</span> &lt;file&gt;：再 用暂存区的版本覆盖工作区的版本</span><br><span class="line"></span><br><span class="line">注意：此时暂存区&lt;file&gt;文件版本为空，这时用暂存区的版本覆盖工作区的版本，则会丢弃本地修改</span><br></pre></td></tr></table></figure><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。<strong>当我们用<code>HEAD</code>时，表示最新的版本</strong></p></blockquote></li><li><p>场景三：把暂存区的操作提交到了本地 git 库, 想要撤销本次提交</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> --hard ORIG_HEAD  # 强制回滚到未删除版本</span><br></pre></td></tr></table></figure></li><li><p>场景四：把本地 git 库的删除记录推送到了远程服务器 github</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. git <span class="keyword">reset</span> --hard ORIG_HEAD  # 先 强制回滚到未删除版本</span><br><span class="line"><span class="number">2</span>. git push -f    # 再 强制推送</span><br></pre></td></tr></table></figure></li></ol><h3 id="9-版本回退"><a href="#9-版本回退" class="headerlink" title="9. 版本回退"></a>9. 版本回退</h3><h4 id="9-1-查看版本"><a href="#9-1-查看版本" class="headerlink" title="9.1 查看版本"></a>9.1 查看版本</h4><ol><li><p><code>git log</code>：查看当前分支的所有提交版本（结点） 按英文 q 可退出查看状态</p><blockquote><p><code>git log --pretty=oneline</code>：用一行来显示</p></blockquote></li><li><p><code>git reflog</code>：查看 HEAD 指针的移动历史（包括被回滚的版本）</p><blockquote><p><code>git log</code> 与<code>git reflog</code> 的区别：</p><p><code>git log</code> 只会查看当前结点之前在一条分支上的结点</p><p><code>git reflog</code> 会显示 HEAD 指针的移动历史，会包括所有结点</p></blockquote></li></ol><h4 id="9-2-具体场景"><a href="#9-2-具体场景" class="headerlink" title="9.2 具体场景"></a>9.2 具体场景</h4><p>想象这种情况，如果你在 2 天前提交了一个东西，突然发现这次提交是有问题的，这个时候你有两个选择，要么使用 git revert（推荐），要么使用 git reset。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217102408912.png" alt="image-20230217102408912"></p><ul><li><p><strong>上图可以看到 git reset 是会修改版本历史的，他会丢弃掉一些版本历史。</strong></p><p><strong>而 git revert 是根据那个 commit 逆向生成一个新的 commit，版本历史是不会被破坏的。</strong></p><ul><li><p><strong><code>git revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code></strong></p><blockquote><p>比如，我们<code>commit</code>了三个版本（版本一、版本二、 版本三），突然发现版本二有 bug，想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。</p></blockquote></li><li><p><strong><code>git reset</code>是直接将 HEAD 指向的位置改变为之前存在的某个版本, 且目标版本之后提交的版本都会删除</strong></p></li></ul></li><li><p><strong>已经 push 到远程仓库的 commit 不允许 reset</strong>。上面已经讲了，<code>git reset</code>是会丢弃掉<code>commit</code>的，如果<code>commit</code>已经被<code>push</code>到远程仓库上了，也就意味着其他开发人员就可能基于这个<code>commit</code>形成了新的<code>commit</code>，这时你去<code>reset</code>，就会造成其他开发人员的提交历史莫名其妙的丢失，或者其他灾难性的后果。</p></li></ul><h4 id="9-3-具体命令"><a href="#9-3-具体命令" class="headerlink" title="9.3 具体命令"></a>9.3 具体命令</h4><ol><li><code>git reset --hard HEAD^</code> 或<code>git reset --hard HEAD~</code> ：将代码库回滚到上一个版本</li><li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li><li><code>git reset --hard HEAD~100</code>：往上回滚 100 个版本</li><li><code>git reset --hard 版本号</code>：回滚到某一特定版本 <strong>版本号取前七位</strong></li><li><code>git revert -n 版本号</code>：反做之前某一特定版本</li></ol><h4 id="9-4-checkout-与-reset-的区别"><a href="#9-4-checkout-与-reset-的区别" class="headerlink" title="9.4 checkout 与 reset 的区别"></a>9.4 checkout 与 reset 的区别</h4><h5 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h5><ul><li><p>当你 checkout 分支的时候，git 做了这么三件事情</p><ol><li>将 HEAD 指向那个分支的最后一次 commit</li><li>将 HEAD 指向的 commit 里所有文件的 snapshot 替换掉 Index 区域里原来的内容</li><li>将 Index 区域里的内容填充到 Working Directory 里</li></ol><p>所以你可以发现，HEAD、Index、Working Directory 这个时候里的内容都是一模一样的。</p><p>注意：一般会误解为，Index 中的内容是空的，只有 git add 后才会有东西。实际上不是，Index 里一直是有东西的。</p><p>所以，Git 的所有操作就是对这三个区域的状态（或内容）的操作。</p></li><li><p><strong>带文件参数时</strong></p><p>当执行 git checkout [branch] file 时，checkout 干了这件事情：</p><ol><li>更新了 index 区域里 file 文件的内容</li><li>更新了 working directory 里 file 文件的内容</li></ol></li></ul><h5 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h5><ul><li><p>不带文件参数的 reset</p><p>Git 有三个区域，Git 的所有操作实际上是在操作这三个区域的状态（或内容）。git reset 配合不同的参数，对这三个区域会产生不同的影响。</p><p><code>reset</code>实际上有 3 个步骤，根据不同的参数可以决定执行到哪个步骤(<code>--soft</code>, <code>--mixed</code>, <code>--hard</code>)。</p><ol><li>改变 HEAD 所指向的 commit(<code>--soft</code>)</li><li>执行第 1 步，将 Index 区域更新为 HEAD 所指向的 commit 里包含的内容(<code>--mixed</code>)</li><li>执行第 1、2 步，将 Working Directory 区域更新为 HEAD 所指向的 commit 里包含的内容(<code>--hard</code>)</li></ol></li><li><p><strong>带文件参数时的不带文件参数的 reset</strong></p><p>上面讲到的 git reset 实际上不带参数的，如果带上文件参数，那么效果会是怎样的？</p><ol><li>HEAD 不会动</li><li>将那个 commit 的 snapshot 里的那个文件放到 Index 区域中</li></ol><p>需要注意的是带文件参数的 git reset 没有–hard, –soft 这两个参数。只有–mixed 参数。</p></li></ul><h5 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h5><p><code>reset --hard</code>和<code>checkout</code>貌似很像，都将 HEAD、Index、Working Directory 三个区域的内容整成了一样的，但也是有区别的：</p><ol><li>reset 会把 working directory 里的所有内容都更新掉</li><li>checkout 不会去修改你在 Working Directory 里修改过的文件</li><li>reset 把 branch 移动到 HEAD 指向的地方</li><li>checkout 则把 HEAD 移动到另一个分支</li></ol><p>第二个区别可能有点难以理解，举例来说：假设你有两个分支 master 和 develop，这两个分支指向不一样的 commit，我们现在在 develop 分支上（HEAD 指向的地方）</p><p>如果我们<code>git reset master</code>，那么 develop 就会指向 master 所指向的那个 commit。</p><p>如果我们<code>git checkout master</code>，那么 develop 不会动，<strong>只有 HEAD 会移动</strong>。HEAD 会指向 master。看图：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217104858327.png"></p><h3 id="10-分支相关"><a href="#10-分支相关" class="headerlink" title="10. 分支相关"></a>10. 分支相关</h3><h4 id="10-1-查看分支"><a href="#10-1-查看分支" class="headerlink" title="10.1 查看分支"></a>10.1 查看分支</h4><ol><li><code>git branch</code>：查看所有分支和当前所处分支</li></ol><h4 id="10-2-创建分支"><a href="#10-2-创建分支" class="headerlink" title="10.2 创建分支"></a>10.2 创建分支</h4><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217075830346.png" alt="image-20230217075830346" style="zoom: 60%;" /><ol><li><p><code>git branch branch_name</code>：创建新分支</p><blockquote><p>在 master 分支的后面新建一个 dev 分支</p></blockquote></li><li><p><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</p><blockquote><p>在 master 分支的后面新建一个 dev 分支,且 head 指向该分支</p></blockquote></li></ol><h4 id="10-3-删除分支"><a href="#10-3-删除分支" class="headerlink" title="10. 3 删除分支"></a>10. 3 删除分支</h4><ol><li><p><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</p><blockquote><p>需要当前分支为其他分支 才可以删除<code>branch_name</code>分支</p></blockquote></li><li><p><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</p><blockquote><p><code>origin</code>代表云端的意思</p></blockquote></li></ol><h4 id="10-4-切换分支"><a href="#10-4-切换分支" class="headerlink" title="10.4 切换分支"></a>10.4 切换分支</h4><ol><li><p><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</p></li><li><p><code>git checkout HEAD</code> : 切换到当前分支的某一版本</p><blockquote><p>HEAD 为<code>git log</code> 打印的某一版本的前 7 位版本号</p></blockquote><p>此时通过<code>git branch</code>查看分支，结果如下：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307184705916.png" alt="image-20230307184705916"></p><p>若在此版本的基础上<code>git commit</code>了一个版本，</p><p>然后<code>git branch</code>查看分支，结果如下：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307184300888.png" alt="image-20230307184300888"></p><p>若想提交在<code>f22f58e</code>的基础上提交的版本<code>f79692e</code></p><p>则需要进行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch temp f79692e  // 1. 依据快照f79692e 创建 temp 分支</span><br><span class="line">git checkout master      // 2. 切换到 master 分支</span><br><span class="line">git merge temp           // 3. 将 temp 分支合并到 master分支</span><br></pre></td></tr></table></figure><p>这里合并的时候多半要解决冲突。</p></li></ol><h4 id="10-5-合并分支"><a href="#10-5-合并分支" class="headerlink" title="10.5 合并分支"></a>10.5 合并分支</h4><ol><li><p><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</p><p><strong>当 master 分支和 dev 分支都对同一文件进行了修改 会导致合并冲突 。</strong><br><strong>例如：</strong></p><p>在 readme.txt 文件中</p><p>master 分支在该文件中加了‘999‘一行文字 并进行了可持续化<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081440124.png" alt="image-20230217081440124" style="zoom: 67%;" /></p><p>dev 分支在该文件中加了’888‘一行文字 并进行了可持续化<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081633316.png" alt="image-20230217081633316" style="zoom:67%;" /></p><p>总体上的结果如下：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081743616.png" alt="image-20230217081743616" style="zoom:50%;" /><p>此时将 dev 分支合并到 master 分支上会导致冲突，</p><p>打开 readme.txt: <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081933833.png" alt="image-20230217081933833" style="zoom: 67%;" /></p><p>HEAD 表示 head 所指的 master 分支里修改的内容，dev2 表示 dev2 分支里修改的内容</p><p>对该文件进行手动修改 ，**不需要重新<code>git merger dev</code>**，直接可持续化即可：<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217082149555.png" alt="image-20230217082149555" style="zoom:67%;" /></p><p><strong>手动修改后并可持续化后，会在 master 分支上分别增加了<code>add 888</code>,<code>add 999</code>,以及<code>处理冲突的结点</code>，共三个结点，过程如下如下：</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081743616.png" alt="image-20230217081743616" style="zoom:50%;" /> ====》<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217082944739.png" alt="image-20230217082944739" style="zoom: 50%;" /></p></li><li><p><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并 即拉取云端的内容</p><blockquote><p><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</p></blockquote></li></ol><h3 id="11-远程仓库"><a href="#11-远程仓库" class="headerlink" title="11. 远程仓库"></a>11. 远程仓库</h3><h4 id="11-1-本地与云端关联"><a href="#11-1-本地与云端关联" class="headerlink" title="11.1 本地与云端关联"></a>11.1 本地与云端关联</h4><ol><li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地<strong>仓库关联</strong>到远程仓库</li></ol><h4 id="11-2-本地推送到云端"><a href="#11-2-本地推送到云端" class="headerlink" title="11.2 本地推送到云端"></a>11.2 本地推送到云端</h4><ol><li><p><code>git push [-u] (第一次需要-u以后不需要)</code> ：将当前分支<strong>推送</strong>到远程仓库</p><blockquote><ol><li><p><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</p></li><li><p><code>git push --set-upstream origin branch_name</code>：若远程仓库无该 branch_name 分支，则可使用该命令在远程仓库创建该分支并同步</p></li><li><p><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</p></li></ol></blockquote></li></ol><h4 id="11-3-云端拉取到本地"><a href="#11-3-云端拉取到本地" class="headerlink" title="11.3 云端拉取到本地"></a>11.3 云端拉取到本地</h4><ol><li><p><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并 即<strong>拉取</strong>云端的内容</p></li><li><p>场景一 ：用云端的<code>branch_name</code>分支与本地的 master 分支进行合并：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin branch_name  # 将远程仓库的`branch_name`分支与本地仓库的当前分支合并</span><br></pre></td></tr></table></figure></li><li><p>场景二：只拉取云端的的<code>dev</code>分支，不合并到<code>本地的master分支</code></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法一:</span><br><span class="line"><span class="number">1</span>. git branch branch_name1  # 先 本地创建branch_name1新分支</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. git branch --set-upstream-<span class="keyword">to</span>=origin/branch_name1 branch_name2 # 再 将云端的branch_name1分支与本地的branch_name2分支对应</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. git pull   # 最后 拉取云端的内容</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">git checkout -t origin/branch_name 将远程的branch_name分支拉取到本地</span><br></pre></td></tr></table></figure></li><li><p><code>git checkout -t origin/branch_name</code> ：将远程的<code>branch_name</code><strong>分支拉取</strong>到本地</p></li><li><p><code>git clone git@git.acwing.com:xxx/XXX.git</code>： 将<strong>远程仓库 XXX 下载</strong>到当前目录下</p></li></ol><h3 id="12-stash-缓存"><a href="#12-stash-缓存" class="headerlink" title="12. stash 缓存"></a>12. stash 缓存</h3><h4 id="12-1-应用场景"><a href="#12-1-应用场景" class="headerlink" title="12.1 应用场景"></a>12.1 应用场景</h4><p>当我们开发一个新功能时会先从 master 拉出一个分支 dev，然后在这个 dev 分支下开始写代码开发新功能，就在此时，线上版本 master 出现了 bug，我们应该放下手头上新功能的开发工作先将 master 上的 bug 修复，这个时候 dev 分支下的改动怎么处理？</p><ul><li>方案 1：向 dev 分支提交新功能的代码，然后再切换到 master 下</li><li>方案 2：直接切换到 master 分支下</li></ul><p>首先我们新功能的代码还没开发完成，其次新功能这里还有一些 bug 没解决，就这样把有问题的代码提交到 dev 分支中，虽然可以解决目前我们的处境但不是很妥；但是第二种方案，直接切换，明显更不妥。怎么办？我们好像陷入了困境……</p><p>别急，Git 提供了一个**<code>git stash</code>命令<strong>恰好可以完美解决该问题, 其将当前未提交的修改(即，工作区的修改和暂存区的修改)先暂时储藏起来，这样工作区干净了后，就可以切换切换到 master 分支下拉一个 fix 分支。在完成线上 bug 的修复工作后，</strong>重新切换到 dev 分支<strong>下通过</strong><code>git stash pop</code>**命令将之前储藏的修改取出来，继续进行新功能的开发工作。</p><blockquote><p>注意：<code>git stash pop</code>之前需要重新回到 dev 分支</p></blockquote><h4 id="12-2-相关命令"><a href="#12-2-相关命令" class="headerlink" title="12.2 相关命令"></a>12.2 相关命令</h4><ol><li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li><li><code>git stash list</code>：查看栈中所有元素</li><li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li><li><code>git stash drop</code>：删除栈顶存储的修改</li><li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li></ol><h3 id="13-协作开发"><a href="#13-协作开发" class="headerlink" title="13. 协作开发"></a>13. 协作开发</h3><p>远程仓库上一个 master 分支，一个 dev 分支</p><p>Friend：通过<code>git clone</code>下来的只有 master 分支，需要在本地<code>git checkout -t origin/dev </code>将远程的 dev 分支拉取到本地。</p><p><strong>应用场景：</strong></p><p>Friend：对 readme.txt 做了修改，并 push 到了云端。</p><p>Me：若 Me 也想对 readme.txt 做了修改，需要先<code>git pull</code>拉取一下云端的最新内容才行，不然 Me 修改后 push 会产生冲突。</p><p><strong>删除本地项目命令</strong></p><p><code>rm project rf</code></p><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217190234823.png" alt="image-20230217190234823" style="zoom:67%;" /><p>rpc：远程过程调用(remote procedure call)</p><h2 id="管道、环境变量与常用命令"><a href="#管道、环境变量与常用命令" class="headerlink" title="管道、环境变量与常用命令"></a>管道、环境变量与常用命令</h2><h3 id="1-管道"><a href="#1-管道" class="headerlink" title="1. 管道"></a>1. 管道</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><p>管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218083029165.png" alt="image-20230218083029165" style="zoom:67%;" /><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs cat | wc -l  <span class="comment"># 统计当前目录下所有python文件的总行数</span></span><br></pre></td></tr></table></figure><p>其他命令见下文<strong>常见命令</strong></p><h4 id="1-2-要点"><a href="#1-2-要点" class="headerlink" title="1.2 要点"></a>1.2 要点</h4><ul><li>管道命令仅处理 stdout，会忽略 stderr。</li><li>管道右边的命令必须能接受 stdin。</li><li>多个管道命令可以串联。</li></ul><h4 id="1-3-与文件重定向的区别"><a href="#1-3-与文件重定向的区别" class="headerlink" title="1.3 与文件重定向的区别"></a>1.3 与文件重定向的区别</h4><ul><li>文件重定向左边为命令，右边为文件。</li><li>管道左右两边均为命令，左边有 stdout，右边有 stdin</li></ul><h3 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><p>Linux 系统中会用很多环境变量来记录配置信息。<br>环境变量类似于全局变量，可以被各个进程访问到。我们可以通过修改环境变量来方便地修改系统配置。</p><h4 id="2-2-查看"><a href="#2-2-查看" class="headerlink" title="2.2 查看"></a>2.2 查看</h4><p>列出当前环境下的所有环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env  <span class="comment"># 显示当前用户的变量</span></span><br><span class="line"><span class="built_in">set</span>  <span class="comment"># 显示当前shell的变量，包括当前用户的变量;</span></span><br><span class="line"><span class="built_in">export</span>  <span class="comment"># 显示当前导出成用户变量的shell变量</span></span><br></pre></td></tr></table></figure><p>输出某个环境变量的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h4 id="2-3-修改"><a href="#2-3-修改" class="headerlink" title="2.3 修改"></a>2.3 修改</h4><p>环境变量的定义、修改、删除操作可以参考<a href="">shell 语法——变量</a>这一节的内容。</p><p>为了将对环境变量的修改应用到未来所有环境下，可以将修改命令放到<code>~/.bashrc</code>文件中。<br>修改完<code>~/.bashrc</code>文件后，记得执行<code>source ~/.bashrc</code>，来将修改应用到当前的<code>bash</code>环境下。</p><p>为何将修改命令放到<code>~/.bashrc</code>，就可以确保修改会影响未来所有的环境呢？</p><ul><li>每次启动<code>bash</code>，都会先执行<code>~/.bashrc</code>。</li><li>每次<code>ssh</code>登陆远程服务器，都会启动一个<code>bash</code>命令行给我们。</li><li>每次<code>tmux</code>新开一个<code>pane</code>，都会启动一个<code>bash</code>命令行给我们。</li><li>所以未来所有新开的环境都会加载我们修改的内容。</li></ul><h4 id="2-4-常见环境变量"><a href="#2-4-常见环境变量" class="headerlink" title="2.4 常见环境变量"></a>2.4 常见环境变量</h4><ol><li><p><code>HOME</code>：用户的家目录。</p></li><li><p><code>PATH</code>：可执行文件（命令）的存储路径。路径与路径之间用<code>:</code>分隔。当某个可执行文件同时出现在多个路径中时，会选择从左到右数第一个路径中的执行。<strong>下列所有存储路径的环境变量，均采用从左到右的优先顺序</strong>。</p><p>例子：</p><p>下图为在<code>~/.bashrc</code>添加一个可执行文件（命令）的存储路径，需要注意以下几点：</p><ul><li>写在<code>.bashrc</code>文件内容的最下方，这样可以覆盖上面的</li><li>路径之间用<code>:</code>分隔</li><li>添加的新路径之后需要加上之前所有的 PATH 路径，即最后需加上<code>$PATH</code></li><li>文件目录添加到当前命令所在文件夹即可</li></ul><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218082757919.png" alt="image-20230218082757919"></p></li><li><p><code>LD_LIBRARY_PATH</code>：用于指定动态链接库(.so 文件)的路径，其内容是以冒号分隔的路径列表。</p><blockquote><ol><li><p><strong>静态库与动态库</strong></p><p><strong>静态库</strong>：这类库的名字一般是 libxxx.a,在使用静态库的情况下，在编译链接可执行文件时，链接器从静态库中复制这些函数和数据，并把它们和应用程序的其他模块组合起来创建最终的可执行文件（.exe）。当发布产品时，只需要发布这个可执行文件，并不需要发布被使用的静态库。</p><p><strong>动态库</strong>：是一种不可执行的二进制程序文件，它允许程序共享执行特殊任务所必需的代码和其他资源。Windows 平台上动态链接库的后缀名是”.dll”，Linux 平台上的后缀名是“.so”。Linux 上动态库一般是 libxxx.so;相对于静态函数库，动态函数库在编译的时候并没有被编译进目标代码中，你的程序执行到相关函数时才调用该函数库里的相应函数，因此动态函数库所产生的可执行文件比较小。由于函数库没有被整合进你的程序，而是程序运行时动态的申请并调用，所以程序的运行环境中必须提供相应的库。动态函数库的改变并不影响你的程序，所以动态函数库的升级比较方便。</p></li><li><p><strong>动态链接库的优点</strong></p></li></ol><ul><li><strong>复用性：</strong>DLL 的编制与具体的编程语言以及编译器无关，不同语言编写的程序只要按照函数调用约定就可以调用同一个 DLL 函数</li><li><strong>可扩展性：</strong>DLL 文件与 EXE 文件独立，只要接口不变，升级程序只需更新 DLL 文件不需要重新编译应用程序</li><li><strong>节省内存：</strong>如果多个应用程序使用同一个 dll，该 dll 的页面只需要存入内存一次，所有的应用程序都可以共享它的页面，从而节省内存</li></ul></blockquote></li><li><p><code>C_INCLUDE_PATH</code>：C 语言的头文件路径，内容是以冒号分隔的路径列表。</p></li><li><p><code>CPLUS_INCLUDE_PATH</code>：CPP 的头文件路径，内容是以冒号分隔的路径列表。</p></li><li><p><code>PYTHONPATH</code>：Python 导入包的路径，内容是以冒号分隔的路径列表。</p></li><li><p><code>JAVA_HOME</code>：jdk 的安装目录。</p></li><li><p><code>CLASSPATH</code>：存放 Java 导入类的路径，内容是以冒号分隔的路径列表。</p></li></ol><h3 id="3-常见命令"><a href="#3-常见命令" class="headerlink" title="3. 常见命令"></a>3. 常见命令</h3><h4 id="3-1-系统状况"><a href="#3-1-系统状况" class="headerlink" title="3.1 系统状况"></a>3.1 系统状况</h4><ol><li><p><code>top</code>：查看所有进程的信息（Linux 的任务管理器）</p><ul><li>打开后，输入<code>M</code>：按使用内存排序</li><li>打开后，输入<code>P</code>：按使用 CPU 排序</li><li>打开后，输入<code>q</code>：退出</li></ul></li><li><p><code>df -h</code>：查看硬盘使用情况</p></li><li><p><code>free -h</code>：查看内存使用情况</p></li><li><p><code>du -sh</code>：查看当前目录占用的硬盘空间</p></li><li><p><code>ps aux</code>：查看所有进程</p><ul><li><code>ps aux | grep match-server </code> 利用管道对进程进行筛选，查看所有进程中名为<code>match-server</code>的进程</li></ul></li><li><p><code>kill -9 pid</code>：杀死编号为 pid 的进程</p><ul><li><p>传递某个具体的信号：<code>kill -s SIGTERM pid</code> ，<code>SIGTERM</code>对应<code>-15</code> ，<code>-s</code>指定发送信号</p></li><li><p>信号列表</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218093022557.png" alt="image-20230218093022557" style="zoom:50%;" /></li></ul></li><li><p><code>netstat -nt</code>：查看所有网络连接</p></li><li><p><code>w</code>：列出当前登陆的用户</p></li><li><p><code>logout</code>：退出当前用户登录</p></li><li><p><code>ping www.baidu.com</code>：检查是否连网</p></li></ol><h4 id="3-2-文件权限"><a href="#3-2-文件权限" class="headerlink" title="3.2 文件权限"></a>3.2 文件权限</h4><ol><li><p><code>chmod</code>：修改文件权限</p><ul><li><p><code>chmod +x xxx</code>：给 xxx 添加可执行权限</p></li><li><p><code>chmod -x xxx</code>：去掉 xxx 的可执行权限</p></li></ul></li></ol><ul><li><p><code>chmod 777 xxx</code>：将 xxx 的权限改成 777</p></li><li><p><code>chmod 777 xxx -R</code>：递归修改整个文件夹的权限</p><ul><li><p><code>chmod +r * -R</code>：给当前目录下的所有文件添加可读权限</p><blockquote><p>-R 对当前目录中的所有文件和子目录进行相同的权限更改</p></blockquote></li></ul> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218094748691.png" alt="image-20230218094748691" style="zoom:50%;" />  <blockquote><p>r:读;w:写;x:可执行</p></blockquote></li></ul><h4 id="3-3-文件检索"><a href="#3-3-文件检索" class="headerlink" title="3.3 文件检索"></a>3.3 文件检索</h4><ol><li><p><code>find /path/to/directory/ -name &#39;*.py&#39;</code>：搜索某个文件路径下的所有<code>*.py</code>文件</p><blockquote><p><code>find . -name &#39;*.py&#39;</code> ： <code>.</code> 代表当前目录下</p></blockquote></li><li><p><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行。起过滤功能。</p><ul><li><code>ps aux | grep match-server </code> 利用管道对进程进行筛选，查看所有进程中名为<code>match-server</code>的进程</li></ul></li><li><p><code>wc</code>：统计行数、单词数、字节数</p><ul><li>既可以从<code>stdin</code>中直接读入内容；也可以在命令行参数中传入文件名列表；</li><li><code>wc -l</code>：统计行数</li><li><code>wc -w</code>：统计单词数</li><li>`wc -c</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.cpp&#x27;</span> | wc -l &gt; ans.txt <span class="comment"># 统计当前目录下共有多少个以.cpp结尾的文件，将结果写入ans.txt中</span></span><br></pre></td></tr></table></figure></li><li><p><code>tree</code>：展示当前目录的文件结构</p><ul><li><code>tree /path/to/directory/</code>：展示某个目录的文件结构</li><li><code>tree -a</code>：展示隐藏文件</li></ul></li><li><p><code>cut</code>：分割一行内容</p><ul><li>从<code>stdin</code>中读入多行数据</li><li><code>echo $PATH | cut -d &#39;:&#39; -f 3,5</code>：输出 PATH 用:分割后第 3 和第 5<strong>列</strong>数据</li><li><code>echo $PATH | cut -d &#39;:&#39; -f 3-5</code>：输出 PATH 用:分割后第 3 到第 5<strong>列</strong>数据</li><li><code>echo $PATH | cut -c 3,5</code>：输出 PATH 的第 3 和第 5 个字符</li><li><code>echo $PATH | cut -c 3-5</code>：输出 PATH 的第 3 到第 5 个字符</li></ul></li><li><p><code>sort</code>：将每行内容按字典序排序</p><ul><li><p>可以从<code>stdin</code>中读取多行数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls | sort</span><br><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | sort  <span class="comment"># 读文件路径</span></span><br><span class="line">cat scores.txt | cut -d <span class="string">&#x27; &#x27;</span> -f 1 | sort &gt; names.txt <span class="comment"># 读文件内容</span></span><br></pre></td></tr></table></figure></li><li><p>可以从命令行参数中读取文件名列表</p></li></ul></li><li><p><code>xargs</code>：将<code>stdin</code>中的数据用空格或回车分割成命令行参数，<strong>将标准输入变成文件参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs cat | wc -l  <span class="comment"># 统计当前目录下所有`python`文件的总行数</span></span><br><span class="line"></span><br><span class="line">find homework/lesson_6/ -name <span class="string">&#x27;*.cpp&#x27;</span> | xargs cat | grep <span class="string">&#x27;thrift&#x27;</span>  <span class="comment"># 检索`thrift `字符串，即在指定目录下显示包含`thrift`内容的行，但不显示该行所在文件</span></span><br><span class="line"></span><br><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs rm  <span class="comment"># 删除当前目录下的所有.py文件</span></span><br></pre></td></tr></table></figure></li><li><p><code>ag xxx</code>：搜索当前目录下的所有文件，检索<code>xxx</code>字符串，即在当前目录下显示包含<code>xxx</code>内容的行，且显示该行所在文件</p><blockquote><p>ag 和 grep 的区别 ：ag 不会区分大小写</p></blockquote></li></ol><h4 id="3-4-查看文件内容"><a href="#3-4-查看文件内容" class="headerlink" title="3.4 查看文件内容"></a>3.4 查看文件内容</h4><ol><li><p><code>more</code>：浏览文件内容， <code>cat</code>是一下子显示所有，<code>more</code>是一页一页的显示</p><ul><li>回车：下一行</li><li>空格：下一页</li><li><code>b</code>：上一页</li><li><code>q</code>：退出</li></ul></li><li><p><code>less</code>：与<code>more</code>类似，功能更全</p><ul><li>回车：下一行</li><li><code>y</code>：上一行</li><li><code>Page Down</code>：下一页</li><li><code>Page Up</code>：上一页</li><li><code>q</code>：退出</li></ul></li><li><p><code>head -3 xxx</code>：展示<code>xxx</code>的前 3 行内容</p><ul><li><p>同时支持从<code>stdin</code>读入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | head - 3 <span class="comment"># 显示进程列表的前三行</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>tail -3 xxx</code>：展示 xxx 末尾 3 行内容</p><ul><li>同时支持从<code>stdin</code>读入内容</li></ul></li></ol><h4 id="3-5-用户相关"><a href="#3-5-用户相关" class="headerlink" title="3.5 用户相关"></a>3.5 用户相关</h4><ol><li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li></ol><h4 id="3-6-工具"><a href="#3-6-工具" class="headerlink" title="3.6 工具"></a>3.6 工具</h4><ol><li><p><code>md5sum</code>：计算<code>md5</code>哈希值</p><blockquote><p>md5sum 计算检验 MD5 效验码。MD5 算法常常被用来验证网络文件传输的完整性，防止文件被人篡改。MD5 全称是报文摘要算法（Message-Digest Algorithm 5），此算法对任意长度的信息逐位进行计算，产生一个二进制长度为 128 位（十六进制长度就是 32 位）的“指纹”（或称“报文摘要”），不同的文件产生相同的报文摘要的可能性非常小。</p></blockquote><ul><li>可以从<code>stdin</code>读入内容</li><li>也可以在命令行参数中传入文件名列表 <code>md5sum scores.txt</code>；</li></ul></li><li><p><code>time command</code>：统计<code>command</code>命令的执行时间</p></li><li><p><code>ipython3</code>：交互式<code>python3</code>环境。可以当做计算器，或者批量管理文件。</p><ul><li><code>! echo &quot;Hello World&quot;</code>：<code>!</code><strong>表示执行<code>shell</code>脚本</strong></li></ul></li><li><p><code>watch -n 0.1 command</code>：每 0.1 秒执行一次<code>command</code>命令</p></li><li><p><code>tar</code>：压缩文件</p><ul><li><p><code>tar -zcvf xxx.tar.gz /path/to/file/*</code>：将 file 文件夹进行压缩</p><blockquote><p>file/有* 代表 file 里的所有文件压缩为一个包</p></blockquote></li><li><p><code>tar -zxvf xxx.tar.gz</code>：解压缩</p></li></ul></li><li><p><code>diff xxx yyy</code>：查找文件<code>xxx</code>与<code>yyy</code>的不同点</p></li></ol><h4 id="3-7-安装软件"><a href="#3-7-安装软件" class="headerlink" title="3.7 安装软件"></a>3.7 安装软件</h4><ol><li><code>sudo command</code>：以<code>root</code>身份执行<code>command</code>命令</li><li><code>apt-get install xxx</code>：安装软件</li><li><code>pip install xxx --user --upgrade</code>：安装<code>python</code>包</li></ol><h2 id="云服务器配置与-Docker"><a href="#云服务器配置与-Docker" class="headerlink" title="云服务器配置与 Docker"></a>云服务器配置与 Docker</h2><h3 id="1-初始配置"><a href="#1-初始配置" class="headerlink" title="1. 初始配置"></a>1. 初始配置</h3><ol><li><p>登录到新服务器。打开 AC Terminal，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@公网ip <span class="comment"># 注意腾讯云登录的用户不是root，而是ubuntu</span></span><br></pre></td></tr></table></figure></li><li><p>为防止 root 用户误操作安装了软件，所以最好新创建工作用户并赋予 sudo 权限，这样该用户每次安装东西，命令行前都要加个<code>sudo </code>,防止误操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser chjm  <span class="comment"># 创建用户chjm</span></span><br><span class="line">sudo usermod -aG chjm  <span class="comment"># 给用户chjm分配sudo权限</span></span><br></pre></td></tr></table></figure><ul><li><p><code>su root</code> ：切换用户，从 chjm 切换到 root 用户</p></li><li><p><code>logout</code> ：退出当前用户登录</p></li><li><p>若在 chjm 用户下使用 sudo 报错<code>chjm is not in the sudoers file.  This incident will be reported.</code></p><p>可在 root 用户下使用<code>sudo adduser chjm sudo</code>： 将用户名<code>chjm</code>添加到<code>sudoers</code>文件</p></li></ul><blockquote><p>腾讯云如果购买的是轻量级的应用服务器，ubuntu 版本是默认没有 root 用户的。默认用户是 ubuntu（可以在控制器中修改用户名），是默认拥有 sudo 权限的。若想添加新用户可用<code>sudo adduser chjm</code></p></blockquote></li><li><p><strong>配置别名</strong></p><p><strong>本地</strong>创建文件 <code>~/.ssh/config</code></p><p>然后在文件中输入：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host alserver</span><br><span class="line">HostName IP # ip地址或域名</span><br><span class="line">User ubuntu #用户名</span><br><span class="line">Port <span class="number">20000</span>#端口 不加port默认是<span class="number">22</span></span><br><span class="line"></span><br><span class="line">Host txserver</span><br><span class="line">HostName IP # ip地址或域名</span><br><span class="line">User ubuntu #用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名<code>alserver</code>、<code>txserver</code></p></li><li><p><strong>配置秘钥</strong></p><p><strong>本地</strong>创建密钥：（配置秘钥与上面配置文件无关，上面配置文件只是起个别名 方便 ssh 连接）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<code>myserver1</code>服务器。则将公钥中的内容，复制到<code>myserver1</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。</p><p>也可以在<strong>本地</strong>使用如下命令一键添加公钥：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id txserver ## 将公钥添加到别名为txserver的服务器</span><br></pre></td></tr></table></figure></li><li><p>安装 tmux, 登录自己的服务器，然后安装 tmux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update <span class="comment"># 先升级</span></span><br><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure></li><li><p>将 AC Terminal 的配置传到新服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp .bashrc .vimrc .tmux.conf server_name:  <span class="comment"># server_name需要换成自己配置的别名</span></span><br></pre></td></tr></table></figure></li><li><p>安装 docker，先打开 tmux。（养成好习惯，所有工作都在 tmux 里进行，防止意外关闭终端后，工作进度丢失）<br>然后在 tmux 中根据<a href="https://docs.docker.com/engine/install/ubuntu/">docker</a>安装教程安装 docker 即可。</p><blockquote><p>docker –version 能查看到版本即表示安装成功</p></blockquote></li></ol><h3 id="2-Docker"><a href="#2-Docker" class="headerlink" title="2. Docker"></a>2. <a href="https://docs.docker.com/engine/install/linux-postinstall/">Docker</a></h3><blockquote><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。一个镜像（<code>Image</code>）可用生成多个容器（<code>Container</code>），容器内有配好的不同环境。</p></blockquote><h4 id="2-1-将当前用户添加到-docker-用户组"><a href="#2-1-将当前用户添加到-docker-用户组" class="headerlink" title="2.1 将当前用户添加到 docker 用户组"></a>2.1 将当前用户添加到 docker 用户组</h4><p>为了避免每次使用 docker 命令都需要加上 sudo 权限，可以将当前用户加入安装中自动创建的 docker 用户组(可以参考官方文档)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>执<strong>行完此操作后，需要退出服务器，再重新登录回来，才可以省去 sudo 权限。</strong></p><h4 id="2-2-镜像（images）"><a href="#2-2-镜像（images）" class="headerlink" title="2.2 镜像（images）"></a>2.2 镜像（images）</h4><ol><li><p><code>docker pull ubuntu:20.04</code>：拉取一个镜像</p></li><li><p><code>docker images</code>：列出本地所有镜像</p></li><li><p><code>docker image rm ubuntu:20.04 或 docker rmi ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></p></li><li><p><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像</p><blockquote><ul><li><p>[ ] 代表可选 可加 container 也可不加</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218192155526.png" alt="image-20230218192155526"></p></li><li><p>容器 CONTAINER 可用 CONTAINER _ID（a5d075b5ce28） 也可用 NAMES（ecstatic_chaplygin）</p></li><li><p>镜像 IMAGE_NAME:TAG 名称:版本号</p></li></ul></blockquote></li><li><p><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</p><blockquote><ul><li><p>生成后的<code>ubuntu_20_04.ta</code>需要使用<code>chmod +r ubuntu_20_04.tar</code>添加可读权限 这样别人才能读取</p></li><li><p>若想将该镜像传到其他服务器上，可使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r txserver:ubuntu_20_04.tar .    <span class="comment"># . 代表本地的当前路径下  在本地使用该命令</span></span><br><span class="line">scp -r ~/ubuntu_20_04.tar alserver:/home/  <span class="comment"># 再将本地的ubuntu_20_04.tar传到阿里云的服务器上</span></span><br></pre></td></tr></table></figure><p>不能直接从一个服务器传到另外一个服务器</p></li></ul></blockquote></li><li><p><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</p></li></ol><h4 id="2-3-容器-container"><a href="#2-3-容器-container" class="headerlink" title="2.3 容器(container)"></a>2.3 容器(container)</h4><ol><li><p><code>docker [container] create -it ubuntu:20.04</code>：利用镜像<code>ubuntu:20.04</code>创建一个容器。</p></li><li><p><code>docker ps -a</code>：查看本地的所有容器</p><ul><li><code>docker ps</code>：查看所有运行的容器</li></ul></li><li><p><code>docker [container] start CONTAINER</code>：启动容器</p><blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218192155526.png" alt="image-20230218192155526"></p><p>CONTAINER 可用 ID（a5d075b5ce28） 也可用 NAMES（ecstatic_chaplygin）</p></blockquote></li><li><p><code>docker [container] stop CONTAINER</code>：停止容器</p></li><li><p><code>docker [container] restart CONTAINER</code>：重启容器</p></li><li><p><code>docker [contaienr] run -itd ubuntu:20.04</code>：创建并启动一个容器 (<code>-itd</code>)</p><ul><li><code>docker [contaienr] run -it ubuntu:20.04</code>：创建并启动一个容器 同时进入该容器 （<code>-it</code>）</li></ul></li><li><p><code>docker [container] attach CONTAINER</code>：进入容器（只能进入正在启动的容器）</p><ul><li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以<strong>挂起</strong>容器</li><li><code>Ctrl-d</code>是直接<strong>关闭</strong>该容器</li></ul></li><li><p><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令（正在启动的容器中）</p></li><li><p><code>docker [container] rm CONTAINER</code>：删除容器 （需先停止）</p><blockquote><p>rmi 是删除镜像</p></blockquote></li><li><p><code>docker container prune</code>：删除所有已停止的容器</p><blockquote><p>这里的<code>container </code>不能没有，前面的命令可以没有<code>container </code></p></blockquote></li><li><p><code>docker export -o xxx.tar CONTAINER</code>：将容器<code>CONTAINER</code>导出到本地文件<code>xxx.tar</code>中</p></li><li><p><code>docker import xxx.tar image_name:tag</code>：将本地容器文件<code>xxx.tar</code>导入成镜像，并将镜像命名为<code>image_name:tag</code></p></li><li><p><code>docker export/import与docker save/load</code>的区别：</p><ul><li><code>export/import</code>会丢弃历史记录和元数据信息，仅保存容器当时的快照状态 其本质迁移的也是一个镜像</li><li><code>save/load</code>会保存完整记录，体积更大</li></ul></li><li><p><code>docker top CONTAINER</code>：查看某个容器内的所有进程（需将启动的容器挂起）</p></li><li><p><code>docker stats</code>：查看所有容器的统计信息，包括 CPU、内存、存储、网络等信息</p></li><li><p><code>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx</code>：在服务器本地和容器间复制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp tmp.rar peaceful_kepler:/root  <span class="comment"># 将服务器本地的tmp.rar复制到peaceful_kepler容器的root目录下</span></span><br><span class="line">docker cp peaceful_kepler:/root . <span class="comment"># 将peaceful_kepler容器的root文件夹复制到服务器本地</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename peaceful_kepler testName  <span class="comment"># peaceful_kepler是docker生成容器时随便取的名字</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</p></li></ol><h4 id="2-4-加载镜像并实现-ssh-登录云服务器里的服务器（容器）"><a href="#2-4-加载镜像并实现-ssh-登录云服务器里的服务器（容器）" class="headerlink" title="2.4 加载镜像并实现 ssh 登录云服务器里的服务器（容器）"></a>2.4 加载镜像并实现 ssh 登录云服务器里的服务器（容器）</h4><blockquote><p><strong>记住想使用 ssh 登录该容器 需要一直保持该容器在运行中</strong></p></blockquote><p>进入 AC Terminal，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  <span class="comment"># 将镜像上传到自己租的云端服务器</span></span><br><span class="line">ssh server_name  <span class="comment"># 登录自己的云端服务器</span></span><br><span class="line"></span><br><span class="line">docker load -i docker_lesson_1_0.tar  <span class="comment"># 将镜像加载到本地</span></span><br><span class="line">docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0  <span class="comment"># 创建并运行docker_lesson:1.0镜像</span></span><br><span class="line"></span><br><span class="line">docker attach my_docker_server  <span class="comment"># 进入创建的docker容器，这里my_docker_server相当于docker_lesson:1.0的别名</span></span><br><span class="line">passwd  <span class="comment"># 设置root密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后Ctrl-p，再按Ctrl-q挂起容器 不能关闭 不然就不能ssh登录了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在任意地方便可使用ssh登录云服务器里的服务器（容器）了</span></span><br><span class="line">ssh root@ip地址 -p 20000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再该服务器（容器）内，为防止root用户误操作 也可新建一个新用户 并分配sudo权限  这样每次安装软件的命令前也就都需要加sudo了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样可以在该容器内配置vim tmux相关设置</span></span><br></pre></td></tr></table></figure><blockquote><p>对于 <code>docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0</code></p><p><code>- p</code> 是指修改端口号映射 将容器内的 22 端口映射到本地的 20000 端口 因为本地的 22 端口被用过了（默认端口 ）</p><p><code>- name</code> 是定义别名，和 ssh 配置别名一样</p><p><code>-itd</code> 是创建并启动一个容器 (<code>-itd</code>)</p><p><strong>也可以给一个容器开放多个端口，如下：</strong></p><p><code>docker run -p 10000:22 -p 443:443 -p 80:80 -p 3030:3030 -p 3040:3040 -p 3050:3050 --name my_docker_server -itd docker_lesson:1.0</code></p></blockquote><p>去云平台控制台中修改安全组配置，放行端口 20000。<br>返回<code>AC Terminal</code>，即可通过<code>ssh</code>登录自己的<code>docker</code>容器：<br><code>ssh root@xxx.xxx.xxx.xxx -p 20000 </code> 将<code>xxx.xxx.xxx.xxx</code>替换成自己租的服务器的 IP 地址<br>然后，可以仿照上节课内容，创建工作账户<code>chjm</code>。<br>最后，可以参考 ssh 登录配置<code>docker</code>容器的别名和免密登录。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3项目搭建</title>
      <link href="/2022/02/01/vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/02/01/vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="项目搭建规范"><a href="#项目搭建规范" class="headerlink" title="项目搭建规范"></a>项目搭建规范</h1><h2 id="一-代码规范"><a href="#一-代码规范" class="headerlink" title="一. 代码规范"></a>一. 代码规范</h2><h3 id="1-1-集成-editorconfig-配置"><a href="#1-1-集成-editorconfig-配置" class="headerlink" title="1.1. 集成 editorconfig 配置"></a>1.1. 集成 editorconfig 配置</h3><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://editorconfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*</span>] <span class="comment"># 表示所有文件适用</span></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span> <span class="comment"># 设置文件字符集为 utf-8</span></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span> <span class="comment"># 缩进风格（tab | space）</span></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span> <span class="comment"># 缩进大小</span></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span> <span class="comment"># 控制换行类型(lf | cr | crlf)</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 去除行首的任意空白字符</span></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 始终在文件末尾插入一个新行</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*.md</span>] <span class="comment"># 表示仅 md 文件适用以下规则</span></span><br><span class="line"><span class="string">max_line_length</span> <span class="string">=</span> <span class="string">off</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>VSCode 需要安装一个插件：EditorConfig for VS Code</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2gh989yj30pj05ggmb.jpg" alt="image-20210722215138665"></p><h3 id="1-2-使用-prettier-工具"><a href="#1-2-使用-prettier-工具" class="headerlink" title="1.2. 使用 prettier 工具"></a>1.2. 使用 prettier 工具</h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p><p>1.安装 prettier</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prettier -D</span><br></pre></td></tr></table></figure><p>2.配置.prettierrc 文件：</p><ul><li>useTabs：使用 tab 缩进还是空格缩进，选择 false；</li><li>tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；</li><li>printWidth：当行字符的长度，推荐 80，也有人喜欢 100 或者 120；</li><li>singleQuote：使用单引号还是双引号，选择 true，使用单引号；</li><li>trailingComma：在多行输入的尾逗号是否添加，设置为 <code>none</code>；</li><li>semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建.prettierignore 忽略文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/dist/*</span><br><span class="line">.local</span><br><span class="line">.output.js</span><br><span class="line">/node_modules/**</span><br><span class="line"></span><br><span class="line">**/*.svg</span><br><span class="line">**/*.sh</span><br><span class="line"></span><br><span class="line">/public/*</span><br></pre></td></tr></table></figure><p>4.VSCode 需要安装 prettier 的插件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2acx21rj30ow057mxp.jpg" alt="image-20210722214543454"></p><p>5.测试 prettier 是否生效</p><ul><li>测试一：在代码中保存代码；一次保存格式化一个文件</li><li>测试二：配置一次性修改的命令；运行该命令 会格式化所有的文件</li></ul><p>在 package.json 中配置一个 scripts：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;prettier&quot;</span>: <span class="string">&quot;prettier --write .&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-使用-ESLint-检测"><a href="#1-3-使用-ESLint-检测" class="headerlink" title="1.3. 使用 ESLint 检测"></a>1.3. 使用 ESLint 检测</h3><p>1.在前面创建项目的时候，我们就选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。</p><p>2.VSCode 需要安装 ESLint 插件：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2oq26odj30pw05faaq.jpg" alt="image-20210722215933360"></p><p>3.解决 eslint 和 prettier 冲突的问题：</p><p>安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><p>添加 prettier 插件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extends: [</span><br><span class="line">  <span class="string">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class="line">  <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@vue/typescript/recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@vue/prettier&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@vue/prettier/@typescript-eslint&quot;</span>,</span><br><span class="line">  &#x27;plugin:prettier/recommended&#x27;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="1-4-git-Husky-和-eslint"><a href="#1-4-git-Husky-和-eslint" class="headerlink" title="1.4. git Husky 和 eslint"></a>1.4. git Husky 和 eslint</h3><p>虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉了：</p><ul><li><p>也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；</p></li><li><p>那么我们需要在组员执行 <code>git commit </code> 命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；</p></li></ul><p>那么如何做到这一点呢？可以通过 Husky 工具：</p><ul><li>husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push</li></ul><p>如何使用 husky 呢？</p><p>这里我们可以使用自动配置命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky-init&amp;&amp;npm install</span><br></pre></td></tr></table></figure><p>这里会做三件事：</p><p>1.安装 husky 相关的依赖：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq0o5jxmj30bb04qwen.jpg" alt="image-20210723112648927"></p><p>2.在项目目录下创建 <code>.husky</code> 文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx huksy install</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq16zo75j307703mt8m.jpg" alt="image-20210723112719634"></p><p>3.在 package.json 中添加一个脚本：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq26phpxj30dj06fgm3.jpg" alt="image-20210723112817691"></p><p>接下来，我们需要去完成一个操作：在进行 commit 时，执行 lint 脚本：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq3hn229j30nf04z74q.jpg" alt="image-20210723112932943"></p><p>这个时候我们执行 git commit 的时候会自动对代码进行 lint 校验。</p><h3 id="1-5-git-commit-规范"><a href="#1-5-git-commit-规范" class="headerlink" title="1.5. git commit 规范"></a>1.5. git commit 规范</h3><h4 id="1-5-1-代码提交风格"><a href="#1-5-1-代码提交风格" class="headerlink" title="1.5.1. 代码提交风格"></a>1.5.1. 代码提交风格</h4><p>通常我们的 git commit 会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw17gaqjj30to0cj3zp.jpg"></p><p>但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</p><ul><li><p>Commitizen 是一个帮助我们编写规范 commit message 的工具；</p><p>1.安装 Commitizen</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen -D</span><br></pre></td></tr></table></figure><p>2.安装 cz-conventional-changelog，并且初始化 cz-conventional-changelog：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure><p>这个命令会帮助我们安装 cz-conventional-changelog：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvz2odi4j30ek00zmx2.jpg" alt="image-20210723145249096"></p><p>并且在 package.json 中进行配置：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvzftay5j30iu04k74d.jpg"></p><p>这个时候我们提交代码需要使用 <code>npx cz</code>：</p><ul><li>第一步是选择 type，本次更新的类型</li></ul><table><thead><tr><th>Type</th><th>作用</th></tr></thead><tbody><tr><td>feat</td><td>新增特性 (feature)</td></tr><tr><td>fix</td><td>修复 Bug(bug fix)</td></tr><tr><td>docs</td><td>修改文档 (documentation)</td></tr><tr><td>style</td><td>代码格式修改(white-space, formatting, missing semi colons, etc)</td></tr><tr><td>refactor</td><td>代码重构(refactor)</td></tr><tr><td>perf</td><td>改善性能(A code change that improves performance)</td></tr><tr><td>test</td><td>测试(when adding missing tests)</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具(比如更改测试环境)</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><ul><li>第二步选择本次修改的范围（作用域）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8ca15oj30r600wmx4.jpg" alt="image-20210723150147510"></p><ul><li>第三步选择提交的信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8mq3zlj60ni01hmx402.jpg" alt="image-20210723150204780"></p><ul><li>第四步提交详细的描述信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8y05bjj30kt01fjrb.jpg" alt="image-20210723150223287"></p><ul><li>第五步是否是一次重大的更改</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw9z5vbij30bm00q744.jpg" alt="image-20210723150322122"></p><ul><li>第六步是否影响某个 open issue</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwar8xp1j30fq00ya9x.jpg" alt="image-20210723150407822"></p><p>我们也可以在 scripts 中构建一个命令来执行 cz：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwc4gtkxj30e207174t.jpg" alt="image-20210723150526211"></p><h4 id="1-5-2-代码提交验证"><a href="#1-5-2-代码提交验证" class="headerlink" title="1.5.2. 代码提交验证"></a>1.5.2. 代码提交验证</h4><p>如果我们按照 cz 来规范了提交风格，但是依然有同事通过 <code>git commit</code> 按照不规范的格式提交应该怎么办呢？</p><ul><li><p>我们可以通过 commitlint 来限制提交；</p><p>1.安装 @commitlint/config-conventional 和 @commitlint/cli</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @commitlint/config-conventional @commitlint/cli -D</span><br></pre></td></tr></table></figure><p>2.在根目录创建 commitlint.config.js 文件，配置 commitlint</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;@commitlint/config-conventional&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.使用 husky 生成 commit-msg 文件，验证提交信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/commit-msg &quot;npx --no-install commitlint --edit $1&quot;</span><br></pre></td></tr></table></figure><h2 id="二-第三方库集成"><a href="#二-第三方库集成" class="headerlink" title="二. 第三方库集成"></a>二. 第三方库集成</h2><h3 id="2-1-vue-config-js-配置"><a href="#2-1-vue-config-js-配置" class="headerlink" title="2.1. vue.config.js 配置"></a>2.1. vue.config.js 配置</h3><p>vue.config.js 有三种配置方式：</p><ul><li>方式一：直接通过 CLI 提供给我们的选项来配置：<ul><li>比如 publicPath：配置应用程序部署的子目录（默认是 <code>/</code>，相当于部署在 <code>https://www.my-app.com/</code>）；</li><li>比如 outputDir：修改输出的文件夹；</li></ul></li><li>方式二：通过 configureWebpack 修改 webpack 的配置：<ul><li>可以是一个对象，直接会被合并；</li><li>可以是一个函数，会接收一个 config，可以通过 config 来修改配置；</li></ul></li><li>方式三：通过 chainWebpack 修改 webpack 的配置：<ul><li>是一个函数，会接收一个基于 <a href="https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 的 config 对象，可以对配置进行修改；</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;./build&quot;</span>,</span><br><span class="line">  <span class="comment">// configureWebpack: &#123;</span></span><br><span class="line">  <span class="comment">//   resolve: &#123;</span></span><br><span class="line">  <span class="comment">//     alias: &#123;</span></span><br><span class="line">  <span class="comment">//       views: &#x27;@/views&#x27;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// configureWebpack: (config) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   config.resolve.alias = &#123;</span></span><br><span class="line">  <span class="comment">//     &#x27;@&#x27;: path.resolve(__dirname, &#x27;src&#x27;),</span></span><br><span class="line">  <span class="comment">//     views: &#x27;@/views&#x27;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">&quot;@&quot;</span>, path.resolve(__dirname, <span class="string">&quot;src&quot;</span>))</span><br><span class="line">      .set(<span class="string">&quot;views&quot;</span>, <span class="string">&quot;@/views&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-vue-router-集成"><a href="#2-2-vue-router-集成" class="headerlink" title="2.2. vue-router 集成"></a>2.2. vue-router 集成</h3><p>安装 vue-router 的最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@next</span><br></pre></td></tr></table></figure><p>创建 router 对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: RouteRecordRaw[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/main/main.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/login/login.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>安装 router：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 App.vue 中配置跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-vuex-集成"><a href="#2-3-vuex-集成" class="headerlink" title="2.3. vuex 集成"></a>2.3. vuex 集成</h3><p>安装 vuex：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next</span><br></pre></td></tr></table></figure><p>创建 store 对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(&#123;</span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;coderwhy&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>安装 store：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createApp(App).use(router).use(store).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 App.vue 中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $store.state.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-element-plus-集成"><a href="#2-4-element-plus-集成" class="headerlink" title="2.4. element-plus 集成"></a>2.4. element-plus 集成</h3><p>Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库：</p><ul><li>相信很多同学在 Vue2 中都使用过 element-ui，而 element-plus 正是 element-ui 针对于 vue3 开发的一个 UI 组件库；</li><li>它的使用方式和很多其他的组件库是一样的，所以学会 element-plus，其他类似于 ant-design-vue、NaiveUI、VantUI 都是差不多的；</li></ul><p>安装 element-plus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><h4 id="2-4-1-全局引入"><a href="#2-4-1-全局引入" class="headerlink" title="2.4.1. 全局引入"></a>2.4.1. 全局引入</h4><p>一种引入 element-plus 的方式是全局引入，代表的含义是所有的组件和插件都会被自动注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/lib/theme-chalk/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(router).use(store).use(ElementPlus).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-4-2-局部引入"><a href="#2-4-2-局部引入" class="headerlink" title="2.4.2. 局部引入"></a>2.4.2. 局部引入</h4><p>也就是在开发中用到某个组件对某个组件进行引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/main&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; ElButton &#125; from &quot;element-plus&quot;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElButton,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>但是我们会发现是没有对应的样式的，引入样式有两种方式：</p><ul><li><p>全局引用样式（像之前做的那样）；</p></li><li><p>局部引用样式（通过 babel 的插件）；</p><p>1.安装 babel 的插件：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import -D</span><br></pre></td></tr></table></figure><p>2.配置 babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;import&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&quot;element-plus&quot;</span>,</span><br><span class="line">        <span class="attr">customStyleName</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`element-plus/lib/theme-chalk/<span class="subst">$&#123;name&#125;</span>.css`</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是这里依然有个弊端：</p><ul><li>这些组件我们在多个页面或者组件中使用的时候，都需要导入并且在 components 中进行注册；</li><li>所以我们可以将它们在全局注册一次；</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ElButton,</span><br><span class="line">  ElTable,</span><br><span class="line">  ElAlert,</span><br><span class="line">  ElAside,</span><br><span class="line">  ElAutocomplete,</span><br><span class="line">  ElAvatar,</span><br><span class="line">  ElBacktop,</span><br><span class="line">  ElBadge,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  ElButton,</span><br><span class="line">  ElTable,</span><br><span class="line">  ElAlert,</span><br><span class="line">  ElAside,</span><br><span class="line">  ElAutocomplete,</span><br><span class="line">  ElAvatar,</span><br><span class="line">  ElBacktop,</span><br><span class="line">  ElBadge,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> cpn <span class="keyword">of</span> components) &#123;</span><br><span class="line">  app.component(cpn.name, cpn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-axios-集成"><a href="#2-5-axios-集成" class="headerlink" title="2.5. axios 集成"></a>2.5. axios 集成</h3><p>安装 axios：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>封装 axios：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; AxiosInstance, AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Result &#125; <span class="keyword">from</span> <span class="string">&quot;./types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&quot;/@/store/modules/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYRequest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> instance: AxiosInstance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> options: AxiosRequestConfig;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options: AxiosRequestConfig</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.options = options;</span><br><span class="line">    <span class="built_in">this</span>.instance = axios.create(options);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance.interceptors.request.use(</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = useUserStore().getToken;</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">          config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance.interceptors.response.use(</span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拦截响应的数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.data.data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.data;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.instance</span><br><span class="line">        .request&lt;<span class="built_in">any</span>, AxiosResponse&lt;Result&lt;T&gt;&gt;&gt;(config)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(res <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="built_in">Promise</span>&lt;T&gt;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  patch&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;PATCH&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HYRequest;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
