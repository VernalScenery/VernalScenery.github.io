<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>06 openlayers_OGC 过滤器</title>
      <link href="/2024/07/27/06%20openlayers_OGC%20%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2024/07/27/06%20openlayers_OGC%20%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-空间分析过滤"><a href="#1-空间分析过滤" class="headerlink" title="1 空间分析过滤"></a>1 空间分析过滤</h2><h3 id="1-1-writeGetFeature"><a href="#1-1-writeGetFeature" class="headerlink" title="1.1 writeGetFeature"></a>1.1 writeGetFeature</h3><p>writeGetFeature(options) =&gt; {Node}</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722040696961.png" alt="QQ_1722040696961.png"></p><h4 id="1-1-1-options"><a href="#1-1-1-options" class="headerlink" title="1.1.1 options"></a>1.1.1 options</h4><ul><li>featureNS : 用于功能的命名空间 URI。</li><li>featurePrefix ：功能命名空间的前缀。<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722041000045.png"></li><li>featureTypes：所要访问的图层 Array&lt;(string| <a href="https://openlayers.org/en/latest/apidoc/module-ol_format_WFS.html#~FeatureType">module:ol/format/WFS~FeatureType</a>)&gt;</li><li>srsName：坐标系，如果未提供，则不会在几何图形上设置 srsName 属性</li><li>outputFormat：输出格式</li><li>maxFeatures：要获取的最大要素数。</li><li>geometryName：在 BBOX 过滤器中使用的几何名称<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722041316393.png" alt="QQ_1722041316393.png"></li><li>propertyNames：要序列化的属性名称的可选列表</li><li>viewParams：viewParams GeoServer 供应商参数</li><li>startIndex：用于 WFS 分页的起始索引</li><li>count：分页时要检索的特征数</li><li>bbox：用于 BBOX 过滤器的范围。使用该选项，geometryName 必须设置。</li><li>filter：过滤条件</li><li>resultType：指示应该返回什么响应<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722041529867.png" alt="QQ_1722041529867.png"></li></ul><h3 id="1-2-filter"><a href="#1-2-filter" class="headerlink" title="1.2 filter"></a>1.2 filter</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722041675892.png" alt="QQ_1722041675892.png"></p><h3 id="1-3-bbox"><a href="#1-3-bbox" class="headerlink" title="1.3 bbox"></a>1.3 bbox</h3><blockquote><p>创建一个&lt;BBOX&gt;算子来测试几何值属性是否与固定边界框相交。也是就是通过矩形范围过滤</p></blockquote><h4 id="1-3-1-new-Bbox-geometryName-extent-srsName"><a href="#1-3-1-new-Bbox-geometryName-extent-srsName" class="headerlink" title="1.3.1 new Bbox(geometryName, extent, srsName)"></a>1.3.1 new Bbox(geometryName, extent, srsName)</h4><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>geometryName</code></td><td>string</td><td>Geometry name to use.</td></tr><tr><td><code>extent</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a></td><td>Extent.</td></tr><tr><td><code>srsName</code></td><td>string | undefined</td><td>SRS name. No srsName attribute will be set on geometries when this is not provided.</td></tr></tbody></table><h4 id="1-3-2-代码实现"><a href="#1-3-2-代码实现" class="headerlink" title="1.3.2 代码实现"></a>1.3.2 代码实现</h4><p>注意这里是限制条件进而减少从后台获取的数据量</p><p>而不是从后台获取所有数据之后再进行筛选</p><p>如图：原数据为中国省会行政区划图，这里限制了 bbox</p><p><strong>bbox返回与extent 边界框相交的所有要素</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722048592264.png" alt="QQ_1722048592264.png|686"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, View &#125; <span class="keyword">from</span> <span class="string">&#x27;ol&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; GeoJSON, WFS &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/format&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Bbox <span class="keyword">from</span> <span class="string">&#x27;ol/format/filter/Bbox&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Vector <span class="keyword">as</span> VectorLayer &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/layer&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; OSM, Vector <span class="keyword">as</span> VectorSource &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/source&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 一个长方形的geojson</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> geojson = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">features</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">properties</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">geometry</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">coordinates</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">111.86749700694361</span>, <span class="number">29.555970757477</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">111.86749700694361</span>, <span class="number">27.26534781129864</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">116.68082942658503</span>, <span class="number">27.26534781129864</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">116.68082942658503</span>, <span class="number">29.555970757477</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">111.86749700694361</span>, <span class="number">29.555970757477</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="string">&#x27;Polygon&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> geoJSON = <span class="keyword">new</span> GeoJSON();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> features = geoJSON.readFeatures(geojson);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> geometry = features[<span class="number">0</span>].getGeometry();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 生成获取要素的请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addFilterFeature = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vectorSource,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(vectorLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">maxFeatures</span>: <span class="number">200</span>, <span class="comment">//最大请求数量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//bbox的空间过滤，当前的这个范围和要素数据有相交的就返回，geometryName必须指定</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//bbox: [110.41259765625,  21.616579336740603,  117.39990234375, 24.647017162630366],</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">filter</span>: <span class="keyword">new</span> Bbox(<span class="string">&#x27;geom&#x27;</span>, geometry?.getExtent() <span class="keyword">as</span> number[], <span class="string">&#x27;EPSG:4326&#x27;</span>), <span class="comment">// bbox返回与extent 边界框相交的所有要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 发送post请求获取图层要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  fetch(<span class="string">&#x27;http://localhost:8080/geoserver/wfs&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">body</span>: <span class="keyword">new</span> XMLSerializer().serializeToString(featureRequest), <span class="comment">//前端构建的xml使用xml的序列化器，发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//将响应的数据转成json</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response.json();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    .then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(json);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//将响应的数据转成geojson之后读取要素数据，</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> features = <span class="keyword">new</span> GeoJSON().readFeatures(json);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      vectorSource.addFeatures(features);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//将视图适配到当前返回的数据源的范围</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.getView().fit(vectorSource.getExtent());</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> raster = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(), <span class="comment">//加载OpenStreetMap</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>], <span class="comment">//视图中心位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//指定投影</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">7</span>, <span class="comment">//缩放到的级别</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [raster],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 添加长方要素的图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vector = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> layer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vector,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  vector.addFeatures(features);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(layer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addFilterFeature();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-contains"><a href="#1-4-contains" class="headerlink" title="1.4 contains"></a>1.4 contains</h3><blockquote><p>创建一个&lt;Contains&gt;运算符来测试几何值属性是否包含给定几何。</p></blockquote><h4 id="1-4-1-option"><a href="#1-4-1-option" class="headerlink" title="1.4.1 option"></a>1.4.1 option</h4><blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722046366223.png" alt="QQ_1722046366223.png"></p></blockquote><h4 id="1-4-2-代码实现"><a href="#1-4-2-代码实现" class="headerlink" title="1.4.2 代码实现"></a>1.4.2 代码实现</h4><p><strong>contains返回完全包含给定几何的要素</strong></p><p>注意与 bbox 的区别：这里之所以没得到要素，是因为没有要素完全包含给定几何</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722048560328.png" alt="QQ_1722048560328.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">    <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">    <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">    <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">    <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">    <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">    <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">    <span class="attr">maxFeatures</span>: <span class="number">200</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">    <span class="attr">filter</span>: contains(<span class="string">&#x27;geom&#x27;</span>, geometry!), <span class="comment">// contains返回完全包含给定几何的要素</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="1-5-intersects"><a href="#1-5-intersects" class="headerlink" title="1.5 intersects"></a>1.5 intersects</h3><blockquote><p>创建一个&lt;Intersects&gt;运算符来测试几何值属性是否与给定几何相交。</p></blockquote><h4 id="1-5-1-option"><a href="#1-5-1-option" class="headerlink" title="1.5.1 option"></a>1.5.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722049002747.png" alt="QQ_1722049002747.png"></p><h4 id="1-5-2-代码实现"><a href="#1-5-2-代码实现" class="headerlink" title="1.5.2 代码实现"></a>1.5.2 代码实现</h4><p><strong>intersects返回与给定几何相交的要素</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722049710592.png" alt="QQ_1722049710592.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">200</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: intersects(<span class="string">&#x27;geom&#x27;</span>, geometry!), <span class="comment">// intersects返回与给定几何相交的要素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-6-disjoint"><a href="#1-6-disjoint" class="headerlink" title="1.6 disjoint"></a>1.6 disjoint</h3><blockquote><p>创建一个&lt;Disjoint&gt;运算符来测试几何值属性是否与给定几何体不相交。</p></blockquote><h4 id="1-6-1-option"><a href="#1-6-1-option" class="headerlink" title="1.6.1 option"></a>1.6.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722049859123.png" alt="QQ_1722049859123.png"></p><h4 id="1-6-2-代码实现"><a href="#1-6-2-代码实现" class="headerlink" title="1.6.2 代码实现"></a>1.6.2 代码实现</h4><p><strong>disjoint返回与给定几何体不相交的元素</strong></p><p>但是官网的 api 里好像并没有这个方法</p><p>故这里使用<code>filter: not(intersects(&#39;geom&#39;, geometry!))</code>实现</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722050469534.png" alt="QQ_1722050469534.png|701"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">    <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">    <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">    <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">    <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">    <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">    <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">    <span class="attr">maxFeatures</span>: <span class="number">200</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">    <span class="attr">filter</span>: not(intersects(<span class="string">&#x27;geom&#x27;</span>, geometry!)),</span><br><span class="line">    <span class="comment">// filter: disjoint(&#x27;geom&#x27;, geometry!), // disjoint返回与给定几何体不相交的元素</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="1-7-dwithin"><a href="#1-7-dwithin" class="headerlink" title="1.7 dwithin"></a>1.7 dwithin</h3><blockquote><p>创建一个&lt;DWithin&gt;运算符来测试几何值属性是否在给定几何的距离内。</p></blockquote><h4 id="1-7-1-option"><a href="#1-7-1-option" class="headerlink" title="1.7.1 option"></a>1.7.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722050633136.png" alt="QQ_1722050633136.png"></p><h4 id="1-7-2-代码实现"><a href="#1-7-2-代码实现" class="headerlink" title="1.7.2 代码实现"></a>1.7.2 代码实现</h4><p><strong>dwithin返回给定几何的距离内的要素</strong><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722051325362.png" alt="QQ_1722051325362.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">200</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: dwithin(<span class="string">&#x27;geom&#x27;</span>, geometry!, <span class="number">5</span>, <span class="string">&#x27;m&#x27;</span>), <span class="comment">// dwithin返回给定几何的距离内的要素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-8-within"><a href="#1-8-within" class="headerlink" title="1.8 within"></a>1.8 within</h3><blockquote><p>创建一个&lt;Within&gt;运算符来测试几何值属性是否在给定几何体中。</p></blockquote><h4 id="1-8-1-option"><a href="#1-8-1-option" class="headerlink" title="1.8.1 option"></a>1.8.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722060543153.png" alt="QQ_1722060543153.png"></p><h4 id="1-8-2-代码实现"><a href="#1-8-2-代码实现" class="headerlink" title="1.8.2 代码实现"></a>1.8.2 代码实现</h4><p><strong>within返回在给定几何体中的要素</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722063585636.png" alt="QQ_1722063585636.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">200</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: within(<span class="string">&#x27;geom&#x27;</span>, geometry!), <span class="comment">// within返回给定几何的距离内的要素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-属性过滤"><a href="#2-属性过滤" class="headerlink" title="2 属性过滤"></a>2 属性过滤</h2><p>本案例所用图层</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064057971.png" alt="QQ_1722064057971.png|746"></p><h3 id="2-1-between"><a href="#2-1-between" class="headerlink" title="2.1 between"></a>2.1 between</h3><blockquote><p>返回属性值在某一个范围的数据</p></blockquote><h4 id="2-1-1-option"><a href="#2-1-1-option" class="headerlink" title="2.1.1 option"></a>2.1.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722063807895.png" alt="QQ_1722063807895.png"></p><h4 id="2-1-2-代码实现"><a href="#2-1-2-代码实现" class="headerlink" title="2.1.2 代码实现"></a>2.1.2 代码实现</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064012574.png" alt="QQ_1722064012574.png|785"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: between(<span class="string">&#x27;display&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>), <span class="comment">// 属性过滤，过滤出指定属性在指定上下界的范围内，返回该要素数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-during"><a href="#2-2-during" class="headerlink" title="2.2 during"></a>2.2 during</h3><blockquote><p>返回在时间范围内的数据，时间格式必须是ISO-8601</p></blockquote><h4 id="2-2-1-option"><a href="#2-2-1-option" class="headerlink" title="2.2.1 option"></a>2.2.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064198472.png" alt="QQ_1722064198472.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: during(<span class="string">&#x27;data_time&#x27;</span>, <span class="string">&#x27;2022-04-05T01:44:15.416Z&#x27;</span>, <span class="string">&#x27;2022-04-07T01:44:15.416Z&#x27;</span>), <span class="comment">//查询时间字段在指定时间范围内的数据，时间格式必须是ISO-8601</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-equalTo、notEqualTo"><a href="#2-3-equalTo、notEqualTo" class="headerlink" title="2.3 equalTo、notEqualTo"></a>2.3 equalTo、notEqualTo</h3><blockquote><p>返回属性值等于某值的数据<br>返回属性值不等于某值的数据</p></blockquote><h4 id="2-3-1-option"><a href="#2-3-1-option" class="headerlink" title="2.3.1 option"></a>2.3.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064546159.png" alt="QQ_1722064546159.png"></p><h4 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064465197.png" alt="QQ_1722064465197.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: equalTo(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;安徽&#x27;</span>), <span class="comment">//查询某个字段等于某个名称</span></span><br><span class="line">  <span class="comment">// filter: notEqualTo(&#x27;name&#x27;, &#x27;安徽&#x27;), //查询某个字段不等于某个名称</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-4-greaterThan、greaterThanOrEqualTo-、lessThan、-lessThanOrEqualTo"><a href="#2-4-greaterThan、greaterThanOrEqualTo-、lessThan、-lessThanOrEqualTo" class="headerlink" title="2.4 greaterThan、greaterThanOrEqualTo 、lessThan、#### lessThanOrEqualTo"></a>2.4 greaterThan、greaterThanOrEqualTo 、lessThan、#### lessThanOrEqualTo</h3><blockquote><p>返回属性值大于某值的数据<br>返回属性值大于等于某值的数据<br>返回属性值小于某值的数据<br>返回属性值小于等于某值的数据</p></blockquote><h4 id="2-4-1-option"><a href="#2-4-1-option" class="headerlink" title="2.4.1 option"></a>2.4.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064780586.png" alt="QQ_1722064780586.png"></p><h4 id="2-4-2-代码实现"><a href="#2-4-2-代码实现" class="headerlink" title="2.4.2 代码实现"></a>2.4.2 代码实现</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722064845181.png" alt="QQ_1722064845181.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="comment">//filter: new greaterThan(&#x27;OBJECTID&#x27;,500)//查询某个字段大于某个值,</span></span><br><span class="line">  <span class="attr">filter</span>: greaterThanOrEqualTo(<span class="string">&#x27;display&#x27;</span>, <span class="number">2</span>), <span class="comment">//查询某个字段大于或等于某个值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-5-isNull"><a href="#2-5-isNull" class="headerlink" title="2.5 isNull"></a>2.5 isNull</h3><blockquote><p>返回某字段为空的数据</p></blockquote><h4 id="2-5-1-option"><a href="#2-5-1-option" class="headerlink" title="2.5.1 option"></a>2.5.1 option</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722065035148.png" alt="QQ_1722065035148.png"></p><h4 id="2-5-2-代码实现"><a href="#2-5-2-代码实现" class="headerlink" title="2.5.2 代码实现"></a>2.5.2 代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: isNull(<span class="string">&#x27;name&#x27;</span>), <span class="comment">// 返回某个字段值是null的数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-逻辑运算"><a href="#3-逻辑运算" class="headerlink" title="3 逻辑运算"></a>3 逻辑运算</h2><h3 id="3-1-like"><a href="#3-1-like" class="headerlink" title="3.1 like"></a>3.1 like</h3><blockquote><p>模糊查询</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: like(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;广*&#x27;</span>), <span class="comment">//模糊查询某个字段,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722066333717.png" alt="QQ_1722066333717.png"></p><h3 id="3-2-and"><a href="#3-2-and" class="headerlink" title="3.2 and"></a>3.2 and</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">    <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">    <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">    <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">    <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">    <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">    <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">    <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">    <span class="attr">filter</span>: and(like(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;广*&#x27;</span>), lessThan(<span class="string">&#x27;display&#x27;</span>, <span class="number">5</span>)), <span class="comment">//and的逻辑运算必须同时满足两个条件</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722066461084.png" alt="QQ_1722066461084.png"></p><h3 id="3-3-not"><a href="#3-3-not" class="headerlink" title="3.3 not"></a>3.3 not</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="attr">filter</span>: not(like(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;广*&#x27;</span>)), <span class="comment">// not的逻辑运算</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722066595905.png" alt="QQ_1722066595905.png"></p><h3 id="3-4-or"><a href="#3-4-or" class="headerlink" title="3.4 or"></a>3.4 or</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> featureRequest = <span class="keyword">new</span> WFS().writeGetFeature(&#123;</span><br><span class="line">  <span class="attr">srsName</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//坐标系</span></span><br><span class="line">  <span class="attr">featureNS</span>: <span class="string">&#x27;http://www.dtq&#x27;</span>, <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span><br><span class="line">  <span class="attr">featurePrefix</span>: <span class="string">&#x27;DTQ&#x27;</span>, <span class="comment">//工作区的名称</span></span><br><span class="line">  <span class="attr">featureTypes</span>: [<span class="string">&#x27;map&#x27;</span>], <span class="comment">//所要访问的图层</span></span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="comment">//数据输出格式</span></span><br><span class="line">  <span class="attr">geometryName</span>: <span class="string">&#x27;geom&#x27;</span>, <span class="comment">//几何体的名称</span></span><br><span class="line">  <span class="attr">maxFeatures</span>: <span class="number">20</span>, <span class="comment">//最大请求数量</span></span><br><span class="line">  <span class="comment">//filter:  equalTo(&#x27;FID&#x27;,1)//查询某个字段等于某个名称</span></span><br><span class="line">  <span class="attr">filter</span>: or(like(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;广*&#x27;</span>), lessThan(<span class="string">&#x27;display&#x27;</span>, <span class="number">5</span>)), <span class="comment">//or 的逻辑运算满足条件之一即可</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722066707726.png" alt="QQ_1722066707726.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式与开发实践</title>
      <link href="/2024/07/27/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2024/07/27/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>有设计模式的实现都遵循一条原则，即“找出程序中变化的地方，并将变化封装起来”</p><p>一个程序的设计总是可以分为可变的部分和不变的部分。当我们找出可变的部分，并且把这些部分封装起来，那么剩下的就是不变和稳定的部分</p><p>锤子理论：当我们有了一把锤子，看什么都是钉子。</p><p>分辨模式的关键是意图而不是结构</p><h2 id="2-第1章-面向对象的JavaScript"><a href="#2-第1章-面向对象的JavaScript" class="headerlink" title="2 第1章 面向对象的JavaScript"></a>2 第1章 面向对象的JavaScript</h2><h3 id="2-1-动态类型语言和鸭子类型"><a href="#2-1-动态类型语言和鸭子类型" class="headerlink" title="2.1 动态类型语言和鸭子类型"></a>2.1 动态类型语言和鸭子类型</h3><p>程语言按照数据类型大体可以分为两类，一类是静态类型语言，另一类是动态类型语言。</p><p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。</p><p><strong>鸭子类型</strong>指导我们只关注对象的行为，而不关注对象本身，也就是关注HAS-A，而不是IS-A。</p><p>向上转型(Upcasting)是指将一个子类对象转换成父类对象的过程。在面向对象编程中，父类是子类的通用类型，因此可以将子类对像赋值给父类变量，这就是向上转型。</p><p>面向接口编程</p><h3 id="2-2-多态"><a href="#2-2-多态" class="headerlink" title="2.2 多态"></a>2.2 多态</h3><p>“多态”一词源于希腊文polymorphism，拆开来看是poly（复数）+ morph（形态）+ ism，从字面上我们可以理解为复数形态。</p><p>多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeSound = <span class="function"><span class="keyword">function</span> (<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Duck) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;嘎嘎嘎&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Chicken) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;咯咯咯&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Duck = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> Chicken = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">makeSound(<span class="keyword">new</span> Duck()); <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Chicken()); <span class="comment">// 咯咯咯</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但加入新动物，需要修改makeSound</p><p>修改代码总是危险的，修改的地方越多，程序出错的可能性就越大，</p><p>多态背后的思想是将“做什么”和“谁去做以及怎样去做”分离开来，也就是将“不变的事物”与“可能改变的事物”分离开来。在</p><h4 id="2-2-1-对象的多态性"><a href="#2-2-1-对象的多态性" class="headerlink" title="2.2.1 对象的多态性"></a>2.2.1 对象的多态性</h4><p>我们先把不变的部分隔离出来，那就是所有的动物都会发出叫声：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeSound = <span class="function"><span class="keyword">function</span>(<span class="params"> animal </span>)</span>&#123;</span><br><span class="line">animal.sound();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后后把可变的部分各自封装起来，我们刚才谈到的多态性实际上指的是对象的多态性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Duck = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Duck.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;嘎嘎嘎&#x27;</span> );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Chicken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Chicken.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;咯咯咯&#x27;</span> );</span><br><span class="line">&#125;;</span><br><span class="line">makeSound( <span class="keyword">new</span> Duck() ); <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound( <span class="keyword">new</span> Chicken() ); <span class="comment">// 咯咯咯</span></span><br></pre></td></tr></table></figure><p>此时，再增加一只狗时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Dog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Dog.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;汪汪汪&#x27;</span> );</span><br><span class="line">&#125;;</span><br><span class="line">makeSound( <span class="keyword">new</span> Dog() ); <span class="comment">// 汪汪汪</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-类型检查和多态"><a href="#2-2-2-类型检查和多态" class="headerlink" title="2.2.2 类型检查和多态"></a>2.2.2 类型检查和多态</h4><p>以Java为例，由于在代码编译时要进行严格的类型检查，所以不能给变量赋予不同类型的值，这种类型检查有时候会让代码显得僵硬。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123; <span class="comment">//鸭子类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println( <span class="string">&quot;嘎嘎嘎&quot;</span> ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123; <span class="comment">// 鸡类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>&#123; </span><br><span class="line">System.out.println( <span class="string">&quot;咯咯咯&quot;</span> ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalSound</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">( Duck duck )</span></span>&#123; <span class="comment">// (1) </span></span><br><span class="line">duck.makeSound(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">AnimalSound animalSound = <span class="keyword">new</span> AnimalSound(); </span><br><span class="line">Duck duck = <span class="keyword">new</span> Duck(); </span><br><span class="line">animalSound.makeSound( duck ); <span class="comment">// 输出：嘎嘎嘎 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经顺利地让鸭子可以发出叫声，但如果现在想让鸡也叫唤起来，我们发现这是一件不可能实现的事情。因为(1)处AnimalSound类的makeSound方法，被我们规定为只能接受Duck类型的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123; </span><br><span class="line">AnimalSound animalSound = <span class="keyword">new</span> AnimalSound(); </span><br><span class="line">Chicken chicken = <span class="keyword">new</span> Chicken(); </span><br><span class="line">animalSound.makeSound( chicken ); <span class="comment">// 报错，只能接受Duck类型的参数 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解决这一问题，静态类型的面向对象语言通常被设计为可以向上转型：当给一个类变量赋值时，这个变量的类型既可以使用这个类本身，也可以使用这个类的超类。</p><p>当Duck对象和Chicken对象的类型都被隐藏在超类型Animal身后，Duck对象和Chicken对象就能被交换使用，这是让对象表现出多态性的必经之路，而多态性的表现正是实现众多设计模式的目标。</p><h4 id="2-2-3-使用继承得到多态效果"><a href="#2-2-3-使用继承得到多态效果" class="headerlink" title="2.2.3 使用继承得到多态效果"></a>2.2.3 使用继承得到多态效果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>; <span class="comment">//抽象方法 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; <span class="comment">//鸭子类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println( <span class="string">&quot;嘎嘎嘎&quot;</span> ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; <span class="comment">// 鸡类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>&#123; </span><br><span class="line">System.out.println( <span class="string">&quot;咯咯咯&quot;</span> ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Animal duck = <span class="keyword">new</span> Duck();</span><br><span class="line">Animal chicken = <span class="keyword">new</span> Chicken();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalSound</span></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">( Animal animal )</span></span>&#123; <span class="comment">//接受Animal类型的参数 </span></span><br><span class="line">animal.makeSound(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">AnimalSound animalSound= <span class="keyword">new</span> AnimalSound (); </span><br><span class="line">Animal duck = <span class="keyword">new</span> Duck(); </span><br><span class="line">Animal chicken = <span class="keyword">new</span> Chicken(); </span><br><span class="line">animalSound.makeSound( duck ); <span class="comment">//输出嘎嘎嘎 </span></span><br><span class="line">animalSound.makeSound( chicken ); <span class="comment">//输出咯咯咯 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-2-4-JavaScript的多态"><a href="#2-2-4-JavaScript的多态" class="headerlink" title="2.2.4 JavaScript的多态"></a>2.2.4 JavaScript的多态</h4><p>从前面的讲解我们得知，多态的思想实际上是把“做什么”和“谁去做”分离开来，要实现这一点，归根结底先要消除类型之间的耦合关系。如果类型之间的耦合关系没有被消除，那么我们在makeSound方法中指定了发出叫声的对象是某个类型，它就不可能再被替换为另外一个类型。在Java中，可以通过向上转型来实现多态。</p><p>而JavaScript的变量类型在运行期是可变的。一个JavaScript对象，既可以表示Duck类型的对象，又可以表示Chicken类型的对象，这意味着JavaScript对象的多态性是与生俱来的。</p><h4 id="2-2-5-多态在面向对象程序设计中的作用"><a href="#2-2-5-多态在面向对象程序设计中的作用" class="headerlink" title="2.2.5 多态在面向对象程序设计中的作用"></a>2.2.5 多态在面向对象程序设计中的作用</h4><p>Martin Fowler在《重构：改善既有代码的设计》里写到：</p><p>多态的最根本好处在于，你不必再向对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为——你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p><p>换句话说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><p>Martin Fowler的话可以用下面这个例子很好地诠释：在电影的拍摄现场，当导演喊出“action”时，主角开始背台词，照明师负责打灯光，后面的群众演员假装中枪倒地，道具师往镜头里撒上雪花。在得到同一个消息时，每个对象都知道自己应该做什么。如果不利用对象的多态性，而是用面向过程的方式来编写这一段代码，那么相当于在电影开始拍摄之后，导演每次都要走到每个人的面前，确认它们的职业分工（类型），然后告诉他们要做什么。如果映射到程序中，那么程序中将充斥着条件分支语句。</p><p>每个对象应该做什么，已经成为了该对象的一个方法，被安装在对象的内部，每个对象负责它们自己的行为。所以这些对象可以根据同一个消息，有条不紊地分别进行各自的工作。</p><p>将行为分布在各个对象中，并让这些对象各自负责自己的行为，这正是面向对象设计的优点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> googleMap = &#123;</span><br><span class="line"><span class="attr">show</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始渲染谷歌地图&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> baiduMap = &#123;</span><br><span class="line"><span class="attr">show</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始渲染百度地图&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">&quot;google&quot;</span>) &#123;</span><br><span class="line">googleMap.show();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;baidu&quot;</span>) &#123;</span><br><span class="line">baiduMap.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">renderMap(<span class="string">&quot;google&quot;</span>); <span class="comment">// 输出：开始渲染谷歌地图</span></span><br><span class="line">renderMap(<span class="string">&quot;baidu&quot;</span>); <span class="comment">// 输出：开始渲染百度地图</span></span><br></pre></td></tr></table></figure><p>一旦需要替换搜搜地图，那无疑必须得改动renderMap函数，继续往里面堆砌条件分支语句。</p><p>我们还是先把程序中相同的部分抽象出来，那就是显示某个地图：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (map.show <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">map.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">renderMap(googleMap); <span class="comment">// 输出：开始渲染谷歌地图</span></span><br><span class="line">renderMap(baiduMap); <span class="comment">// 输出：开始渲染百度地图</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象的多态性提示我们，“做什么”和“怎么去做”是可以分开的，即使以后增加了搜搜地图，renderMap函数仍然不需要做任何改变，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sosoMap = &#123;</span><br><span class="line"><span class="attr">show</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始渲染搜搜地图&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderMap(sosoMap); <span class="comment">// 输出：开始渲染搜搜地图</span></span><br></pre></td></tr></table></figure><h4 id="2-2-6-设计模式与多态"><a href="#2-2-6-设计模式与多态" class="headerlink" title="2.2.6 设计模式与多态"></a>2.2.6 设计模式与多态</h4><p>在JavaScript这种将函数作为一等对象的语言中，函数本身也是对象，函数用来封装行为并且能够被四处传递。当我们对一些函数发出“调用”的消息时，这些函数会返回不同的执行结果，这是“多态性”的一种体现，也是很多设计模式在JavaScript中可以用高阶函数来代替实现的原因。</p><h3 id="2-3-封装"><a href="#2-3-封装" class="headerlink" title="2.3 封装"></a>2.3 封装</h3><p>封装的目的是将信息隐藏。一般而言，我们讨论的封装是封装数据和封装实现。这一节将讨论更广义的封装，不仅包括封装数据和封装实现，还包括封装类型和封装变化。</p><h4 id="2-3-1-封装数据"><a href="#2-3-1-封装数据" class="headerlink" title="2.3.1 封装数据"></a>2.3.1 封装数据</h4><p>private、public、protected等</p><p>但JavaScript并没有提供对这些关键字的支持，我们只能依赖变量的作用域来实现封装特性，而且只能模拟出public和private这两种封装性。除了ECMAScript 6中提供的let之外，一般我们通过函数来创建作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> __name = <span class="string">&#x27;sven&#x27;</span>; <span class="comment">// 私有（private）变量</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 公开（public）方法</span></span><br><span class="line"><span class="keyword">return</span> __name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log( myObject.getName() ); <span class="comment">// 输出：sven</span></span><br><span class="line"><span class="built_in">console</span>.log( myObject.__name ) <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-封装实现"><a href="#2-3-2-封装实现" class="headerlink" title="2.3.2 封装实现"></a>2.3.2 封装实现</h4><p>从封装实现细节来讲，封装使得对象内部的变化对其他对象而言是透明的，也就是不可见的。对象对它自己的行为负责。其他对象或者用户都不关心它的内部实现。</p><p><strong>封装使得对象之间的耦合变松散，对象之间只通过暴露的API接口来通信。 当我们修改一个对象时，可以随意地修改它的内部实现，只要对外的接口没有变化，就不会影响到程序的其他功能。</strong></p><h4 id="2-3-3-封装类型"><a href="#2-3-3-封装类型" class="headerlink" title="2.3.3 封装类型"></a>2.3.3 封装类型</h4><p>封装类型是静态类型语言中一种重要的封装方式。一般而言，封装类型是通过抽象类和接口来进行的。把对象的真正类型隐藏在抽象类或者接口之后，相比对象的类型，客户更关心对象的行为。</p><h4 id="2-3-4-封装变化"><a href="#2-3-4-封装变化" class="headerlink" title="2.3.4 封装变化 ?"></a>2.3.4 封装变化 ?</h4><p>《设计模式》一书中共归纳总结了23种设计模式。从意图上区分，这23种设计模式分别被划分为创建型模式、结构型模式和行为型模式。</p><p>拿创建型模式来说，要创建一个对象，是一种抽象行为，而具体创建什么对象则是可以变化的，创建型模式的目的就是封装创建对象的变化。而结构型模式封装的是对象之间的组合关系。行为型模式封装的是对象的行为变化。</p><p>通过封装变化的方式，把系统中稳定不变的部分和容易变化的部分隔离开来，在系统的演变过程中，我们只需要替换那些容易变化的部分，如果这些部分是已经封装好的，替换起来也相对容易。这可以最大程度地保证程序的稳定性和可扩展性。</p><h3 id="原型模式和基于原型继承的JavaScript对象系统"><a href="#原型模式和基于原型继承的JavaScript对象系统" class="headerlink" title="原型模式和基于原型继承的JavaScript对象系统"></a>原型模式和基于原型继承的JavaScript对象系统</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> JS </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 openlayers_style 样式配置</title>
      <link href="/2024/07/27/07%20openlayers_style%20%E6%A0%B7%E5%BC%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/07/27/07%20openlayers_style%20%E6%A0%B7%E5%BC%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Style"><a href="#1-Style" class="headerlink" title="1 Style"></a>1 Style</h2><h3 id="1-1-new-Style-options"><a href="#1-1-new-Style-options" class="headerlink" title="1.1 new Style(options)"></a>1.1 new Style(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>geometry</code></td><td>string | <a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_Geometry-Geometry.html">Geometry</a> | <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~GeometryFunction">GeometryFunction</a> | undefined</td><td>Feature property or geometry or function returning a geometry to render for this style.</td></tr><tr><td><code>fill</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Fill-Fill.html">Fill</a> | undefined</td><td>Fill style.</td></tr><tr><td><code>image</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Image-ImageStyle.html">ImageStyle</a> | undefined</td><td>Image style.</td></tr><tr><td><code>renderer</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~RenderFunction">RenderFunction</a> | undefined</td><td>Custom renderer. When configured, <code>fill</code>, <code>stroke</code> and <code>image</code> will be ignored, and the provided function will be called with each render frame for each geometry.</td></tr><tr><td><code>hitDetectionRenderer</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~RenderFunction">RenderFunction</a> | undefined</td><td>Custom renderer for hit detection. If provided will be used in hit detection rendering.</td></tr><tr><td><code>stroke</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Stroke-Stroke.html">Stroke</a> | undefined</td><td>Stroke style.</td></tr><tr><td><code>text</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Text-Text.html">Text</a> | undefined</td><td>Text style.</td></tr><tr><td><code>zIndex</code></td><td>number | undefined</td><td>Z index.</td></tr></tbody></table><h3 id="1-2-Methods"><a href="#1-2-Methods" class="headerlink" title="1.2 Methods"></a>1.2 Methods</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722067935089.png" alt="QQ_1722067935089.png"></p><h3 id="1-3-案例1-使用图标标注点"><a href="#1-3-案例1-使用图标标注点" class="headerlink" title="1.3 案例1 - 使用图标标注点"></a>1.3 案例1 - 使用图标标注点</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722071016756.png" alt="QQ_1722071016756.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Feature &#125; <span class="keyword">from</span> <span class="string">&#x27;ol&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; GeoJSON &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/format&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Point &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, Icon, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> CircleStyle <span class="keyword">from</span> <span class="string">&#x27;ol/style/Circle&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Text <span class="keyword">from</span> <span class="string">&#x27;ol/style/Text.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addFeatureStyle = <span class="keyword">async</span> () =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vectorSource = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vectorSource,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(vectorLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> json = <span class="keyword">await</span> res.json();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> features = <span class="keyword">new</span> GeoJSON().readFeatures(json);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  vectorSource.addFeatures(features);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//对每一个要素对象都设置一个单独的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">for</span> (<span class="keyword">const</span> feature <span class="keyword">of</span> features) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    feature.setStyle(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123; <span class="attr">color</span>: <span class="string">&#x27;#4e98f444&#x27;</span> &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> extent = feature.getGeometry()?.getExtent();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (extent) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> center = [(extent[<span class="number">0</span>] + extent[<span class="number">2</span>]) / <span class="number">2</span>, (extent[<span class="number">1</span>] + extent[<span class="number">3</span>]) / <span class="number">2</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> name = feature.get(<span class="string">&#x27;name&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(name);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (center &amp;&amp; name) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//构建一个点要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> pointFeature = <span class="keyword">new</span> Feature(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">geometry</span>: <span class="keyword">new</span> Point(center), <span class="comment">//几何信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//给点设置要素样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        pointFeature.setStyle(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">image</span>: <span class="keyword">new</span> Icon(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">//设置图片是icon</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">src</span>: <span class="string">&#x27;/Assets/Images/icon.png&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">text</span>: <span class="keyword">new</span> Text(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">text</span>: name, <span class="comment">//文本内容//设置该点要素的文本信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123; <span class="attr">color</span>: <span class="string">&#x27;#ff3300&#x27;</span> &#125;), <span class="comment">//文本填充样式（即文字颜色）&#125;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">zIndex</span>: <span class="number">9999</span>, <span class="comment">//设置css的z-index层级关系</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        );</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//重新克隆一个点要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> clone = pointFeature.clone();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//重新给点要素设置样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        clone.setStyle(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">image</span>: <span class="keyword">new</span> CircleStyle(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">radius</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">color</span>: <span class="string">&#x27;rgba(255,192,203,0.6)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">width</span>: <span class="number">30</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//将两个要素数据添加到数据中</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        vectorSource.addFeatures([pointFeature, clone]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//当前视口适配到数据源的范围</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.getView().fit(vectorSource.getExtent());</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addFeatureStyle();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-案例2-带箭头的线"><a href="#1-4-案例2-带箭头的线" class="headerlink" title="1.4 案例2 - 带箭头的线"></a>1.4 案例2 - 带箭头的线</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722072335256.png" alt="QQ_1722072335256.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Feature &#125; <span class="keyword">from</span> <span class="string">&#x27;ol&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; GeoJSON &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/format&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Point, type LineString &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Icon, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; StyleLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style/Style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 线要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> geojson = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">features</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">properties</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">geometry</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="string">&#x27;LineString&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">coordinates</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.35384368896484</span>, <span class="number">23.234721227640602</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.35041046142578</span>, <span class="number">23.240084246841175</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.35418701171874</span>, <span class="number">23.24639340521435</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.3572769165039</span>, <span class="number">23.25837998393433</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.36002349853516</span>, <span class="number">23.26531908958533</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.36242675781249</span>, <span class="number">23.27541168916241</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.36277008056639</span>, <span class="number">23.29307189825664</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.3682632446289</span>, <span class="number">23.307576745727502</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.38062286376953</span>, <span class="number">23.33216830631147</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.41461181640625</span>, <span class="number">23.38070750603324</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.41976165771484</span>, <span class="number">23.40591566256524</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [<span class="number">113.44104766845703</span>, <span class="number">23.447813597872535</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature: Feature</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> styles: StyleLike = [];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  styles.push(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//第一部分返回的线条样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;#35ff33&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">32</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//获取到每个要素的几何数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> geometry = feature.getGeometry() <span class="keyword">as</span> LineString;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (geometry) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//遍历线要素的每个段</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    geometry.forEachSegment(<span class="function">(<span class="params">start, end</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> dx = end[<span class="number">0</span>] - start[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> dy = end[<span class="number">1</span>] - start[<span class="number">1</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(dx, dy);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//计算出图标旋转斜率</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//通过斜率计算出该斜率的度数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> rotation = <span class="built_in">Math</span>.atan2(dy, dx);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//添加一个点位置的图标样式，方向箭头</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      styles.push(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">geometry</span>: <span class="keyword">new</span> Point(end), <span class="comment">//指定样式geometry是点，然后给点设置图片的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">image</span>: <span class="keyword">new</span> Icon(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">src</span>: <span class="string">&#x27;/Assets/Images/arrow.png&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">rotateWithView</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">rotation</span>: -rotation,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> styles;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addVectorLayer = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vectorSource = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> features = <span class="keyword">new</span> GeoJSON().readFeatures(geojson);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  vectorSource.addFeatures(features);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vectorSource,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">style</span>: styleFunction <span class="keyword">as</span> StyleLike, <span class="comment">//注意这里返回的是一个样式数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(vectorLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addVectorLayer();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-ImageStyle-抽象基类"><a href="#2-ImageStyle-抽象基类" class="headerlink" title="2 ImageStyle - 抽象基类"></a>2 ImageStyle - 抽象基类</h2><blockquote><p>A base class used for creating subclasses and not instantiated in apps. Base class for <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Icon-Icon.html"><code>Icon</code></a>, <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Circle-CircleStyle.html"><code>CircleStyle</code></a> and <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_RegularShape-RegularShape.html"><code>RegularShape</code></a>.</p></blockquote><h3 id="2-1-new-ImageStyle-options"><a href="#2-1-new-ImageStyle-options" class="headerlink" title="2.1 new ImageStyle(options)"></a>2.1 new ImageStyle(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>opacity</code></td><td>number</td><td>Opacity.</td></tr><tr><td><code>rotateWithView</code></td><td>boolean</td><td>If the image should get rotated with the view.</td></tr><tr><td><code>rotation</code></td><td>number</td><td>Rotation.</td></tr><tr><td><code>scale</code></td><td>number | <a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a></td><td>Scale.</td></tr><tr><td><code>displacement</code></td><td>Array.<number></td><td>Displacement.</td></tr><tr><td><code>declutterMode</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~DeclutterMode">DeclutterMode</a></td><td>Declutter mode: <code>declutter</code>, <code>obstacle</code>, <code>none</code>.</td></tr></tbody></table><h3 id="2-2-Subclasses"><a href="#2-2-Subclasses" class="headerlink" title="2.2 Subclasses"></a>2.2 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Icon-Icon.html">Icon</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_RegularShape-RegularShape.html">RegularShape</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Circle-CircleStyle.html">CircleStyle</a></li></ul></li></ul><h2 id="3-fill"><a href="#3-fill" class="headerlink" title="3 fill"></a>3 fill</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722067998425.png" alt="QQ_1722067998425.png"></p><p>没啥好说的</p><h2 id="4-icon"><a href="#4-icon" class="headerlink" title="4 icon"></a>4 icon</h2><h3 id="4-1-new-Icon-options"><a href="#4-1-new-Icon-options" class="headerlink" title="4.1 new Icon(options)"></a>4.1 new Icon(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>anchor</code></td><td>Array.<number> (defaults to [0.5, 0.5])</td><td>Anchor. Default value is the icon center.</td></tr><tr><td><code>anchorOrigin</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Icon.html#~IconOrigin">IconOrigin</a> (defaults to ‘top-left’)</td><td>锚点的原点: <code>bottom-left</code>, <code>bottom-right</code>, <code>top-left</code> or <code>top-right</code>.</td></tr><tr><td><code>anchorXUnits</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Icon.html#~IconAnchorUnits">IconAnchorUnits</a> (defaults to ‘fraction’)</td><td>图标锚点位置 x 轴的单位</td></tr><tr><td><code>anchorYUnits</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Icon.html#~IconAnchorUnits">IconAnchorUnits</a> (defaults to ‘fraction’)</td><td>图标锚点位置 y 轴的单位</td></tr><tr><td><code>color</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_color.html#~Color">Color</a> | string | undefined</td><td>为图标着色的颜色。如果未指定，图标将保持原样。</td></tr><tr><td><code>crossOrigin</code></td><td>null | string | undefined</td><td>The <code>crossOrigin</code> attribute for loaded images. Note that you must provide a <code>crossOrigin</code> value if you want to access pixel data with the Canvas renderer. See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image">https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image</a> for more detail.</td></tr><tr><td><code>img</code></td><td>HTMLImageElement | HTMLCanvasElement | ImageBitmap | undefined</td><td>图标的图像对象。如果 src 未提供该选项，则必须已加载提供的图像。在这种情况下，需要<br>提供图像的大小和 imgSize 选项。</td></tr><tr><td><code>displacement</code></td><td>Array.<number> (defaults to [0, 0])</td><td>图标的位移</td></tr><tr><td><code>opacity</code></td><td>number (defaults to 1)</td><td>图标的透明度</td></tr><tr><td><code>width</code></td><td>number | undefined</td><td>The width of the icon in pixels. This can’t be used together with <code>scale</code>.</td></tr><tr><td><code>height</code></td><td>number | undefined</td><td>The height of the icon in pixels. This can’t be used together with <code>scale</code>.</td></tr><tr><td><code>scale</code></td><td>number | <a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a> (defaults to 1)</td><td>缩放比例</td></tr><tr><td><code>rotateWithView</code></td><td>boolean (defaults to false)</td><td>是否随视图旋转图标</td></tr><tr><td><code>rotation</code></td><td>number (defaults to 0)</td><td>以弧度为单位的旋转（顺时针正旋转）</td></tr><tr><td><code>offset</code></td><td>Array.<number> (defaults to [0, 0])</td><td>偏移量</td></tr><tr><td><code>offsetOrigin</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Icon.html#~IconOrigin">IconOrigin</a> (defaults to ‘top-left’)</td><td>偏移的原点: <code>bottom-left</code>, <code>bottom-right</code>, <code>top-left</code> or <code>top-right</code>.</td></tr><tr><td><code>size</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a> | undefined</td><td>图标大小（以像素为单位）</td></tr><tr><td><code>src</code></td><td>string | undefined</td><td>Image source URI.</td></tr><tr><td><code>declutterMode</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~DeclutterMode">DeclutterMode</a> | undefined</td><td>Declutter mode.</td></tr></tbody></table><h3 id="4-2-Extends"><a href="#4-2-Extends" class="headerlink" title="4.2 Extends"></a>4.2 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Image-ImageStyle.html">ImageStyle</a></li></ul><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722081977809.png" alt="QQ_1722081977809.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Style(&#123;</span><br><span class="line">    <span class="attr">image</span>: <span class="keyword">new</span> Icon(&#123;</span><br><span class="line">      <span class="comment">//设置图片是icon</span></span><br><span class="line">      <span class="attr">src</span>: <span class="string">&#x27;/Assets/Images/icon.png&#x27;</span>,</span><br><span class="line">      <span class="comment">// anchor: [1, 1],//锚点</span></span><br><span class="line">      <span class="comment">// anchorOrigin: &#x27;bottom-left&#x27;,//bottom-left、bottom-right、top-left、top-right</span></span><br><span class="line">      <span class="comment">// anchorXUnits: &#x27;fraction&#x27;,//百分比为单位</span></span><br><span class="line">      <span class="comment">// anchorYUnits: &#x27;pixels&#x27;,//像素为单位</span></span><br><span class="line">      <span class="comment">//offset: [10, 10],//偏移量，偏移之后图像的外观会被切割</span></span><br><span class="line">      <span class="comment">//offsetOrigin: &#x27;top-left&#x27;,//偏移的原点</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#7fff9e&#x27;</span>, <span class="comment">// 图标着色的颜色和图片的颜色混合</span></span><br><span class="line">      <span class="attr">displacement</span>: [<span class="number">10</span>, <span class="number">10</span>], <span class="comment">// 图标基于原点的偏移,偏移之后图像是不会被切割</span></span><br><span class="line">      <span class="comment">//img:</span></span><br><span class="line">      <span class="comment">//size:</span></span><br><span class="line">      <span class="comment">// imgSize: [36, 48],//img ,size imgSize,icon是可以设置img标签和canvas绘制的图片</span></span><br><span class="line">      <span class="attr">scale</span>: <span class="number">1</span>, <span class="comment">//图标缩放比例</span></span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">0.75</span>, <span class="comment">//透明度</span></span><br><span class="line">      <span class="attr">rotateWithView</span>: <span class="literal">false</span>, <span class="comment">//是否随视图旋转图标</span></span><br><span class="line">      <span class="attr">rotation</span>: <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="comment">//以弧度为单位的旋转</span></span><br><span class="line">      <span class="attr">crossOrigin</span>: <span class="string">&#x27;anonymous&#x27;</span>, <span class="comment">// 配置可以跨域</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">text</span>: <span class="keyword">new</span> Text(&#123;</span><br><span class="line">      <span class="attr">text</span>: name, <span class="comment">//文本内容//设置该点要素的文本信息</span></span><br><span class="line">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123; <span class="attr">color</span>: <span class="string">&#x27;#ff3300&#x27;</span> &#125;), <span class="comment">//文本填充样式（即文字颜色）&#125;)</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">zIndex</span>: <span class="number">9999</span>, <span class="comment">//设置css的z-index层级关系</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="5-Text"><a href="#5-Text" class="headerlink" title="5 Text"></a>5 Text</h2><h3 id="5-1-new-Text-options"><a href="#5-1-new-Text-options" class="headerlink" title="5.1 new Text(options)"></a>5.1 new Text(options)</h3><p>配置太多 见官网：<a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Text-Text.html">OpenLayers v10.0.0 API - Class: Text</a></p><h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722082745580.png" alt="QQ_1722082745580.png|852"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">text: <span class="keyword">new</span> Text(&#123;</span><br><span class="line">    <span class="attr">text</span>: name, <span class="comment">//文本内容,支持换行符\n,支持数组形式配置不同数据不同的样式，不吃富文本</span></span><br><span class="line">    <span class="attr">font</span>: <span class="string">&#x27;18px sans-serif&#x27;</span>, <span class="comment">//字体</span></span><br><span class="line">    <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123; <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span> &#125;), <span class="comment">//文本填充样式（即文字颜色）</span></span><br><span class="line">    <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">offsetX</span>: <span class="number">10</span>, <span class="comment">//水平方向偏移</span></span><br><span class="line">    <span class="attr">offsetY</span>: <span class="number">10</span>, <span class="comment">//垂直方向偏移</span></span><br><span class="line">    <span class="attr">overflow</span>: <span class="literal">false</span>, <span class="comment">//是否允许placement为line模式下的线或者面的情况下允许文字超出的范围，或者是线的延长的长度</span></span><br><span class="line">    <span class="attr">placement</span>: <span class="string">&#x27;point&#x27;</span>,</span><br><span class="line">    <span class="attr">textBaseline</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">backgroundFill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">      <span class="comment">//背景设置必须是placement为point的形式</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#f00&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">backgroundStroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-Circle"><a href="#6-Circle" class="headerlink" title="6 Circle"></a>6 Circle</h2><h3 id="6-1-new-CircleStyle-options"><a href="#6-1-new-CircleStyle-options" class="headerlink" title="6.1 new CircleStyle(options)"></a>6.1 new CircleStyle(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>fill</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Fill-Fill.html">Fill</a> | undefined</td><td>Fill style.</td></tr><tr><td><code>radius</code></td><td>number</td><td>Circle radius.</td></tr><tr><td><code>stroke</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Stroke-Stroke.html">Stroke</a> | undefined</td><td>Stroke style.</td></tr><tr><td><code>displacement</code></td><td>Array.<number> (defaults to [0,0])</td><td>displacement</td></tr><tr><td><code>scale</code></td><td>number | <a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a> (defaults to 1)</td><td>Scale. A two dimensional scale will produce an ellipse. Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for <code>radius</code>.</td></tr><tr><td><code>rotation</code></td><td>number (defaults to 0)</td><td>Rotation in radians (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).</td></tr><tr><td><code>rotateWithView</code></td><td>boolean (defaults to false)</td><td>Whether to rotate the shape with the view (meaningful only when used in conjunction with a two dimensional scale).</td></tr></tbody></table><p>|<code>declutterMode</code>|<a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~DeclutterMode">DeclutterMode</a> | undefined|Declutter mode|</p><h3 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a>6.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722083184780.png" alt="QQ_1722083184780.png|801"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Style(&#123;</span><br><span class="line">    <span class="attr">image</span>: <span class="keyword">new</span> CircleStyle(&#123;</span><br><span class="line">      <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#ff232b&#x27;</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#59ff43&#x27;</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">displacement</span>: [<span class="number">20</span>, <span class="number">20</span>], <span class="comment">//数据位置偏移</span></span><br><span class="line">      <span class="attr">scale</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">rotation</span>: <span class="built_in">Math</span>.PI, <span class="comment">//旋转45度</span></span><br><span class="line">      <span class="attr">rotateWithView</span>: <span class="literal">false</span>, <span class="comment">//是否随着视口旋转</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="7-Stroke"><a href="#7-Stroke" class="headerlink" title="7 Stroke"></a>7 Stroke</h2><h3 id="7-1-new-Stroke-options"><a href="#7-1-new-Stroke-options" class="headerlink" title="7.1 new Stroke(options)"></a>7.1 new Stroke(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>color</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_color.html#~Color">Color</a> | <a href="https://openlayers.org/en/latest/apidoc/module-ol_colorlike.html#~ColorLike">ColorLike</a> | undefined</td><td>A color, gradient or pattern. See <a href="https://openlayers.org/en/latest/apidoc/module-ol_color.html#~Color"><code>Color</code></a> and <a href="https://openlayers.org/en/latest/apidoc/module-ol_colorlike.html#~ColorLike"><code>ColorLike</code></a> for possible formats. Default null; if null, the Canvas/renderer default black will be used.</td></tr><tr><td><code>lineCap</code></td><td>CanvasLineCap (defaults to ‘round’)</td><td>Line cap style: <code>butt</code>, <code>round</code>, or <code>square</code>.</td></tr><tr><td><code>lineJoin</code></td><td>CanvasLineJoin (defaults to ‘round’)</td><td>Line join style: <code>bevel</code>, <code>round</code>, or <code>miter</code>.</td></tr><tr><td><code>lineDash</code></td><td>Array.<number> | undefined</td><td>Line dash pattern. Default is <code>null</code> (no dash).</td></tr><tr><td><code>lineDashOffset</code></td><td>number (defaults to 0)</td><td>Line dash offset.</td></tr><tr><td><code>miterLimit</code></td><td>number (defaults to 10)</td><td>Miter limit.</td></tr><tr><td><code>width</code></td><td>number | undefined</td><td>Width.</td></tr></tbody></table><p>其中：</p><ul><li><p>lineCap CanvasLineCap （默认为“圆形”） 线帽样式：butt、round 或 square.</p><ul><li>butt 向线条的每个末端添加平直的边缘。</li><li>round 向线条的每个末端添加圆形线帽。</li><li>square 向线条的每个末端添加正方形线帽。</li></ul></li><li><p>lineJoin CanvasLineJoin （默认为“圆形”） 线连接样式：bevel、round 或miter.</p><ul><li>bevel 创建斜角。</li><li>round 创建圆角。</li><li>miter 默认。创建尖角</li></ul></li><li><p>lineDash 线条虚线图案</p><ul><li>lineDash:[6] === lineDash:[6,6] //释义第一个”6”是虚线小段的长度，第二个”6”是虚线的间隔</li><li>lineDash:[1,2,3,4] // 释义 “1”是第一段虚线长度，”2”紧跟着的间隔，”3”是第二段虚线的长度，”4”是第二段虚线后边的间隔</li></ul></li><li><p>miterLimit 数字 （默认为 10）斜接限制<br>斜接长度指的是在两条线交汇处内角和外角之间的距离。<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722083663940.png" alt="QQ_1722083663940.png"><br>只有当 lineJoin 属性为 “miter” 时，miterLimit 才有效。<br>边角的角度越小，斜接长度就会越大。<br>为了避免斜接长度过长，我们可以使用 miterLimit 属性。<br>如果斜接长度超过 miterLimit 的值，边角会以 lineJoin 的 “bevel” 类型来显示（图解 3）<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722083685924.png" alt="QQ_1722083685924.png"></p></li></ul><h3 id="7-2-代码实现"><a href="#7-2-代码实现" class="headerlink" title="7.2 代码实现"></a>7.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722084202736.png" alt="QQ_1722084202736.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; ColorLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/colorlike&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; GeoJSON &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/format&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> geojson = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">features</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">properties</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">geometry</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="string">&#x27;Polygon&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">coordinates</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">88.330078125</span>, <span class="number">26.115985925333536</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">119.091796875</span>, <span class="number">26.115985925333536</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">119.091796875</span>, <span class="number">37.85750715625203</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">88.330078125</span>, <span class="number">37.85750715625203</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            [<span class="number">88.330078125</span>, <span class="number">26.115985925333536</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> gradient = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> pixelRatio = <span class="built_in">window</span>.devicePixelRatio;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (context) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> grad = context.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">512</span> * pixelRatio, <span class="number">0</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">0</span>, <span class="string">&#x27;red&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">1</span> / <span class="number">6</span>, <span class="string">&#x27;orange&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">2</span> / <span class="number">6</span>, <span class="string">&#x27;yellow&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">3</span> / <span class="number">6</span>, <span class="string">&#x27;green&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">4</span> / <span class="number">6</span>, <span class="string">&#x27;aqua&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">5</span> / <span class="number">6</span>, <span class="string">&#x27;blue&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    grad.addColorStop(<span class="number">1</span>, <span class="string">&#x27;purple&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> grad;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> pattern = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> pixelRatio = <span class="built_in">window</span>.devicePixelRatio;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (context) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    canvas.width = <span class="number">8</span> * pixelRatio;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    canvas.height = <span class="number">8</span> * pixelRatio;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// white background</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.fillStyle = <span class="string">&#x27;white&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// outer circle</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.fillStyle = <span class="string">&#x27;rgba(102, 0, 102, 0.5)&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.beginPath();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.arc(<span class="number">4</span> * pixelRatio, <span class="number">4</span> * pixelRatio, <span class="number">3</span> * pixelRatio, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.fill();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// inner circle</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.fillStyle = <span class="string">&#x27;rgb(55, 0, 170)&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.beginPath();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.arc(<span class="number">4</span> * pixelRatio, <span class="number">4</span> * pixelRatio, <span class="number">1.5</span> * pixelRatio, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    context.fill();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> context.createPattern(canvas, <span class="string">&#x27;repeat&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addVectorLayer = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//使用geojson读取要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> geoJSON = <span class="keyword">new</span> GeoJSON();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> features = geoJSON.readFeatures(geojson);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vector = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> layer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vector,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">style</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//color: &#x27;red&#x27;,//要素的颜色</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//color: this.gradient(),//要素的颜色</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: pattern() <span class="keyword">as</span> ColorLike, <span class="comment">//要素的颜色</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">10</span>, <span class="comment">//宽度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//lineDash:[6,10],//虚线的长度和间隔</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//lineDashOffset:3,//虚线偏移</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">lineCap</span>: <span class="string">&#x27;round&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">lineJoin</span>: <span class="string">&#x27;round&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//miterLimit:5//只有当 lineJoin 属性为 &quot;miter&quot; 时，miterLimit 才有效。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  vector.addFeatures(features);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(layer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.getView().fit(vector.getExtent());</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addVectorLayer();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-RegularShape"><a href="#8-RegularShape" class="headerlink" title="8 RegularShape"></a>8 RegularShape</h2><h3 id="8-1-new-RegularShape-options"><a href="#8-1-new-RegularShape-options" class="headerlink" title="8.1 new RegularShape(options)"></a>8.1 new RegularShape(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>fill</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Fill-Fill.html">Fill</a> | undefined</td><td>Fill style.</td></tr><tr><td><code>points</code></td><td>number</td><td>Number of points for stars and regular polygons. In case of a polygon, the number of points is the number of sides.</td></tr><tr><td><code>radius</code></td><td>number</td><td>Radius of a regular polygon.</td></tr><tr><td><code>radius2</code></td><td>number | undefined</td><td>Second radius to make a star instead of a regular polygon.</td></tr><tr><td><code>angle</code></td><td>number (defaults to 0)</td><td>Shape’s angle in radians. A value of 0 will have one of the shape’s points facing up.</td></tr><tr><td><code>displacement</code></td><td>Array.<number> (defaults to [0, 0])</td><td>形状位移</td></tr><tr><td><code>stroke</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Stroke-Stroke.html">Stroke</a> | undefined</td><td>Stroke style.</td></tr><tr><td><code>rotation</code></td><td>number (defaults to 0)</td><td>以弧度为单位的旋转（顺时针正旋转）</td></tr><tr><td><code>rotateWithView</code></td><td>boolean (defaults to false)</td><td>是否随视图旋转形状</td></tr><tr><td><code>scale</code></td><td>number | <a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a> (defaults to 1)</td><td>Scale. Unless two dimensional scaling is required a better result may be obtained with appropriate settings for <code>radius</code> and <code>radius2</code>.</td></tr><tr><td><code>declutterMode</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~DeclutterMode">DeclutterMode</a> | undefined</td><td>Declutter mode.</td></tr></tbody></table><h3 id="8-2-代码实现"><a href="#8-2-代码实现" class="headerlink" title="8.2 代码实现"></a>8.2 代码实现</h3><h4 id="8-2-1-案例1"><a href="#8-2-1-案例1" class="headerlink" title="8.2.1 案例1"></a>8.2.1 案例1</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1722086967396.png" alt="QQ_1722086967396.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Feature &#125; <span class="keyword">from</span> <span class="string">&#x27;ol&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Extent &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/extent&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Point &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, RegularShape, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; StyleLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style/Style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature: Feature</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//渲染一个箭头的竖杆</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> shaft = <span class="keyword">new</span> RegularShape(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">points</span>: <span class="number">2</span>, <span class="comment">//竖杆的头尾两个点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">radius</span>: <span class="number">5</span>, <span class="comment">//半径</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//描边</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">width</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">rotateWithView</span>: <span class="literal">true</span>, <span class="comment">// 是否需要根据视口旋转</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//渲染头部三角形</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> head = <span class="keyword">new</span> RegularShape(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">points</span>: <span class="number">3</span>, <span class="comment">//三个边代表三个点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">radius</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">rotateWithView</span>: <span class="literal">true</span>, <span class="comment">// 是否需要根据视口旋转</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//样式数据，由两个图片样式组合在一起形成一个带箭头的方向</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styles = [<span class="keyword">new</span> Style(&#123; <span class="attr">image</span>: shaft &#125;), <span class="keyword">new</span> Style(&#123; <span class="attr">image</span>: head &#125;)];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//获取到天气的wind是数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> wind = feature.get(<span class="string">&#x27;wind&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//计算风向的角度，用弧度表示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> angle = ((wind.deg - <span class="number">180</span>) * <span class="built_in">Math</span>.PI) / <span class="number">180</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 使用风速来调整缩放比例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> scale = wind.speed / <span class="number">10</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  shaft.setScale([<span class="number">1</span>, scale]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//设置旋转角度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  shaft.setRotation(angle);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//设置头部三角形偏移的位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  head.setDisplacement([<span class="number">0</span>, head.getRadius() / <span class="number">2</span> + shaft.getRadius() * scale]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//头部旋转的角度与竖杆旋转的角度一样</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  head.setRotation(angle);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> styles;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 添加矢量图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addVectorLayer = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vectorSource = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 这里创建十个点要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> pointFeature = <span class="keyword">new</span> Feature(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">geometry</span>: <span class="keyword">new</span> Point([<span class="number">113.24981689453125</span> + i, <span class="number">23.126468438108688</span> + i]), <span class="comment">//几何信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">wind</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">speed</span>: <span class="number">29.47</span> + i * <span class="number">10</span>, <span class="comment">// 风速</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">deg</span>: <span class="number">100</span> + i * <span class="number">10</span>, <span class="comment">// 风的角度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    vectorSource.addFeature(pointFeature);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vectorSource,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">style</span>: styleFunction <span class="keyword">as</span> StyleLike,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(vectorLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.getView().fit(vectorSource.getExtent() <span class="keyword">as</span> Extent);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addVectorLayer();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-2-案例2"><a href="#8-2-2-案例2" class="headerlink" title="8.2.2 案例2"></a>8.2.2 案例2</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/2024-07-27-21-50-08.gif" alt="2024-07-27-21-50-08.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;type&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeType&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; Feature &#125; from &#x27;ol&#x27;;</span><br><span class="line">import &#123; Geometry, Point &#125; from &#x27;ol/geom&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import VectorLayer from &#x27;ol/layer/Vector&#x27;;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import OSM from &#x27;ol/source/OSM.js&#x27;;</span><br><span class="line">import VectorSource from &#x27;ol/source/Vector&#x27;;</span><br><span class="line">import &#123; Fill, RegularShape, Stroke, Style &#125; from &#x27;ol/style&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">interface Option &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  label: string;</span><br><span class="line">&#125;</span><br><span class="line">type Type = &#x27;square&#x27; | &#x27;rectangle&#x27; | &#x27;triangle&#x27; | &#x27;cross&#x27; | &#x27;x&#x27; | &#x27;stacked&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line">let source: VectorSource&lt;Feature&lt;Geometry&gt;&gt;;</span><br><span class="line">const type = ref&lt;Type&gt;(&#x27;x&#x27;);</span><br><span class="line">const options = ref&lt;Option[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;x&#x27;,</span><br><span class="line">    label: &#x27;x&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;cross&#x27;,</span><br><span class="line">    label: &#x27;cross&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;star&#x27;,</span><br><span class="line">    label: &#x27;star&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;triangle&#x27;,</span><br><span class="line">    label: &#x27;triangle&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;square&#x27;,</span><br><span class="line">    label: &#x27;square&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;rectangle&#x27;,</span><br><span class="line">    label: &#x27;rectangle&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;stacked&#x27;,</span><br><span class="line">    label: &#x27;stacked&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">//描边样式</span><br><span class="line">const stroke = new Stroke(&#123; color: &#x27;black&#x27;, width: 2 &#125;);</span><br><span class="line">//填充样式</span><br><span class="line">const fill = new Fill(&#123; color: &#x27;red&#x27; &#125;);</span><br><span class="line">//样式对象</span><br><span class="line">const styles = &#123;</span><br><span class="line">  square: new Style(&#123;</span><br><span class="line">    image: new RegularShape(&#123;</span><br><span class="line">      fill: fill,</span><br><span class="line">      stroke: stroke,</span><br><span class="line">      points: 4,</span><br><span class="line">      radius: 10, //正多边形的半径</span><br><span class="line">      angle: Math.PI / 4, //夹角</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  rectangle: new Style(&#123;</span><br><span class="line">    image: new RegularShape(&#123;</span><br><span class="line">      fill: fill,</span><br><span class="line">      stroke: stroke,</span><br><span class="line">      radius: 10 / Math.SQRT2, //半径就是10/2的平方根</span><br><span class="line">      radius2: 10, //星形半径</span><br><span class="line">      points: 4,</span><br><span class="line">      angle: 0,</span><br><span class="line">      scale: [1, 0.5], //通过设置x,y的缩放比例实现矩形</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  triangle: new Style(&#123;</span><br><span class="line">    image: new RegularShape(&#123;</span><br><span class="line">      fill: fill,</span><br><span class="line">      stroke: stroke,</span><br><span class="line">      points: 3, //正三角形三个点</span><br><span class="line">      radius: 10,</span><br><span class="line">      //rotation: Math.PI / 4,//图形旋转</span><br><span class="line">      angle: 0,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  star: new Style(&#123;</span><br><span class="line">    image: new RegularShape(&#123;</span><br><span class="line">      fill: fill,</span><br><span class="line">      stroke: stroke,</span><br><span class="line">      points: 6,</span><br><span class="line">      radius: 10, //正多边形的半径</span><br><span class="line">      radius2: 5, //星形的半径4</span><br><span class="line">      angle: 0,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  cross: new Style(&#123;</span><br><span class="line">    image: new RegularShape(&#123;</span><br><span class="line">      fill: fill,</span><br><span class="line">      stroke: stroke,</span><br><span class="line">      points: 4,</span><br><span class="line">      radius: 10,</span><br><span class="line">      radius2: 0,</span><br><span class="line">      angle: 0, //没有夹角</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  x: new Style(&#123;</span><br><span class="line">    image: new RegularShape(&#123;</span><br><span class="line">      fill: fill, //默认填充黑色</span><br><span class="line">      stroke: stroke, //默认秒表黑色</span><br><span class="line">      points: 4, //4个点</span><br><span class="line">      radius: 10, //多边形的半径是10</span><br><span class="line">      radius2: 0, //星形的半径是0</span><br><span class="line">      angle: Math.PI / 4, //图形之间的夹角45度</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  stacked: [</span><br><span class="line">    new Style(&#123;</span><br><span class="line">      image: new RegularShape(&#123;</span><br><span class="line">        fill: fill,</span><br><span class="line">        stroke: stroke,</span><br><span class="line">        points: 4,</span><br><span class="line">        radius: 5,</span><br><span class="line">        angle: Math.PI / 4,</span><br><span class="line">        displacement: [0, 10],</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new Style(&#123;</span><br><span class="line">      image: new RegularShape(&#123;</span><br><span class="line">        fill: fill,</span><br><span class="line">        stroke: stroke,</span><br><span class="line">        points: 4,</span><br><span class="line">        radius: 10,</span><br><span class="line">        angle: Math.PI / 4,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const changeType = (type: Type) =&gt; &#123;</span><br><span class="line">  source.clear();</span><br><span class="line">  const count = 50;</span><br><span class="line">  const features = new Array(count);</span><br><span class="line">  const e = 4500000;</span><br><span class="line">  //使用平面坐标生成50个点要素的坐标</span><br><span class="line">  for (let i = 0; i &lt; count; ++i) &#123;</span><br><span class="line">    const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];</span><br><span class="line">    features[i] = new Feature(new Point(coordinates));</span><br><span class="line">    //根据绘制的类型设置点要素的样式</span><br><span class="line">    features[i].setStyle(styles[type]);</span><br><span class="line">  &#125;</span><br><span class="line">  //将要素添加到数据源中</span><br><span class="line">  source.addFeatures(features);</span><br><span class="line">&#125;;</span><br><span class="line">const addVectorLayer = () =&gt; &#123;</span><br><span class="line">  source = new VectorSource();</span><br><span class="line">  let vectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: source,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(vectorLayer);</span><br><span class="line">&#125;;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [0, 0],</span><br><span class="line">      zoom: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">  addVectorLayer();</span><br><span class="line">  changeType(&#x27;x&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 100px;</span><br><span class="line">  top: 0.5em;</span><br><span class="line">  right: 0.5em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 openlayers_OGC 服务</title>
      <link href="/2024/07/26/05%20openlayers_OGC%20%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/07/26/05%20openlayers_OGC%20%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1 概览"></a>1 概览</h2><blockquote><p>OGC 全称是开放地理空间信息联盟(Open Geospatial Consortium),是一个非盈利的国际标准组织，它制定了数据和服务的一系列标准，GIS 厂商按照这个标准进行开发可保证空间数据的互操作,致力于提供地理信息行业软件和数据及服务的标准化工作</p></blockquote><h2 id="2-WMS"><a href="#2-WMS" class="headerlink" title="2 WMS"></a>2 WMS</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>WMS 服务：Web Map Service，网络地图服务，它是利用具有地理空间位置信息的数据制作地图，其中将地图定义为地理数据的可视化表现，能够根据用户的请求，返回相应的地图，包括 PNG、GIF、JPEG 等栅格形式，或者 SVG 或者 WEB CGM 等矢量形式。WMS 支持 HTTP 协议，所支持的操作是由 URL 决定的。</p><p>WMS 提供如下操作:</p><ul><li><code>GetCapabitities</code>：返回服务级元数据，它是对服务信息内容和要求参数的一种描述。</li><li><code>GetMap</code>：返回一个地图影像，其地理空间参考和大小参数是明确定义了的。</li><li><code>GetFeatureInfo</code>：返回显示在地图上的某些特殊要素的信息。</li><li><code>GetLegendGraphic</code>：返回地图的图例信息。</li></ul><p>WMS 的 GetMap 接口返回指定范围内的地图，因此可以图片图层或者瓦片地图的形式加载，即可以使用 Image + ImageWMS 或者 Tile + TileWMS 形式加载</p><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/2024-07-26-15-37-58.gif" alt="2024-07-26-15-37-58.gif|750"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;wmsChange&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map-legend&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;legend&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;infoDom&quot;</span>&gt;</span>info<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import type &#123; Layer &#125; from &#x27;ol/layer&#x27;;</span><br><span class="line">import ImageLayer from &#x27;ol/layer/Image&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import &#123; ImageWMS, TileWMS, XYZ &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">interface option &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  label: string;</span><br><span class="line">&#125;</span><br><span class="line">let map: Map;</span><br><span class="line">let layer: Layer;</span><br><span class="line">let format = &#x27;image/png&#x27;;</span><br><span class="line">let bounds = [119.23374938964844, 32.07857131958008, 119.42321014404297, 32.183258056640625];</span><br><span class="line">const infoDom = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">const options = ref&lt;option[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;image&#x27;,</span><br><span class="line">    label: &#x27;图片&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;tile&#x27;,</span><br><span class="line">    label: &#x27;切片&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;legend&#x27;,</span><br><span class="line">    label: &#x27;图例&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;feature&#x27;,</span><br><span class="line">    label: &#x27;特征&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">const value = ref(&#x27;&#x27;);</span><br><span class="line">const imgSrc = ref(&#x27;&#x27;);</span><br><span class="line">const addImageLayer = () =&gt; &#123;</span><br><span class="line">  layer = new ImageLayer(&#123;</span><br><span class="line">    source: new ImageWMS(&#123;</span><br><span class="line">      ratio: 1,</span><br><span class="line">      url: &#x27;http://localhost:8080/geoserver/DTQ/wms&#x27;,</span><br><span class="line">      params: &#123; FORMAT: format, VERSION: &#x27;1.1.1&#x27;, STYLES: &#x27;&#x27;, LAYERS: &#x27;DTQ:D4DTQYC&#x27;, exceptions: &#x27;application/vnd.ogc.se_inimage&#x27; &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(layer);</span><br><span class="line">&#125;;</span><br><span class="line">const addTileLayer = () =&gt; &#123;</span><br><span class="line">  layer = new TileLayer(&#123;</span><br><span class="line">    source: new TileWMS(&#123;</span><br><span class="line">      url: &#x27;http://localhost:8080/geoserver/DTQ/wms&#x27;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        FORMAT: format,</span><br><span class="line">        VERSION: &#x27;1.1.1&#x27;,</span><br><span class="line">        tiled: true,</span><br><span class="line">        STYLES: &#x27;&#x27;,</span><br><span class="line">        LAYERS: &#x27;DTQ:D4DTQYC&#x27;,</span><br><span class="line">        exceptions: &#x27;application/vnd.ogc.se_inimage&#x27;,</span><br><span class="line">        tilesOrigin: 119.23374938964844 + &#x27;,&#x27; + 32.07857131958008,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(layer);</span><br><span class="line">&#125;;</span><br><span class="line">//获取到地图的图例</span><br><span class="line">const addLegend = () =&gt; &#123;</span><br><span class="line">  const wmsSource = new ImageWMS(&#123;</span><br><span class="line">    ratio: 1,</span><br><span class="line">    url: &#x27;http://localhost:8080/geoserver/DTQ/wms&#x27;,</span><br><span class="line">    params: &#123; FORMAT: format, VERSION: &#x27;1.1.1&#x27;, STYLES: &#x27;&#x27;, LAYERS: &#x27;DTQ:D4DTQYC&#x27;, exceptions: &#x27;application/vnd.ogc.se_inimage&#x27; &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  const updateLegend = function (resolution: number | undefined) &#123;</span><br><span class="line">    const graphicUrl = wmsSource.getLegendUrl(resolution);</span><br><span class="line">    if (graphicUrl) imgSrc.value = graphicUrl;</span><br><span class="line">  &#125;;</span><br><span class="line">  // Initial legend</span><br><span class="line">  const resolution = map.getView().getResolution();</span><br><span class="line">  updateLegend(resolution);</span><br><span class="line"></span><br><span class="line">  // Update the legend when the resolution changes</span><br><span class="line">  map.getView().on(&#x27;change:resolution&#x27;, function (event) &#123;</span><br><span class="line">    const resolution = event.target.getResolution();</span><br><span class="line">    updateLegend(resolution);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//获取到地图上的要素信息</span><br><span class="line">const addFeature = () =&gt; &#123;</span><br><span class="line">  const wmsSource = new ImageWMS(&#123;</span><br><span class="line">    ratio: 1,</span><br><span class="line">    url: &#x27;http://localhost:8080/geoserver/DTQ/wms&#x27;,</span><br><span class="line">    params: &#123; FORMAT: format, VERSION: &#x27;1.1.1&#x27;, STYLES: &#x27;&#x27;, LAYERS: &#x27;DTQ:D4DTQYC&#x27;, exceptions: &#x27;application/vnd.ogc.se_inimage&#x27; &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.on(&#x27;singleclick&#x27;, (evt) =&gt; &#123;</span><br><span class="line">    infoDom.value!.innerHTML = &#x27;&#x27;;</span><br><span class="line">    const viewResolution = /** @type &#123;number&#125; */ map.getView().getResolution();</span><br><span class="line">    const url = wmsSource.getFeatureInfoUrl(evt.coordinate, viewResolution as number, &#x27;EPSG:4326&#x27;, &#123; INFO_FORMAT: &#x27;text/html&#x27; &#125;);</span><br><span class="line">    if (url) &#123;</span><br><span class="line">      fetch(url)</span><br><span class="line">        .then((response) =&gt; response.text())</span><br><span class="line">        .then((html) =&gt; &#123;</span><br><span class="line">          console.log(html);</span><br><span class="line">          console.log(infoDom.value);</span><br><span class="line"></span><br><span class="line">          infoDom.value!.innerHTML = html;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">const wmsChange = (type: string) =&gt; &#123;</span><br><span class="line">  switch (type) &#123;</span><br><span class="line">    case &#x27;image&#x27;:</span><br><span class="line">      map.removeLayer(layer);</span><br><span class="line">      addImageLayer();</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;tile&#x27;:</span><br><span class="line">      map.removeLayer(layer);</span><br><span class="line">      addTileLayer();</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;legend&#x27;:</span><br><span class="line">      addLegend();</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;feature&#x27;:</span><br><span class="line">      addFeature();</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  map.getView().fit(bounds, &#123; size: map.getSize() &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  const tileLayer = new TileLayer(&#123;</span><br><span class="line">    visible: true,</span><br><span class="line">    source: new XYZ(&#123; url: &#x27;http://wprd0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27; &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [119.316, 32.13],</span><br><span class="line">      zoom: 13, // 默认缩放等级</span><br><span class="line">      maxZoom: 20, // 最大缩放等级</span><br><span class="line">      minZoom: 5, // 最小缩放等级</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [tileLayer],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 200px;</span><br><span class="line">  top: 0.5em;</span><br><span class="line">  right: 0.5em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#map-legend &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0.25em;</span><br><span class="line">  right: 0.5em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#info &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: aquamarine;</span><br><span class="line">  bottom: 0.25em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-WCS"><a href="#3-WCS" class="headerlink" title="3 WCS"></a>3 WCS</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>网络覆盖服务是面向空间影像数据，它将包含地理位置的地理空间数据作为”覆盖（Coverage）”在网上相互交换，<strong>如卫星影像、数字高程数据等栅格数据。</strong></p><p>WCS 提供如下操作:</p><ul><li>GetCapabitities：返回服务级元数据，它是对服务信息内容和要求参数的一种描述。</li><li>DescribeCoverage：支持用户从特定 WCS 服务器获取一个或多个覆盖的详细的描述文档。</li><li>GetCoverage：可根据查询要求返回一个包含或者引用被请求的覆盖数据的响应文档。</li></ul><p>WCS 加载方式与 WMS 加载方式基本相同</p><h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><p>openlayer 调用 wcs 服务是通过 wms 来实现的</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721983044064.png" alt="QQ_1721983044064.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> ImageLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Image&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ImageWMS, OSM &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/source&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> format = <span class="string">&#x27;image/png&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">119.999861111111</span>, <span class="number">32.99986111111112</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">8</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> ImageLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> ImageWMS(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">ratio</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/geoserver/openlayer_learn/wms&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">params</span>: &#123; <span class="attr">FORMAT</span>: format, <span class="attr">VERSION</span>: <span class="string">&#x27;1.1.1&#x27;</span>, <span class="attr">STYLES</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">LAYERS</span>: <span class="string">&#x27;openlayer_learn:ASTGTMV003_N32E119_num&#x27;</span>, <span class="attr">exceptions</span>: <span class="string">&#x27;application/vnd.ogc.se_inimage&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-WMTS"><a href="#4-WMTS" class="headerlink" title="4 WMTS"></a>4 WMTS</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>WMTS(Web Map Tile Service)提供了一种采用预定义图块方法发布数字地图服务的标准化解决方案。WMTS 弥补了 WMS 不能提供分块地图的不足。WMS 针对提供可定制地图的服务，是一个动态数据或用户定制地图（需结合 SLD 标准）的理想解决办法。WMTS 牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内。这些固定的图块集使得对 WMTS 服务的实现可以使用一个仅简单返回已有文件的 Web 服务器即可，同时使得可以利用一些标准的诸如分布式缓存的网络机制实现伸缩性</p><p>WMTS 接口支持的三类资源：</p><ul><li>一个服务元数据（ServiceMetadata）资源（面向过程架构风格下对 GetCapabilities 操作的响应）（服务器方必须实现）。 ServiceMetadata 资源描述指定服务器实现的能力和包含的信息。在面向过程的架构风格中该操作也支持客户端与服务器间的标准版本协商。</li><li>图块资源（对面向过程架构风格下 GetTile 操作的响应）（服务器方必须实现）。图块资源表示一个图层的地图表达结果的一小块。</li><li>要素信息（FeatureInfo）资源（对面向过程架构风格下 GetFeatureInfo 操作的响应）（服务器方可选择实现）。该资源提供了图块地图中某一特定像素位置处地物要素的信息，与 WMS 中 GetFeatureInfo 操作的行为相似，以文本形式通过提供比如专题属性名称及其取值的方式返回相关信息。</li></ul><p>WMTS 瓦片地图服务，WMTS 的 GetTile 接口返回的是单张瓦片地图，其调用方式与其他类型的瓦片地图相同，可以使用 Tile + WTMS 方式加载，由数据源内部处理请求 WMTS，加载请求范围内的瓦片地图。</p><h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721984433535.png" alt="QQ_1721984433535.png"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721984477546.png" alt="QQ_1721984477546.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; getTopLeft, getWidth &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/extent&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/proj&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> WMTS <span class="keyword">from</span> <span class="string">&#x27;ol/source/WMTS.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> WMTSTileGrid <span class="keyword">from</span> <span class="string">&#x27;ol/tilegrid/WMTS&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addWmts = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//通过范围计算得到分辨率数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> projection = get(<span class="string">&#x27;EPSG:4326&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> projectionExtent = projection.getExtent();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> size = getWidth(projectionExtent) / <span class="number">256</span>; <span class="comment">//每个瓦片的高宽</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> resolutions = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">19</span>); <span class="comment">//图片的分辨率</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> matrixIds = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">19</span>); <span class="comment">//wmts支持的投影方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">for</span> (<span class="keyword">let</span> z = <span class="number">0</span>; z &lt; <span class="number">19</span>; ++z) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//生成WMTS分辨率和matrixIds数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    resolutions[z] = size / <span class="built_in">Math</span>.pow(<span class="number">2</span>, z); <span class="comment">//分辨率</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    matrixIds[z] = z; <span class="comment">//层级</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//实例化WMTS服务图层对象（ol.layer.Tile，ol.source.WMTS）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> wmtsLayer = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//wmts是瓦片图层，使用瓦片图层加载</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">opacity</span>: <span class="number">1</span>, <span class="comment">//图层透明度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> WMTS(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">layer</span>: <span class="string">&#x27;cva&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 数据源信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">attributions</span>: <span class="string">&#x27;Tiles &amp;copy; &lt;a href=&quot;http://t0.tianditu.cn/cva_c/wmts?LAYER=cva&quot;&gt;天地图矢量注记&lt;/a&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//WMTS服务基地址</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27;http://t0.tianditu.gov.cn/cva_c/wmts?LAYER=cva&amp;tk=key&#x27;</span>, <span class="comment">// 这里需要替换天地图的key</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//投影坐标系设置矩阵</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">matrixSet</span>: <span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//图片格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="string">&#x27;tiles&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//数据的投影坐标系</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//projection: projection,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//瓦片网格对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">tileGrid</span>: <span class="keyword">new</span> WMTSTileGrid(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//原点（左上角）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">origin</span>: getTopLeft(projectionExtent),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//分辨率数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">resolutions</span>: resolutions,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//矩阵标识列表，与地图级数保持一致</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">matrixIds</span>: matrixIds,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">style</span>: <span class="string">&#x27;default&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">wrapX</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(wmtsLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>], <span class="comment">//视图中心位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//指定投影</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>, <span class="comment">//缩放到的级别</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addWmts();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-WFS"><a href="#5-WFS" class="headerlink" title="5 WFS"></a>5 WFS</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>网络要素服务（WFS）支持用户在分布式的环境下通过 HTTP 对地理要素进行插入，更新，删除，检索和发现服务。该服务根据 HTTP 客户请求返回要素级的 GML(Geography Markup Language、地理标识语言)数据，并提供对要素的增加、修改、删除等事务操作，是对 Web 地图服务的进一步深入。WFS 通过 OGC Filter 构造查询条件，支持基于空间几何关系的查询，基于属性域的查询，当然还包括基于空间关系和属性域的共同查询。</p><p>WFS 提供如下操作:</p><ul><li>GetCapabitities：返回服务级元数据，它是对服务信息内容和要求参数的一种描述。</li><li>DescribeFeatureType：生成一个 Schema 用于描述 WFS 实现所能提供服务的要素类型。Schema 描述定义了在输入时 WFS 实现如何对要素实例进行编码以及输出时如何生成一个要素实例。</li><li>GetFeature：可根据查询要求返回一个符合 GML 规范的数据文档。</li><li>LockFeature：用户通过 Transaction 请求时，为了保证要素信息的一致性，即当一个事务访问一个数据项时，其他的事务不能修改这个数据项，对要素数据加要素锁。</li><li>Transaction： 与要素实例的交互操作。该操作不仅能提供要素读取，同时支持要素在线编辑和事务处理。Transaction 操作是可选的，服务器根据数据性质选择是否支持该操作。</li></ul><p>WFS 要素服务，WFS 的 GetFeature 接口返回 GML 等格式的矢量地图，其调用方式与其他类型的矢量地图相同，因此 WFS 的加载方式与矢量地图类似，可以使用 layer.Vector + source.Vector 方式加载。</p><h3 id="5-2-VectorSource"><a href="#5-2-VectorSource" class="headerlink" title="5.2 VectorSource"></a>5.2 VectorSource</h3><h4 id="5-2-1-new-VectorSource-options"><a href="#5-2-1-new-VectorSource-options" class="headerlink" title="5.2.1 new VectorSource(options)"></a>5.2.1 new VectorSource(options)</h4><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>attributions</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Source.html#~AttributionLike">AttributionLike</a> | undefined</td><td>Attributions.</td></tr><tr><td><code>features</code></td><td>Array.<FeatureType> | <a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a><FeatureType> | undefined</td><td>Features. If provided as <a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html"><code>Collection</code></a>, the features in the source and the collection will stay in sync.</td></tr><tr><td><code>format</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_format_Feature-FeatureFormat.html">FeatureFormat</a>&lt;FeatureToFeatureClass<FeatureType>&gt; | undefined</td><td>The feature format used by the XHR feature loader when <code>url</code> is set. Required if <code>url</code> is set, otherwise ignored.</td></tr><tr><td>loader</td><td><br>| <a href="https://openlayers.org/en/latest/apidoc/module-ol_featureloader.html#~FeatureLoader"> FeatureLoader</a> &lt;FeatureType&gt; | undefined|</td><td>The loader function used to load features, from a remote source for example. If this is not set and <code>url</code> is set, the source will create and use an XHR feature loader. The <code>&#39;featuresloadend&#39;</code> and <code>&#39;featuresloaderror&#39;</code> events will only fire if the <code>success</code> and <code>failure</code> callbacks are used.</td></tr><tr><td><code>overlaps</code></td><td>boolean (defaults to true)</td><td>此源可能有重叠的几何图形。将其设置为<code>false</code>（例如，对于具有表示行政边界的多边形的源或 TopoJSON 源）可使渲染器优化填充和描边操作。</td></tr><tr><td><code>strategy</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.html#~LoadingStrategy">LoadingStrategy</a> | undefined</td><td>要使用的加载策略。默认情况下 <a href="https://openlayers.org/en/latest/apidoc/module-ol_loadingstrategy.html#.all"><code>all</code></a> 使用一次性策略，即一次加载所有特征。</td></tr><tr><td><code>url</code></td><td>string | <a href="https://openlayers.org/en/latest/apidoc/module-ol_featureloader.html#~FeatureUrlFunction">FeatureUrlFunction</a> | undefined</td><td>设置此选项可指示源使用 XHR 加载器加载要素（请参阅 <a href="https://openlayers.org/en/latest/apidoc/module-ol_featureloader.html#.xhr"><code>xhr</code></a>）</td></tr><tr><td><code>useSpatialIndex</code></td><td>boolean (defaults to true)</td><td>默认情况下，使用 RTree 作为空间索引。当频繁删除和添加要素且要素总数较少时，将此设置为 <code>false</code>可能会提高性能。prove performance.<br><br>Note that <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html#getFeaturesInExtent"><code>getFeaturesInExtent</code></a>, <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html#getClosestFeatureToCoordinate"><code>getClosestFeatureToCoordinate</code></a> and <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html#getExtent"><code>getExtent</code></a> cannot be used when <code>useSpatialIndex</code> is set to <code>false</code>, and <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html#forEachFeatureInExtent"><code>forEachFeatureInExtent</code></a> will loop through all features.<br><br>When set to <code>false</code>, the features will be maintained in an <a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html"><code>Collection</code></a>, which can be retrieved through <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html#getFeaturesCollection"><code>getFeaturesCollection</code></a>.</td></tr><tr><td><code>wrapX</code></td><td>boolean (defaults to true)</td><td>Wrap the world horizontally. For vector editing across the -180° and 180° meridians to work properly, this should be set to <code>false</code>. The resulting geometry coordinates will then exceed the world bounds.</td></tr></tbody></table><h4 id="5-2-2-Fires"><a href="#5-2-2-Fires" class="headerlink" title="5.2.2 Fires"></a>5.2.2 Fires</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721985255991.png" alt="QQ_1721985255991.png"></p><h4 id="5-2-3-Methods"><a href="#5-2-3-Methods" class="headerlink" title="5.2.3 Methods"></a>5.2.3 Methods</h4><ul><li>forEachFeature(callback) =&gt; {T | undefined}</li><li>forEachFeatureInExtent(extent, callback) =&gt; {T | undefined}</li><li>forEachFeatureIntersectingExtent(extent, callback) =&gt; {T | undefined}</li></ul><h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><p>其中 strategy 是加载策略</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721986417733.png" alt="QQ_1721986417733.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; GeoJSON &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/format&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; bbox <span class="keyword">as</span> bboxStrategy &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/loadingstrategy&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> GeoJSON(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">strategy</span>: bboxStrategy, <span class="comment">// 加载策略</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">119.316</span>, <span class="number">32.13</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">4</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      vector,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 openLayer_Interaction 地图交互</title>
      <link href="/2024/07/26/04%20openLayer_Interaction%20%E5%9C%B0%E5%9B%BE%E4%BA%A4%E4%BA%92/"/>
      <url>/2024/07/26/04%20openLayer_Interaction%20%E5%9C%B0%E5%9B%BE%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Interaction-抽象基类"><a href="#1-Interaction-抽象基类" class="headerlink" title="1 Interaction 抽象基类"></a>1 Interaction 抽象基类</h2><blockquote><p>Abstract base class; normally only used for creating subclasses and not instantiated in apps. User actions that change the state of the map.</p></blockquote><p><strong>与 controls 的区别</strong><br>Some are similar to <code>controls</code>, but are not associated with a DOM element.<br>For example, <a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardZoom-KeyboardZoom.html"><code>KeyboardZoom</code></a> is functionally the same as <a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Zoom-Zoom.html"><code>Zoom</code></a>, but triggered by a keyboard event not a button element event.<br>Although interactions do not have a DOM element, some of them do render vectors and so are visible on the screen.</p><h3 id="1-1-new-Interaction-options"><a href="#1-1-new-Interaction-options" class="headerlink" title="1.1 new Interaction(options)"></a>1.1 new Interaction(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>handleEvent</code></td><td>function</td><td>地图调用此方法，通知交互已将浏览器事件分派到地图。如果函数返回假值，则将阻止事件传播到地图交互链中的其他交互（这包括没有明确返回的函数）。交互按地图交互集合的反向顺序遍历</td></tr></tbody></table><h3 id="1-2-Fires"><a href="#1-2-Fires" class="headerlink" title="1.2 Fires"></a>1.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721889373790.png" alt="QQ_1721889373790.png"></p><h3 id="1-3-Subclasses"><a href="#1-3-Subclasses" class="headerlink" title="1.3 Subclasses"></a>1.3 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DblClickDragZoom-DblClickDragZoom.html">DblClickDragZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DoubleClickZoom-DoubleClickZoom.html">DoubleClickZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragAndDrop-DragAndDrop.html">DragAndDrop</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardPan-KeyboardPan.html">KeyboardPan</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardZoom-KeyboardZoom.html">KeyboardZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Link-Link.html">Link</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_MouseWheelZoom-MouseWheelZoom.html">MouseWheelZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Pointer-PointerInteraction.html">PointerInteraction</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragBox-DragBox.html">DragBox</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragPan-DragPan.html">DragPan</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragRotateAndZoom-DragRotateAndZoom.html">DragRotateAndZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragRotate-DragRotate.html">DragRotate</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Draw-Draw.html">Draw</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Extent-Extent.html">Extent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Modify-Modify.html">Modify</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_PinchRotate-PinchRotate.html">PinchRotate</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_PinchZoom-PinchZoom.html">PinchZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Snap-Snap.html">Snap</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Translate-Translate.html">Translate</a></li></ul></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Select-Select.html">Select</a></li></ul><h3 id="1-4-Extends"><a href="#1-4-Extends" class="headerlink" title="1.4 Extends"></a>1.4 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h2 id="2-BaseEvent"><a href="#2-BaseEvent" class="headerlink" title="2 BaseEvent"></a>2 BaseEvent</h2><blockquote><p>精简了 W3C DOM Level 2 事件接口的实现。请参阅 <a href="https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface">https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface</a>。<br>此实现仅提供<code>type</code>和<code>target</code>属性以及 <code>stopPropagation</code>和<code>preventDefault</code>方法。它旨在作为库中定义的更高级别事件的基类，并与一起使用 <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_Target-Target.html"><code>Target</code></a>。</p></blockquote><h3 id="2-1-Subclasses"><a href="#2-1-Subclasses" class="headerlink" title="2.1 Subclasses"></a>2.1 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection.CollectionEvent.html">CollectionEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Geolocation.GeolocationError.html">GeolocationError</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_MapEvent-MapEvent.html">MapEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_SnapEvent.SnapEvent.html">SnapEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragAndDrop.DragAndDropEvent.html">DragAndDropEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragBox.DragBoxEvent.html">DragBoxEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Draw.DrawEvent.html">DrawEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Extent.ExtentEvent.html">ExtentEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Modify.ModifyEvent.html">ModifyEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Select.SelectEvent.html">SelectEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Translate.TranslateEvent.html">TranslateEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Group.GroupEvent.html">GroupEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_render_Event-RenderEvent.html">RenderEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Image.ImageSourceEvent.html">ImageSourceEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Raster.RasterSourceEvent.html">RasterSourceEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Tile.TileSourceEvent.html">TileSourceEvent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.VectorSourceEvent.html">VectorSourceEvent</a></li></ul><h2 id="3-defaults-options-gt-Collection-lt-Interaction-gt"><a href="#3-defaults-options-gt-Collection-lt-Interaction-gt" class="headerlink" title="3 defaults(options) =&gt; {Collection &lt; Interaction &gt;}"></a>3 defaults(options) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Interaction-Interaction.html">Interaction</a> &gt;}</h2><blockquote><p>这是一个函数，options 为配置项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; defaults <span class="keyword">as</span> defaultInteractions &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/interaction&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">interactions</span>: defaultInteractions(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">altShiftDragRotate</span>: <span class="literal">true</span>, <span class="comment">//是否需要 Alt-Shift-drag 旋转</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">onFocusOnly</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">doubleClickZoom</span>: <span class="literal">true</span>, <span class="comment">//是否需要双击缩放</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">keyboard</span>: <span class="literal">true</span>, <span class="comment">//是否需要键盘交互</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">mouseWheelZoom</span>: <span class="literal">true</span>, <span class="comment">//是否需要鼠标滚轮缩放</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">shiftDragZoom</span>: <span class="literal">true</span>, <span class="comment">//是否需要按住 Shift 键拖动缩放</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">dragPan</span>: <span class="literal">true</span>, <span class="comment">//是否需要拖动平移</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">pinchRotate</span>: <span class="literal">true</span>, <span class="comment">//是否需要捏合旋转</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">pinchZoom</span>: <span class="literal">true</span>, <span class="comment">//是否需要捏合缩放</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoomDelta</span>: <span class="number">2</span>, <span class="comment">//使用键盘或双击缩放时的缩放级别增量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoomDuration</span>: <span class="number">2000</span>, <span class="comment">//缩放动画的持续时间</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认情况下，在地图中包含一组交互。可以通过在构造函数选项中将适当的选项设置为 false 来排除特定的交互，但交互的顺序是固定的。如果要为交互指定不同的顺序，则需要创建自己的 module:ol/interaction/interaction 实例，并在创建 module:ol/Map~Map 实例之前，按照所需的顺序将它们插入 module:ol/Collection 中。</p><p>默认的交互集依次为：</p><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragRotate-DragRotate.html"><code>DragRotate</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DoubleClickZoom-DoubleClickZoom.html"><code>DoubleClickZoom</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragPan-DragPan.html"><code>DragPan</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_PinchRotate-PinchRotate.html"><code>PinchRotate</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_PinchZoom-PinchZoom.html"><code>PinchZoom</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardPan-KeyboardPan.html"><code>KeyboardPan</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardZoom-KeyboardZoom.html"><code>KeyboardZoom</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_MouseWheelZoom-MouseWheelZoom.html"><code>MouseWheelZoom</code></a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragZoom-DragZoom.html"><code>DragZoom</code></a></li></ul><h3 id="3-1-options"><a href="#3-1-options" class="headerlink" title="3.1 options"></a>3.1 options</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>altShiftDragRotate</code></td><td>boolean (defaults to true)</td><td>是否需要 Alt-Shift-drag 旋转</td></tr><tr><td><code>onFocusOnly</code></td><td>boolean (defaults to false)</td><td>I 仅当地图具有焦点时才进行交互。这会影响 MouseWheelZoom 和 DragPan 交互，并且当需要为没有浏览器焦点的地图进行页面滚动时非常有用。</td></tr><tr><td><code>doubleClickZoom</code></td><td>boolean (defaults to true)</td><td>是否需要双击缩放</td></tr><tr><td><code>keyboard</code></td><td>boolean (defaults to true)</td><td>是否需要键盘交互</td></tr><tr><td><code>mouseWheelZoom</code></td><td>boolean (defaults to true)</td><td>是否需要鼠标滚轮缩放</td></tr><tr><td><code>shiftDragZoom</code></td><td>boolean (defaults to true)</td><td>是否需要按住 Shift 键拖动缩放</td></tr><tr><td><code>dragPan</code></td><td>boolean (defaults to true)</td><td>是否需要拖动平移</td></tr><tr><td><code>pinchRotate</code></td><td>boolean (defaults to true)</td><td>是否需要捏合旋转</td></tr><tr><td><code>pinchZoom</code></td><td>boolean (defaults to true)</td><td>是否需要捏合缩放。</td></tr><tr><td><code>zoomDelta</code></td><td>number | undefined</td><td>使用键盘或双击缩放时的缩放级别增量</td></tr><tr><td><code>zoomDuration</code></td><td>number | undefined</td><td>缩放动画的持续时间（以毫秒为单位）</td></tr></tbody></table><h2 id="4-Draw"><a href="#4-Draw" class="headerlink" title="4 Draw"></a>4 Draw</h2><blockquote><p>这个需要绑定一个 source，绘制的要素也全在 source 里，可以通过 get 类或 remove 类方法获取和清除</p></blockquote><h3 id="4-1-new-Draw-options"><a href="#4-1-new-Draw-options" class="headerlink" title="4.1 new Draw(options)"></a>4.1 new Draw(options)</h3><p>重点讲几个配置项：</p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>type</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_Geometry.html#~Type">Type</a> |</td><td>使用此实例绘制的几何图形的几何类型。ol/geom/GeometryType</td></tr><tr><td><code>source</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html">VectorSource</a> | undefined|</td><td>绘制特征的目标源。</td></tr><tr><td><code>features</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a> &gt; | undefined</td><td>绘制要素的目标集合</td></tr><tr><td><code>style</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~StyleLike">StyleLike</a> | <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_flat.html#~FlatStyleLike">FlatStyleLike</a> | undefined |</td><td>草图特征的样式。</td></tr><tr><td><code>geometryFunction</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Draw.html#~GeometryFunction">GeometryFunction</a> | undefined |</td><td>自定义绘制图形函数<br>更新几何坐标时调用的函数</td></tr><tr><td><code>geometryName</code></td><td>string | undefined</td><td>用于绘制交互创建的特征的几何名称</td></tr><tr><td><code>freehand</code></td><td>boolean (defaults to false)</td><td>是否以手绘模式绘制线、多边形和圆。</td></tr><tr><td><code>wrapX</code></td><td>boolean (defaults to false)||</td><td>在草图在 x 轴水平方向是否平铺</td></tr></tbody></table><h3 id="4-2-Fires"><a href="#4-2-Fires" class="headerlink" title="4.2 Fires"></a>4.2 Fires</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">draw.on(<span class="string">&#x27;drawstart&#x27;</span>, <span class="function">(<span class="params">event: DragEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;绘制开始&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    draw.on(<span class="string">&#x27;drawabort&#x27;</span>, <span class="function">(<span class="params">event: DragEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;绘制中止&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    draw.on(<span class="string">&#x27;drawend&#x27;</span>, <span class="function">(<span class="params">event: DragEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;绘制结束&#x27;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="4-3-Methods"><a href="#4-3-Methods" class="headerlink" title="4.3 Methods"></a>4.3 Methods</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止绘制并将草图特征添加到目标图层</span></span><br><span class="line">draw.finishDrawing();</span><br><span class="line"><span class="comment">// 停止绘图而不将草图特征添加到目标图层</span></span><br><span class="line">draw.abortDrawing();</span><br></pre></td></tr></table></figure><h3 id="4-4-Extends"><a href="#4-4-Extends" class="headerlink" title="4.4 Extends"></a>4.4 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Pointer-PointerInteraction.html">PointerInteraction</a></li></ul><h3 id="4-5-代码实现"><a href="#4-5-代码实现" class="headerlink" title="4.5 代码实现"></a>4.5 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721898538163.png" alt="QQ_1721898538163.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;drawChange&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleFinish&quot;</span>&gt;</span>停止绘图并完成当前绘图<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClear&quot;</span>&gt;</span>停止绘图并清除当前绘图<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleAllServer&quot;</span>&gt;</span>保存所有草图<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleAllClear&quot;</span>&gt;</span>清除所有草图<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; Feature, Map, View &#125; from &#x27;ol&#x27;;</span><br><span class="line">import Draw, &#123; createBox, createRegularPolygon, type SketchCoordType &#125; from &#x27;ol/interaction/Draw&#x27;;</span><br><span class="line">import &#123; OSM, Vector as VectorSource &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import &#123; Tile as TileLayer, Vector as VectorLayer &#125; from &#x27;ol/layer&#x27;;</span><br><span class="line">import &#123; Circle as CircleStyle, Fill, Icon, Stroke, Style &#125; from &#x27;ol/style&#x27;;</span><br><span class="line">import type &#123; Geometry &#125; from &#x27;ol/geom&#x27;;</span><br><span class="line">import type &#123; StyleLike &#125; from &#x27;ol/style/Style&#x27;;</span><br><span class="line">import type &#123; Type &#125; from &#x27;ol/geom/Geometry&#x27;;</span><br><span class="line"></span><br><span class="line">interface option &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  label: string;</span><br><span class="line">&#125;</span><br><span class="line">let map: Map;</span><br><span class="line">let draw: Draw;</span><br><span class="line">let drawSource: VectorSource&lt;Feature&lt;Geometry&gt;&gt;;</span><br><span class="line">let drawVectorLayer: VectorLayer&lt;Feature&gt;;</span><br><span class="line"></span><br><span class="line">const options = ref&lt;option[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;Point&#x27;,</span><br><span class="line">    label: &#x27;点&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;LineString&#x27;,</span><br><span class="line">    label: &#x27;线&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;Polygon&#x27;,</span><br><span class="line">    label: &#x27;面&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;Circle&#x27;,</span><br><span class="line">    label: &#x27;圆&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;Square&#x27;,</span><br><span class="line">    label: &#x27;正方形&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: &#x27;Box&#x27;,</span><br><span class="line">    label: &#x27;长方形&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">const value = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">const drawChange = (type: string) =&gt; &#123;</span><br><span class="line">  if (map) &#123;</span><br><span class="line">    // 先移除之前的</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">    const len = map.getAllLayers().length;</span><br><span class="line">    const source = map.getAllLayers()[len - 1].getSource();</span><br><span class="line">    addDraw(type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleFinish = () =&gt; &#123;</span><br><span class="line">  // 停止绘制并将草图特征添加到目标图层</span><br><span class="line">  draw.finishDrawing();</span><br><span class="line">&#125;;</span><br><span class="line">const handleClear = () =&gt; &#123;</span><br><span class="line">  // 停止绘图而不将草图特征添加到目标图层</span><br><span class="line">  draw.abortDrawing();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleAllServer = () =&gt; &#123;</span><br><span class="line">  console.log(drawSource.getFeatures());</span><br><span class="line">  // 然后再把这些要素传到后台才行</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleAllClear = () =&gt; &#123;</span><br><span class="line">  // Refreshes the source. The source will be cleared, and data from the server will be reloaded.</span><br><span class="line">  // drawSource.refresh();  // 这个是从服务器重新加载</span><br><span class="line">  drawSource.removeFeatures(drawSource.getFeatures());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 添加draw</span><br><span class="line">const addDraw = (type: string) =&gt; &#123;</span><br><span class="line">  if (type != &#x27;None&#x27;) &#123;</span><br><span class="line">    //绘制函数</span><br><span class="line">    let geometryFunction;</span><br><span class="line">    if (type === &#x27;Square&#x27;) &#123;</span><br><span class="line">      type = &#x27;Circle&#x27;; //正方形用圆绘制，分段数4</span><br><span class="line">      geometryFunction = createRegularPolygon(4);</span><br><span class="line">    &#125; else if (type === &#x27;Box&#x27;) &#123;</span><br><span class="line">      type = &#x27;Circle&#x27;; //使用圆的类型创建盒子</span><br><span class="line">      geometryFunction = createBox();</span><br><span class="line">    &#125;</span><br><span class="line">    draw = new Draw(&#123;</span><br><span class="line">      type: type as Type, //绘制的几何图形的几何类型</span><br><span class="line">      clickTolerance: 6, //点击公差</span><br><span class="line">      source: drawSource,</span><br><span class="line">      geometryFunction: geometryFunction,</span><br><span class="line">      wrapX: false, //草图在x水平方向平铺</span><br><span class="line">      freehand: false, //是否开启手绘模式</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    draw.on(&#x27;drawstart&#x27;, (event: DragEvent) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;绘制开始&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    draw.on(&#x27;drawabort&#x27;, (event: DragEvent) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;绘制中止&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    draw.on(&#x27;drawend&#x27;, (event: DragEvent) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;绘制结束&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    map.addInteraction(draw);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 添加画图的矢量图层</span><br><span class="line">const addDrawVectorLayer = () =&gt; &#123;</span><br><span class="line">  //定义各种要素的样式</span><br><span class="line">  const image = new Icon(&#123;</span><br><span class="line">    src: &#x27;/Assets/png/marker.png&#x27;, // 使用png图片代替点</span><br><span class="line">    anchor: [0.75, 0.5],</span><br><span class="line">    rotateWithView: true,</span><br><span class="line">  &#125;);</span><br><span class="line">  const styles = &#123;</span><br><span class="line">    Point: new Style(&#123;</span><br><span class="line">      image: image,</span><br><span class="line">    &#125;),</span><br><span class="line">    LineString: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;green&#x27;,</span><br><span class="line">        width: 1,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    Polygon: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;blue&#x27;,</span><br><span class="line">        lineDash: [4],</span><br><span class="line">        width: 3,</span><br><span class="line">      &#125;),</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(0, 0, 255, 0.1)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    LinearRing: [],</span><br><span class="line">    MultiPoint: new Style(&#123;</span><br><span class="line">      image: image,</span><br><span class="line">    &#125;),</span><br><span class="line">    MultiLineString: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;green&#x27;,</span><br><span class="line">        width: 1,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    MultiPolygon: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;yellow&#x27;,</span><br><span class="line">        width: 1,</span><br><span class="line">      &#125;),</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(255, 255, 0, 0.1)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    GeometryCollection: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;magenta&#x27;,</span><br><span class="line">        width: 2,</span><br><span class="line">      &#125;),</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;magenta&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">      image: new CircleStyle(&#123;</span><br><span class="line">        radius: 10,</span><br><span class="line">        fill: undefined,</span><br><span class="line">        stroke: new Stroke(&#123;</span><br><span class="line">          color: &#x27;magenta&#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    Circle: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;red&#x27;,</span><br><span class="line">        width: 2,</span><br><span class="line">      &#125;),</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0,0.2)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;;</span><br><span class="line">  // 根据要素类型设置几何要素的样式</span><br><span class="line">  const styleFunction = (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">    let type = feature.getGeometry()?.getType();</span><br><span class="line">    if (type) return styles[type];</span><br><span class="line">  &#125;;</span><br><span class="line">  //绘制的数据是一个矢量数据，因此需要矢量数据源和矢量图层承载</span><br><span class="line">  drawSource = new VectorSource(&#123; wrapX: false &#125;);</span><br><span class="line">  drawVectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: drawSource,</span><br><span class="line">    style: styleFunction as StyleLike,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(drawVectorLayer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    //配置视图</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [113.24981689453125, 23.126468438108688], //视图中心位置</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;, //指定投影</span><br><span class="line">      zoom: 12, //缩放到的级别</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  // 添加画图的矢量图层</span><br><span class="line">  addDrawVectorLayer();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  width: 700px;</span><br><span class="line">  top: 1em;</span><br><span class="line">  right: 1em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Select"><a href="#5-Select" class="headerlink" title="5 Select"></a>5 Select</h2><h3 id="5-1-new-Select-options"><a href="#5-1-new-Select-options" class="headerlink" title="5.1 new Select(options)"></a>5.1 new Select(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>addCondition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. By default, this is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.never"><code>never</code></a>. Use this if you want to use different events for add and remove instead of <code>toggle</code>.</td></tr><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>以什么方式选择</td></tr><tr><td><code>layers</code></td><td>Array&lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html">Layer</a> &gt; | function | undefined</td><td>能被选择的图层</td></tr><tr><td><code>style</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~StyleLike">StyleLike</a> | null | undefined</td><td>被选中要素的样式</td></tr><tr><td><code>removeCondition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. By default, this is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.never"><code>never</code></a>. Use this if you want to use different events for add and remove instead of <code>toggle</code>.</td></tr><tr><td><code>toggleCondition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. This is in addition to the <code>condition</code> event. By default, <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.shiftKeyOnly"><code>shiftKeyOnly</code></a>, i.e. pressing <code>shift</code> as well as the <code>condition</code> event, adds that feature to the current selection if it is not currently selected, and removes it if it is. See <code>add</code> and <code>remove</code> if you want to use different events instead of a toggle.</td></tr><tr><td><code>multi</code></td><td>boolean (defaults to false)</td><td>用于确定默认行为是否应在单击的地图位置仅选择单个要素或所有（重叠）要素。默认为 false 单选。</td></tr><tr><td><code>features</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a> &gt; | undefined</td><td>Collection where the interaction will place selected features. Optional. If not set the interaction will create a collection. In any case the collection used by the interaction is returned by <a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Select-Select.html#getFeatures"><code>getFeatures</code></a>.</td></tr><tr><td><code>filter</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Select.html#~FilterFunction">FilterFunction</a> | undefined</td><td>过滤函数，（feature，layer）=&gt; boolean</td></tr><tr><td><code>hitTolerance</code></td><td>number (defaults to 0)</td><td>命中检测容差。将检查给定位置周围半径内的像素的特征。</td></tr></tbody></table><h3 id="5-2-Fires"><a href="#5-2-Fires" class="headerlink" title="5.2 Fires"></a>5.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721915543803.png" alt="QQ_1721915543803.png"></p><h3 id="5-3-Methods"><a href="#5-3-Methods" class="headerlink" title="5.3 Methods"></a>5.3 Methods</h3><ul><li>setActive(active:boolean) -激活或停用交互</li><li>getFeatures()=&gt;{<a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a> &gt;}</li></ul><h3 id="5-4-代码实现"><a href="#5-4-代码实现" class="headerlink" title="5.4 代码实现"></a>5.4 代码实现</h3><p>点选和框选</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721917542557.png" alt="QQ_1721917542557.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handlDX&quot;</span>&gt;</span>点选<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleKX&quot;</span>&gt;</span>框选<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; Collection, Feature, Map, View &#125; from &#x27;ol&#x27;;</span><br><span class="line">import Draw, &#123; createBox, createRegularPolygon, DrawEvent, type SketchCoordType &#125; from &#x27;ol/interaction/Draw&#x27;;</span><br><span class="line">import &#123; OSM, Source, Vector as VectorSource &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import &#123; Layer, Tile as TileLayer, Vector as VectorLayer &#125; from &#x27;ol/layer&#x27;;</span><br><span class="line">import &#123; Circle as CircleStyle, Fill, Icon, Stroke, Style &#125; from &#x27;ol/style&#x27;;</span><br><span class="line">import type &#123; Geometry &#125; from &#x27;ol/geom&#x27;;</span><br><span class="line">import type &#123; StyleLike &#125; from &#x27;ol/style/Style&#x27;;</span><br><span class="line">import type &#123; Type &#125; from &#x27;ol/geom/Geometry&#x27;;</span><br><span class="line">import GeoJSON from &#x27;ol/format/GeoJSON&#x27;;</span><br><span class="line">import &#123; Select &#125; from &#x27;ol/interaction&#x27;;</span><br><span class="line">import &#123; click, always, pointerMove, singleClick, never &#125; from &#x27;ol/events/condition&#x27;;</span><br><span class="line">import type LayerRenderer from &#x27;ol/renderer/Layer&#x27;;</span><br><span class="line">import type &#123; SelectEvent &#125; from &#x27;ol/interaction/Select&#x27;;</span><br><span class="line">let map: Map;</span><br><span class="line"></span><br><span class="line">let select: Select;</span><br><span class="line">let draw: Draw;</span><br><span class="line">let drawSource: VectorSource&lt;Feature&lt;Geometry&gt;&gt;;</span><br><span class="line">let drawVectorLayer: VectorLayer&lt;Feature&gt;;</span><br><span class="line">let vectorLayer: VectorLayer&lt;Feature&gt;;</span><br><span class="line"></span><br><span class="line">const handleKX = () =&gt; &#123;</span><br><span class="line">  if (map) &#123;</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">    map.removeInteraction(select);</span><br><span class="line">  &#125;</span><br><span class="line">  // 这里conditions设置为never</span><br><span class="line">  select = new Select(&#123;</span><br><span class="line">    condition: never, // 选中的条件事件类型</span><br><span class="line">    layers: [vectorLayer], // 选择要素的图层列表，图层过滤列表</span><br><span class="line">    // 选中的样式</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0, 1)&#x27;,</span><br><span class="line">        lineDash: [5],</span><br><span class="line">        width: 5,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(select);</span><br><span class="line">  drawSource = new VectorSource(&#123; wrapX: false &#125;);</span><br><span class="line">  drawVectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: drawSource,</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;green&#x27;,</span><br><span class="line">        width: 3,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  draw = new Draw(&#123;</span><br><span class="line">    type: &#x27;Polygon&#x27;, //绘制的几何图形的几何类型</span><br><span class="line">    clickTolerance: 6, //点击公差</span><br><span class="line">    source: drawSource,</span><br><span class="line">    wrapX: false, //草图在x水平方向平铺</span><br><span class="line">    freehand: false, //是否开启手绘模式</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(draw);</span><br><span class="line"></span><br><span class="line">  // 开始绘制，清除已有要素</span><br><span class="line">  draw.on(&#x27;drawstart&#x27;, function () &#123;</span><br><span class="line">    select.getFeatures().clear();</span><br><span class="line">    drawSource.clear();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 结束绘制</span><br><span class="line">  draw.on(&#x27;drawend&#x27;, (e: DrawEvent) =&gt; &#123;</span><br><span class="line">    if (e.feature) &#123;</span><br><span class="line">      // 获取框选范围</span><br><span class="line">      let geometry = e.feature.getGeometry();</span><br><span class="line">      let extent = geometry?.getExtent();</span><br><span class="line"></span><br><span class="line">      // 查询框选范围内的所有点</span><br><span class="line">      if (extent) &#123;</span><br><span class="line">        vectorLayer.getSource()?.forEachFeatureIntersectingExtent(extent, (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">          select.getFeatures().push(feature);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 遍历被选中的要素</span><br><span class="line">      let selected = [];</span><br><span class="line">      let selectedFeatures = select.getFeatures();</span><br><span class="line">      for (let i = 0; i &lt; selectedFeatures.getLength(); i++) &#123;</span><br><span class="line">        let feature = selectedFeatures.item(i);</span><br><span class="line">        let name = feature.get(&#x27;name&#x27;);</span><br><span class="line">        selected.push(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handlDX = () =&gt; &#123;</span><br><span class="line">  if (map) &#123;</span><br><span class="line">    map.removeInteraction(select);</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">  &#125;</span><br><span class="line">  // 这里conditions设置为singleClick</span><br><span class="line">  select = new Select(&#123;</span><br><span class="line">    condition: singleClick, // 选中的条件事件类型</span><br><span class="line">    layers: [vectorLayer], // 选择要素的图层列表，图层过滤列表</span><br><span class="line">    // 选中的样式</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0, 1)&#x27;,</span><br><span class="line">        lineDash: [5],</span><br><span class="line">        width: 5,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    //选定特征的集合</span><br><span class="line">    // features:[]</span><br><span class="line">    // filter 过滤函数: 如下 则安徽和江苏不能选中</span><br><span class="line">    filter: (feature: Feature&lt;Geometry&gt;, layer: Layer&lt;Source, LayerRenderer&lt;any&gt;&gt;) =&gt; &#123;</span><br><span class="line">      let name = feature.get(&#x27;name&#x27;);</span><br><span class="line">      switch (name) &#123;</span><br><span class="line">        case &#x27;安徽&#x27;:</span><br><span class="line">          return false;</span><br><span class="line">        case &#x27;江苏&#x27;:</span><br><span class="line">          return false;</span><br><span class="line">        default:</span><br><span class="line">          return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 监听事件</span><br><span class="line">  select.on(&#x27;select&#x27;, (event: SelectEvent) =&gt; &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">    let features: Collection&lt;Feature&gt; = select.getFeatures();</span><br><span class="line">    console.log(features.getArray());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  map.addInteraction(select);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//定义各种要素的样式</span><br><span class="line">const image = new Icon(&#123;</span><br><span class="line">  src: &#x27;/Assets/png/marker.png&#x27;, // 使用png图片代替点</span><br><span class="line">  anchor: [0.75, 0.5],</span><br><span class="line">  rotateWithView: true,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const styles = &#123;</span><br><span class="line">  Point: new Style(&#123;</span><br><span class="line">    image: image,</span><br><span class="line">  &#125;),</span><br><span class="line">  LineString: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;green&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Polygon: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;blue&#x27;,</span><br><span class="line">      lineDash: [4],</span><br><span class="line">      width: 3,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(236, 240, 241, 0.3)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  LinearRing: [],</span><br><span class="line">  MultiPoint: new Style(&#123;</span><br><span class="line">    image: image,</span><br><span class="line">  &#125;),</span><br><span class="line">  MultiLineString: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;green&#x27;,</span><br><span class="line">      width: 1,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  MultiPolygon: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;yellow&#x27;,</span><br><span class="line">      width: 1,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(236, 240, 241, 0.3)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  GeometryCollection: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;magenta&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;magenta&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">    image: new CircleStyle(&#123;</span><br><span class="line">      radius: 10,</span><br><span class="line">      fill: undefined,</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;magenta&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Circle: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;red&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(255,0,0,0.2)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line">// 根据要素类型设置几何要素的样式</span><br><span class="line">const styleFunction = (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">  let type = feature.getGeometry()?.getType();</span><br><span class="line">  if (type) return styles[type];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  vectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: new VectorSource(&#123;</span><br><span class="line">      url: &#x27;http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson&#x27;,</span><br><span class="line">      format: new GeoJSON(),</span><br><span class="line">    &#125;),</span><br><span class="line">    style: styleFunction as StyleLike,</span><br><span class="line">  &#125;);</span><br><span class="line">  vectorLayer.set(&#x27;name&#x27;, &#x27;中国省份图&#x27;);</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">      vectorLayer,</span><br><span class="line">    ],</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [105.316, 35.13],</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;,</span><br><span class="line">      zoom: 5, // 默认缩放等级</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  // 添加画图的矢量图层</span><br><span class="line">  addVectorLayer();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  top: 1em;</span><br><span class="line">  right: 1em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-Modify"><a href="#6-Modify" class="headerlink" title="6 Modify"></a>6 Modify</h2><blockquote><p>用于修改特征几何的交互。要修改的要素可以通过 source 或 features 指定<br>默认情况下，交互将允许在 alt 按下键时删除顶点。要使用不同的删除条件配置交互，请使用该 deleteCondition 选项。</p></blockquote><h3 id="6-1-new-Modify-options"><a href="#6-1-new-Modify-options" class="headerlink" title="6.1 new Modify(options)"></a>6.1 new Modify(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event will be considered to add or move a vertex to the sketch. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.primaryAction"><code>primaryAction</code></a>.</td></tr><tr><td><code>deleteCondition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. By default, <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.singleClick"><code>singleClick</code></a> with <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.altKeyOnly"><code>altKeyOnly</code></a> results in a vertex deletion.</td></tr><tr><td><code>insertVertexCondition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether a new vertex should be added to the sketch features. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.always"><code>always</code></a>.</td></tr><tr><td><code>pixelTolerance</code></td><td>number (defaults to 10)</td><td>Pixel tolerance for considering the pointer close enough to a segment or vertex for editing.</td></tr><tr><td><code>style</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~StyleLike">StyleLike</a> | <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_flat.html#~FlatStyleLike">FlatStyleLike</a> | undefined</td><td>Style used for the modification point or vertex. For linestrings and polygons, this will be the affected vertex, for circles a point along the circle, and for points the actual point. If not configured, the default edit style is used (see <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style-Style.html"><code>Style</code></a>). When using a style function, the point feature passed to the function will have a <code>features</code> property - an array whose entries are the features that are being modified, and a <code>geometries</code> property - an array whose entries are the geometries that are being modified. Both arrays are in the same order. The <code>geometries</code> are only useful when modifying geometry collections, where the geometry will be the particular geometry from the collection that is being modified.</td></tr><tr><td><code>source</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html">VectorSource</a> | undefined</td><td>The vector source with features to modify. If a vector source is not provided, a feature collection must be provided with the <code>features</code> option.</td></tr><tr><td><code>hitDetection</code></td><td>boolean | <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_BaseVector-BaseVectorLayer.html">BaseVectorLayer</a> | undefined</td><td>When configured, point features will be considered for modification based on their visual appearance, instead of being within the <code>pixelTolerance</code> from the pointer location. When a <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_BaseVector-BaseVectorLayer.html"><code>BaseVectorLayer</code></a> is provided, only the rendered representation of the features on that layer will be considered.</td></tr><tr><td><code>features</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a> &gt; | undefined</td><td>The features the interaction works on. If a feature collection is not provided, a vector source must be provided with the <code>source</code> option.</td></tr><tr><td><code>wrapX</code></td><td>boolean (defaults to false)</td><td>Wrap the world horizontally on the sketch overlay.</td></tr><tr><td><code>snapToPointer</code></td><td>boolean (defaults to !hitDetection)</td><td>The vertex, point or segment being modified snaps to the pointer coordinate when clicked within the <code>pixelTolerance</code>.</td></tr></tbody></table><h3 id="6-2-Fires"><a href="#6-2-Fires" class="headerlink" title="6.2 Fires"></a>6.2 Fires</h3><ul><li><code>modifyend</code>：Triggered upon feature modification end</li><li><code>modifystart</code>：Triggered upon feature modification start</li></ul><h3 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h3><p>对选中的要素进行编辑</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721952431838.png" alt="QQ_1721952431838.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleDX&quot;</span>&gt;</span>点选<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleKX&quot;</span>&gt;</span>框选<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleModify&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; Collection, Feature, Map, View &#125; from &#x27;ol&#x27;;</span><br><span class="line">import Draw, &#123; createBox, createRegularPolygon, DrawEvent, type SketchCoordType &#125; from &#x27;ol/interaction/Draw&#x27;;</span><br><span class="line">import &#123; OSM, Source, Vector as VectorSource &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import &#123; Layer, Tile as TileLayer, Vector as VectorLayer &#125; from &#x27;ol/layer&#x27;;</span><br><span class="line">import &#123; Circle as CircleStyle, Fill, Icon, Stroke, Style &#125; from &#x27;ol/style&#x27;;</span><br><span class="line">import type &#123; Geometry &#125; from &#x27;ol/geom&#x27;;</span><br><span class="line">import type &#123; StyleLike &#125; from &#x27;ol/style/Style&#x27;;</span><br><span class="line">import type &#123; Type &#125; from &#x27;ol/geom/Geometry&#x27;;</span><br><span class="line">import GeoJSON from &#x27;ol/format/GeoJSON&#x27;;</span><br><span class="line">import &#123; Modify, Select &#125; from &#x27;ol/interaction&#x27;;</span><br><span class="line">import &#123; click, always, pointerMove, singleClick, never, altKeyOnly &#125; from &#x27;ol/events/condition&#x27;;</span><br><span class="line">import type LayerRenderer from &#x27;ol/renderer/Layer&#x27;;</span><br><span class="line">import type &#123; SelectEvent &#125; from &#x27;ol/interaction/Select&#x27;;</span><br><span class="line">import &#123; mod &#125; from &#x27;three/examples/jsm/nodes/Nodes.js&#x27;;</span><br><span class="line">let map: Map;</span><br><span class="line"></span><br><span class="line">let select: Select;</span><br><span class="line">let draw: Draw;</span><br><span class="line">let drawSource: VectorSource&lt;Feature&lt;Geometry&gt;&gt;;</span><br><span class="line">let drawVectorLayer: VectorLayer&lt;Feature&gt;;</span><br><span class="line">let vectorLayer: VectorLayer&lt;Feature&gt;;</span><br><span class="line">let modify: Modify;</span><br><span class="line"></span><br><span class="line">const handleKX = () =&gt; &#123;</span><br><span class="line">  if (map) &#123;</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">    map.removeInteraction(select);</span><br><span class="line">  &#125;</span><br><span class="line">  // 这里 conditions 设置为 never</span><br><span class="line">  select = new Select(&#123;</span><br><span class="line">    condition: never, // 选中的条件事件类型</span><br><span class="line">    layers: [vectorLayer], // 选择要素的图层列表，图层过滤列表</span><br><span class="line">    // 选中的样式</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0, 1)&#x27;,</span><br><span class="line">        lineDash: [5],</span><br><span class="line">        width: 5,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(select);</span><br><span class="line">  drawSource = new VectorSource(&#123; wrapX: false &#125;);</span><br><span class="line">  drawVectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: drawSource,</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;green&#x27;,</span><br><span class="line">        width: 3,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  draw = new Draw(&#123;</span><br><span class="line">    type: &#x27;Polygon&#x27;, //绘制的几何图形的几何类型</span><br><span class="line">    clickTolerance: 6, //点击公差</span><br><span class="line">    source: drawSource,</span><br><span class="line">    wrapX: false, //草图在 x 水平方向平铺</span><br><span class="line">    freehand: false, //是否开启手绘模式</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(draw);</span><br><span class="line"></span><br><span class="line">  // 开始绘制，清除已有要素</span><br><span class="line">  draw.on(&#x27;drawstart&#x27;, function () &#123;</span><br><span class="line">    select.getFeatures().clear();</span><br><span class="line">    drawSource.clear();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 结束绘制</span><br><span class="line">  draw.on(&#x27;drawend&#x27;, (e: DrawEvent) =&gt; &#123;</span><br><span class="line">    if (e.feature) &#123;</span><br><span class="line">      // 获取框选范围</span><br><span class="line">      let geometry = e.feature.getGeometry();</span><br><span class="line">      let extent = geometry?.getExtent();</span><br><span class="line"></span><br><span class="line">      // 查询框选范围内的所有点</span><br><span class="line">      if (extent) &#123;</span><br><span class="line">        vectorLayer.getSource()?.forEachFeatureIntersectingExtent(extent, (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">          select.getFeatures().push(feature);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 遍历被选中的要素</span><br><span class="line">      let selected = [];</span><br><span class="line">      let selectedFeatures = select.getFeatures();</span><br><span class="line">      for (let i = 0; i &lt; selectedFeatures.getLength(); i++) &#123;</span><br><span class="line">        let feature = selectedFeatures.item(i);</span><br><span class="line">        let name = feature.get(&#x27;name&#x27;);</span><br><span class="line">        selected.push(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleDX = () =&gt; &#123;</span><br><span class="line">  if (map) &#123;</span><br><span class="line">    map.removeInteraction(select);</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">  &#125;</span><br><span class="line">  // 这里 conditions 设置为 singleClick</span><br><span class="line">  select = new Select(&#123;</span><br><span class="line">    condition: singleClick, // 选中的条件事件类型</span><br><span class="line">    layers: [vectorLayer], // 选择要素的图层列表，图层过滤列表</span><br><span class="line">    // 选中的样式</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0, 1)&#x27;,</span><br><span class="line">        lineDash: [5],</span><br><span class="line">        width: 5,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    //选定特征的集合</span><br><span class="line">    // features:[]</span><br><span class="line">    // filter 过滤函数: 如下 则安徽和江苏不能选中</span><br><span class="line">    filter: (feature: Feature&lt;Geometry&gt;, layer: Layer&lt;Source, LayerRenderer&lt;any&gt;&gt;) =&gt; &#123;</span><br><span class="line">      let name = feature.get(&#x27;name&#x27;);</span><br><span class="line">      switch (name) &#123;</span><br><span class="line">        case &#x27;安徽&#x27;:</span><br><span class="line">          return false;</span><br><span class="line">        case &#x27;江苏&#x27;:</span><br><span class="line">          return false;</span><br><span class="line">        default:</span><br><span class="line">          return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 监听事件</span><br><span class="line">  select.on(&#x27;select&#x27;, (event: SelectEvent) =&gt; &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">    let features: Collection&lt;Feature&gt; = select.getFeatures();</span><br><span class="line">    console.log(features.getArray());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  map.addInteraction(select);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleModify = () =&gt; &#123;</span><br><span class="line">  if (map) &#123;</span><br><span class="line">    map.removeInteraction(modify);</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">  &#125;</span><br><span class="line">  modify = new Modify(&#123;</span><br><span class="line">    // source: vectorLayer.getSource()!, // 绘制的数据源</span><br><span class="line">    features: select.getFeatures(), // 选中的要素</span><br><span class="line">    condition: altKeyOnly, // 选中可以被修改的条件事件类型</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0, 0.2)&#x27;,</span><br><span class="line">        lineDash: [6],</span><br><span class="line">        width: 5,</span><br><span class="line">      &#125;),</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(0,255,0,0.2)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(modify);</span><br><span class="line">&#125;;</span><br><span class="line">//定义各种要素的样式</span><br><span class="line">const image = new Icon(&#123;</span><br><span class="line">  src: &#x27;/Assets/png/marker.png&#x27;, // 使用 png 图片代替点</span><br><span class="line">  anchor: [0.75, 0.5],</span><br><span class="line">  rotateWithView: true,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const styles = &#123;</span><br><span class="line">  Point: new Style(&#123;</span><br><span class="line">    image: image,</span><br><span class="line">  &#125;),</span><br><span class="line">  LineString: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;green&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Polygon: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;blue&#x27;,</span><br><span class="line">      lineDash: [4],</span><br><span class="line">      width: 3,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(236, 240, 241, 0.3)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  LinearRing: [],</span><br><span class="line">  MultiPoint: new Style(&#123;</span><br><span class="line">    image: image,</span><br><span class="line">  &#125;),</span><br><span class="line">  MultiLineString: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;green&#x27;,</span><br><span class="line">      width: 1,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  MultiPolygon: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;yellow&#x27;,</span><br><span class="line">      width: 1,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(236, 240, 241, 0.3)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  GeometryCollection: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;magenta&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;magenta&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">    image: new CircleStyle(&#123;</span><br><span class="line">      radius: 10,</span><br><span class="line">      fill: undefined,</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;magenta&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Circle: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;red&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(255,0,0,0.2)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line">// 根据要素类型设置几何要素的样式</span><br><span class="line">const styleFunction = (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">  let type = feature.getGeometry()?.getType();</span><br><span class="line">  if (type) return styles[type];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  vectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: new VectorSource(&#123;</span><br><span class="line">      url: &#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson &#x27;,</span><br><span class="line">      format: new GeoJSON(),</span><br><span class="line">    &#125;),</span><br><span class="line">    style: styleFunction as StyleLike,</span><br><span class="line">  &#125;);</span><br><span class="line">  vectorLayer.set(&#x27;name&#x27;, &#x27;中国省份图&#x27;);</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">      vectorLayer,</span><br><span class="line">    ],</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [105.316, 35.13],</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;,</span><br><span class="line">      zoom: 5, // 默认缩放等级</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  top: 1em;</span><br><span class="line">  right: 1em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-Snap"><a href="#7-Snap" class="headerlink" title="7 Snap"></a>7 Snap</h2><blockquote><p>鼠标靠近要素时，自动贴过去</p></blockquote><h3 id="7-1-new-Snap-options"><a href="#7-1-new-Snap-options" class="headerlink" title="7.1 new Snap(options)"></a>7.1 new Snap(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>features</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a> &gt; | undefined</td><td>Snap to these features. Either this option or source should be provided.</td></tr><tr><td><code>edge</code></td><td>boolean (defaults to true)</td><td>Snap to edges.</td></tr><tr><td><code>vertex</code></td><td>boolean (defaults to true)</td><td>Snap to vertices.</td></tr><tr><td><code>pixelTolerance</code></td><td>number (defaults to 10)</td><td>Pixel tolerance for considering the pointer close enough to a segment or vertex for snapping.</td></tr><tr><td><code>source</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html">VectorSource</a> | undefined</td><td>Snap to features from this source. Either this option or features should be provided</td></tr></tbody></table><h3 id="7-2-Fires"><a href="#7-2-Fires" class="headerlink" title="7.2 Fires"></a>7.2 Fires</h3><ul><li><code>snap</code>：Triggered upon snapping to vertex or edge</li></ul><h3 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//捕捉的交互</span></span><br><span class="line">  <span class="comment">//必须在修改和绘制交互之后添加捕捉交互</span></span><br><span class="line">  snap = <span class="keyword">new</span> Snap(&#123;</span><br><span class="line">    <span class="comment">//source: vectorLayer.getSource()!,</span></span><br><span class="line">    <span class="attr">features</span>: select.getFeatures(),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(snap);</span><br></pre></td></tr></table></figure><h2 id="8-Extent"><a href="#8-Extent" class="headerlink" title="8 Extent"></a>8 Extent</h2><h3 id="8-1-new-Extent-options"><a href="#8-1-new-Extent-options" class="headerlink" title="8.1 new Extent(options)"></a>8.1 new Extent(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.always"><code>always</code></a>.</td></tr><tr><td><code>extent</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a> | undefined</td><td>Initial extent. Defaults to no initial extent.</td></tr><tr><td><code>boxStyle</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~StyleLike">StyleLike</a> | undefined</td><td>Style for the drawn extent box. Defaults to the <code>Polygon</code> editing style documented in <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style-Style.html"><code>Style</code></a></td></tr><tr><td><code>pixelTolerance</code></td><td>number (defaults to 10)</td><td>Pixel tolerance for considering the pointer close enough to a segment or vertex for editing.</td></tr><tr><td><code>pointerStyle</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style.html#~StyleLike">StyleLike</a> | undefined</td><td>Style for the cursor used to draw the extent. Defaults to the <code>Point</code> editing style documented in <a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style-Style.html"><code>Style</code></a></td></tr><tr><td><code>wrapX</code></td><td>boolean (defaults to false)</td><td>Wrap the drawn extent across multiple maps in the X direction? Only affects visuals, not functionality.</td></tr></tbody></table><h3 id="8-2-Fires"><a href="#8-2-Fires" class="headerlink" title="8.2 Fires"></a>8.2 Fires</h3><ul><li><code>extentchanged</code>： Triggered after the extent is changed</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extent.on(<span class="string">&#x27;extentchanged&#x27;</span>, <span class="function">(<span class="params">e: ExtentEvent</span>) =&gt;</span> &#123;</span><br><span class="line">   select.getFeatures().clear();</span><br><span class="line">   <span class="comment">// 查询框选范围内的所有点</span></span><br><span class="line">   <span class="keyword">let</span> ex = extent.getExtent();</span><br><span class="line">   <span class="keyword">if</span> (ex) &#123;</span><br><span class="line">     vectorLayer.getSource()?.forEachFeatureIntersectingExtent(ex, <span class="function">(<span class="params">feature: Feature&lt;Geometry&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">       select.getFeatures().push(feature);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>去除 extent 与判断鼠标 click 是否在 extent 里</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e: MapBrowserEvent&lt;any&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ex = extent.getExtent();</span><br><span class="line">    <span class="comment">// 如果 click 在 extent 外则 选清除 extent 和 select 所选要素</span></span><br><span class="line">    <span class="keyword">if</span> (ex &amp;&amp; !containsCoordinate(ex, e.coordinate)) &#123;</span><br><span class="line">      select.getFeatures().clear();</span><br><span class="line">      extent.setExtent([]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/2024-07-26-09-45-24.gif" alt="2024-07-26-09-45-24.gif|1095"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; Feature, Map, MapBrowserEvent, View &#125; from &#x27;ol&#x27;;</span><br><span class="line">import Draw, &#123; DrawEvent &#125; from &#x27;ol/interaction/Draw&#x27;;</span><br><span class="line">import &#123; OSM, Source, Vector as VectorSource &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import &#123; Tile as TileLayer, Vector as VectorLayer &#125; from &#x27;ol/layer&#x27;;</span><br><span class="line">import &#123; Circle as CircleStyle, Fill, Icon, Stroke, Style &#125; from &#x27;ol/style&#x27;;</span><br><span class="line">import type &#123; Geometry &#125; from &#x27;ol/geom&#x27;;</span><br><span class="line">import type &#123; StyleLike &#125; from &#x27;ol/style/Style&#x27;;</span><br><span class="line">import GeoJSON from &#x27;ol/format/GeoJSON&#x27;;</span><br><span class="line">import &#123; Extent, Select &#125; from &#x27;ol/interaction&#x27;;</span><br><span class="line">import &#123; click, always, pointerMove, singleClick, never, altKeyOnly, shiftKeyOnly &#125; from &#x27;ol/events/condition&#x27;;</span><br><span class="line">import type &#123; ExtentEvent &#125; from &#x27;ol/interaction/Extent&#x27;;</span><br><span class="line">import &#123; containsCoordinate, createEmpty &#125; from &#x27;ol/extent&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line">let select: Select;</span><br><span class="line">let vectorLayer: VectorLayer&lt;Feature&gt;;</span><br><span class="line">let extent: Extent;</span><br><span class="line">//定义各种要素的样式</span><br><span class="line">const image = new Icon(&#123;</span><br><span class="line">  src: &#x27;/Assets/png/marker.png&#x27;, // 使用 png 图片代替点</span><br><span class="line">  anchor: [0.75, 0.5],</span><br><span class="line">  rotateWithView: true,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const styles = &#123;</span><br><span class="line">  Point: new Style(&#123;</span><br><span class="line">    image: image,</span><br><span class="line">  &#125;),</span><br><span class="line">  LineString: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;green&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Polygon: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;blue&#x27;,</span><br><span class="line">      lineDash: [4],</span><br><span class="line">      width: 3,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(236, 240, 241, 0.3)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  LinearRing: [],</span><br><span class="line">  MultiPoint: new Style(&#123;</span><br><span class="line">    image: image,</span><br><span class="line">  &#125;),</span><br><span class="line">  MultiLineString: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;green&#x27;,</span><br><span class="line">      width: 1,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  MultiPolygon: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;yellow&#x27;,</span><br><span class="line">      width: 1,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(236, 240, 241, 0.3)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  GeometryCollection: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;magenta&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;magenta&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">    image: new CircleStyle(&#123;</span><br><span class="line">      radius: 10,</span><br><span class="line">      fill: undefined,</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;magenta&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Circle: new Style(&#123;</span><br><span class="line">    stroke: new Stroke(&#123;</span><br><span class="line">      color: &#x27;red&#x27;,</span><br><span class="line">      width: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    fill: new Fill(&#123;</span><br><span class="line">      color: &#x27;rgba(255,0,0,0.2)&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 根据要素类型设置几何要素的样式</span><br><span class="line">const styleFunction = (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">  let type = feature.getGeometry()?.getType();</span><br><span class="line">  if (type) return styles[type];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 使用 exten 进行框选</span><br><span class="line">const addKX = () =&gt; &#123;</span><br><span class="line">  // 这里 conditions 设置为 never</span><br><span class="line">  select = new Select(&#123;</span><br><span class="line">    condition: never, // 选中的条件事件类型</span><br><span class="line">    layers: [vectorLayer], // 选择要素的图层列表，图层过滤列表</span><br><span class="line">    // 选中的样式</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(255,0,0, 1)&#x27;,</span><br><span class="line">        lineDash: [5],</span><br><span class="line">        width: 5,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(select);</span><br><span class="line">  // 创建 Extent 交互控件</span><br><span class="line">  extent = new Extent(&#123;</span><br><span class="line">    condition: shiftKeyOnly, //激活范围绘制交互控件的条件</span><br><span class="line">    //绘制范围框的样式</span><br><span class="line">    boxStyle: new Style(&#123;</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;blue&#x27;,</span><br><span class="line">        lineDash: [4],</span><br><span class="line">        width: 3,</span><br><span class="line">      &#125;),</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(0, 0, 255, 0.1)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    pointerStyle: new Style(&#123;</span><br><span class="line">      image: image,</span><br><span class="line">    &#125;), //用于绘制范围的光标样式</span><br><span class="line">  &#125;);</span><br><span class="line">  extent.setActive(true);</span><br><span class="line">  map.addInteraction(extent);</span><br><span class="line"></span><br><span class="line">  extent.on(&#x27;extentchanged&#x27;, (e: ExtentEvent) =&gt; &#123;</span><br><span class="line">    select.getFeatures().clear();</span><br><span class="line">    // 查询框选范围内的所有点</span><br><span class="line">    let ex = extent.getExtent();</span><br><span class="line">    if (ex) &#123;</span><br><span class="line">      vectorLayer.getSource()?.forEachFeatureIntersectingExtent(ex, (feature: Feature&lt;Geometry&gt;) =&gt; &#123;</span><br><span class="line">        select.getFeatures().push(feature);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  map.on(&#x27;click&#x27;, (e: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    let ex = extent.getExtent();</span><br><span class="line">    // 如果 click 在 extent 外则 选清除 extent 和 select 所选要素</span><br><span class="line">    if (ex &amp;&amp; !containsCoordinate(ex, e.coordinate)) &#123;</span><br><span class="line">      select.getFeatures().clear();</span><br><span class="line">      extent.setExtent([]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  vectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: new VectorSource(&#123;</span><br><span class="line">      url: &#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson &#x27;,</span><br><span class="line">      format: new GeoJSON(),</span><br><span class="line">    &#125;),</span><br><span class="line">    style: styleFunction as StyleLike,</span><br><span class="line">  &#125;);</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">      vectorLayer,</span><br><span class="line">    ],</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [105.316, 35.13],</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;,</span><br><span class="line">      zoom: 5, // 默认缩放等级</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  addKX();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  top: 1em;</span><br><span class="line">  right: 1em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-PointerInteraction"><a href="#9-PointerInteraction" class="headerlink" title="9 PointerInteraction"></a>9 PointerInteraction</h2><blockquote><p>Base class that calls user-defined functions on <code>down</code>, <code>move</code> and <code>up</code> events. This class also manages “drag sequences”.<br>When the <code>handleDownEvent</code> user function returns <code>true</code> a drag sequence is started. During a drag sequence the <code>handleDragEvent</code> user function is called on <code>move</code> events. The drag sequence ends when the <code>handleUpEvent</code> user function is called and returns <code>false</code>.</p></blockquote><h3 id="9-1-new-PointerInteraction-options"><a href="#9-1-new-PointerInteraction-options" class="headerlink" title="9.1 new PointerInteraction(options)"></a>9.1 new PointerInteraction(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>handleDownEvent</code></td><td>function | undefined</td><td>Function handling “down” events. If the function returns <code>true</code> then a drag sequence is started.</td></tr><tr><td><code>handleDragEvent</code></td><td>function | undefined</td><td>Function handling “drag” events. This function is called on “move” events during a drag sequence.</td></tr><tr><td><code>handleEvent</code></td><td>function | undefined</td><td>Method called by the map to notify the interaction that a browser event was dispatched to the map. The function may return <code>false</code> to prevent the propagation of the event to other interactions in the map’s interactions chain.</td></tr><tr><td><code>handleMoveEvent</code></td><td>function | undefined</td><td>Function handling “move” events. This function is called on “move” events. This functions is also called during a drag sequence, so during a drag sequence both the <code>handleDragEvent</code> function and this function are called. If <code>handleDownEvent</code> is defined and it returns true this function will not be called during a drag sequence.</td></tr><tr><td><code>handleUpEvent</code></td><td>function | undefined</td><td>Function handling “up” events. If the function returns <code>false</code> then the current drag sequence is stopped.</td></tr><tr><td><code>stopDown</code></td><td>function | undefined</td><td>Should the down event be propagated to other interactions, or should be stopped?</td></tr></tbody></table><h3 id="9-2-Subclasses"><a href="#9-2-Subclasses" class="headerlink" title="9.2 Subclasses"></a>9.2 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragBox-DragBox.html">DragBox</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragPan-DragPan.html">DragPan</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragRotateAndZoom-DragRotateAndZoom.html">DragRotateAndZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragRotate-DragRotate.html">DragRotate</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Draw-Draw.html">Draw</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Extent-Extent.html">Extent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Modify-Modify.html">Modify</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_PinchRotate-PinchRotate.html">PinchRotate</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_PinchZoom-PinchZoom.html">PinchZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Snap-Snap.html">Snap</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Translate-Translate.html">Translate</a></li></ul><h3 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import &#123; Zoom, ZoomSlider, ZoomToExtent &#125; from &#x27;ol/control&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import OSM from &#x27;ol/source/OSM.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defaults as defaultControls &#125; from &#x27;ol/control.js&#x27;;</span><br><span class="line">import type MapEvent from &#x27;ol/MapEvent&#x27;;</span><br><span class="line">import &#123; Pointer &#125; from &#x27;ol/interaction&#x27;;</span><br><span class="line">import type &#123; MapBrowserEvent &#125; from &#x27;ol&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line"></span><br><span class="line">const addPointer = () =&gt; &#123;</span><br><span class="line">  const handleDownEventFun = (event: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Down&#x27;, event);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;;</span><br><span class="line">  const handleUpEventFun = (event: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;up&#x27;, event);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;;</span><br><span class="line">  const handleDragEventFun = (event: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Drag&#x27;, event);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;;</span><br><span class="line">  const handleMoveEventFun = (event: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Move&#x27;, event);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;;</span><br><span class="line">  //鼠标交互事件</span><br><span class="line">  let pointer = new Pointer(&#123;</span><br><span class="line">    handleDownEvent: handleDownEventFun,</span><br><span class="line">    handleUpEvent: handleUpEventFun,</span><br><span class="line">    handleDragEvent: handleDragEventFun,</span><br><span class="line">    handleMoveEvent: handleMoveEventFun,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(pointer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [113.24981689453125, 23.126468438108688],</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;,</span><br><span class="line">      zoom: 12,</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  addPointer();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-Translate"><a href="#10-Translate" class="headerlink" title="10 Translate"></a>10 Translate</h2><blockquote><p>Interaction for translating (moving) features. If you want to translate multiple features in a single action (for example, the collection used by a select interaction), construct the interaction with the <code>features</code> option.</p></blockquote><h3 id="10-1-new-Translate-options"><a href="#10-1-new-Translate-options" class="headerlink" title="10.1 new Translate(options)"></a>10.1 new Translate(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.always"><code>always</code></a>.</td></tr><tr><td><code>features</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a> &gt; | undefined</td><td>Features contained in this collection will be able to be translated together.</td></tr><tr><td><code>layers</code></td><td>Array&lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html">Layer</a> &gt; | function | undefined</td><td>A list of layers from which features should be translated. Alternatively, a filter function can be provided. The function will be called for each layer in the map and should return <code>true</code> for layers that you want to be translatable. If the option is absent, all visible layers will be considered translatable. Not used if <code>features</code> is provided.</td></tr><tr><td><code>filter</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Translate.html#~FilterFunction">FilterFunction</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html"><code>Feature</code></a> and an <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html"><code>Layer</code></a> and returns <code>true</code> if the feature may be translated or <code>false</code> otherwise. Not used if <code>features</code> is provided.</td></tr><tr><td><code>hitTolerance</code></td><td>number (defaults to 0)</td><td>Hit-detection tolerance. Pixels inside the radius around the given position will be checked for features.</td></tr></tbody></table><h3 id="10-2-Fires"><a href="#10-2-Fires" class="headerlink" title="10.2 Fires"></a>10.2 Fires</h3><ul><li><code>translatestart</code>：Triggered upon feature translation start.</li><li><code>translating</code>：Triggered upon feature translation.</li><li><code>translateend</code>：Triggered upon feature translation end.</li></ul><h3 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/2024-07-26-10-25-10.gif" alt="2024-07-26-10-25-10.gif|786"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Select, Translate, defaults <span class="keyword">as</span> defaultInteractions &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/interaction&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> GeoJSON <span class="keyword">from</span> <span class="string">&#x27;ol/format/GeoJSON&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> raster = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//渲染的世界矢量地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> GeoJSON(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//选中效果</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> select = <span class="keyword">new</span> Select();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//平移效果组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> translate = <span class="keyword">new</span> Translate(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">features</span>: select.getFeatures(), <span class="comment">//选中之后的要素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">interactions</span>: defaultInteractions().extend([select, translate]), <span class="comment">//通过默认控件扩展选中与平移交互</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [raster, vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">105.316</span>, <span class="number">35.13</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">5</span>, <span class="comment">// 默认缩放等级</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-DragBox"><a href="#11-DragBox" class="headerlink" title="11 DragBox"></a>11 DragBox</h2><blockquote><p>允 许 用 户 通 过 在 地 图 上 单 击 并 拖 动 来 绘 制 一 个 矢 量 框 ， 通 常 与 一 个 condition 限制它在按住 shift 或其他键时限制它的组合。</p></blockquote><h3 id="11-1-new-DragBox-options"><a href="#11-1-new-DragBox-options" class="headerlink" title="11.1 new DragBox(options)"></a>11.1 new DragBox(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-dragbox’)</td><td>CSS class name for styling the box.</td></tr><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <code>ol/events/condition~mouseActionButton</code>.</td></tr><tr><td><code>minArea</code></td><td>number (defaults to 64)</td><td>The minimum area of the box in pixel, this value is used by the default <code>boxEndCondition</code> function.</td></tr><tr><td><code>boxEndCondition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragBox.html#~EndCondition">EndCondition</a> | undefined</td><td>A function that takes a <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and two <a href="https://openlayers.org/en/latest/apidoc/module-ol_pixel.html#~Pixel"><code>Pixel</code></a> s to indicate whether a <code>boxend</code> event should be fired. Default is <code>true</code> if the area of the box is bigger than the <code>minArea</code> option.</td></tr><tr><td><code>onBoxEnd</code></td><td>function | undefined</td><td>boxend 触发之前要执行的代码</td></tr></tbody></table><h3 id="11-2-Fires"><a href="#11-2-Fires" class="headerlink" title="11.2 Fires"></a>11.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721961564339.png" alt="QQ_1721961564339.png"></p><h3 id="11-3-代码实现"><a href="#11-3-代码实现" class="headerlink" title="11.3 代码实现"></a>11.3 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/2024-07-26-10-42-34.gif" alt="2024-07-26-10-42-34.gif|918"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; DragBox &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/interaction&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; platformModifierKeyOnly &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/events/condition&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; MapBrowserEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;ol&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> dragBox = <span class="keyword">new</span> DragBox(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">condition</span>: platformModifierKeyOnly, <span class="comment">// 按住 ctrl</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">minArea</span>: <span class="number">1000</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">onBoxEnd</span>: <span class="function">(<span class="params">arg1: MapBrowserEvent&lt;any&gt;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> zoom = map.getView().getZoom();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.getView().setZoom(zoom! + <span class="number">1</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(arg1);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addInteraction(dragBox);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><h2 id="12-DragPan"><a href="#12-DragPan" class="headerlink" title="12 DragPan"></a>12 DragPan</h2><blockquote><p>自定义平移行为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; platformModifierKeyOnly &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/events/condition&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; DragPan &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/interaction&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//允许用户通过拖动地图来平移地图。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> dragPan = <span class="keyword">new</span> DragPan(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">condition</span>: platformModifierKeyOnly, <span class="comment">// 按住 ctrl</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addInteraction(dragPan);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-DragAndDrop"><a href="#13-DragAndDrop" class="headerlink" title="13 DragAndDrop"></a>13 DragAndDrop</h2><blockquote><p>拖拽上传矢量数据</p></blockquote><h3 id="13-1-new-DragAndDrop-options"><a href="#13-1-new-DragAndDrop-options" class="headerlink" title="13.1 new DragAndDrop(options)"></a>13.1 new DragAndDrop(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>formatConstructors</code></td><td>Array.&lt;(Class.&lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_format_Feature-FeatureFormat.html">module:ol/format/Feature~FeatureFormat</a> &gt;| <a href="https://openlayers.org/en/latest/apidoc/module-ol_format_Feature-FeatureFormat.html">module:ol/format/Feature~FeatureFormat</a>)&gt; | undefined</td><td>允许拖入的数据格式</td></tr><tr><td><code>source</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html">VectorSource</a> | undefined</td><td>如果有初始的数据源，<strong>拖入时会将旧的数据源移除</strong>，创建新的数据源，如果您想向矢量源添加<code>features</code>而不删除现有<code>features</code>（仅附加），则不要提供源选项，而要监听“<code>addfeatures</code>”事件。</td></tr><tr><td><code>projection</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#~ProjectionLike">ProjectionLike</a> | undefined</td><td>Target projection. By default, the map’s view’s projection is used.</td></tr><tr><td><code>target</code></td><td>HTMLElement | undefined</td><td>The element that is used as the drop target, default is the viewport element.</td></tr></tbody></table><h3 id="13-2-Fires"><a href="#13-2-Fires" class="headerlink" title="13.2 Fires"></a>13.2 Fires</h3><ul><li>addfeatures((<a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragAndDrop.DragAndDropEvent.html">DragAndDropEvent</a>)- Triggered when features are added</li></ul><h3 id="13-3-代码实现"><a href="#13-3-代码实现" class="headerlink" title="13.3 代码实现"></a>13.3 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/2024-07-26-11-04-22.gif" alt="2024-07-26-11-04-22.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; GeoJSON, GPX, KML, TopoJSON &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/format&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; DragAndDrop &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/interaction&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Amap&amp;maxFeatures=50&amp;outputFormat=application%2Fjson &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> GeoJSON(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">4</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      vectorLayer,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//文件夹中拖拉文件到浏览器从而加载地理数据的功能，地理数据是以图片的形式展示在浏览器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> dragAndDrop = <span class="keyword">new</span> DragAndDrop(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: vectorLayer.getSource()!, <span class="comment">// 如果有初始的数据源，拖入时会将旧的数据源移除，创建新的数据源</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    formatConstructors: [GeoJSON, KML <span class="keyword">as</span> any, TopoJSON, GPX], <span class="comment">//拖入的数据格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addInteraction(dragAndDrop);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-KeyboardPan"><a href="#14-KeyboardPan" class="headerlink" title="14 KeyboardPan"></a>14 KeyboardPan</h2><blockquote><p>允许用户使用键盘箭头平移地图</p></blockquote><h3 id="14-1-new-KeyboardPan-options"><a href="#14-1-new-KeyboardPan-options" class="headerlink" title="14.1 new KeyboardPan(options)"></a>14.1 new KeyboardPan(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.noModifierKeys"><code>noModifierKeys</code></a> and <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.targetNotEditable"><code>targetNotEditable</code></a>.</td></tr><tr><td><code>duration</code></td><td>number (defaults to 100)</td><td>Animation duration in milliseconds.</td></tr><tr><td><code>pixelDelta</code></td><td>number (defaults to 128)</td><td>The amount of pixels to pan on each key press.</td></tr></tbody></table><h3 id="14-2-代码实现"><a href="#14-2-代码实现" class="headerlink" title="14.2 代码实现"></a>14.2 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用键盘方向键平移地图</span></span><br><span class="line">  <span class="keyword">let</span> keyboardPan = <span class="keyword">new</span> KeyboardPan(&#123;</span><br><span class="line">    <span class="attr">condition</span>: targetNotEditable,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(keyboardPan);</span><br></pre></td></tr></table></figure><h2 id="15-DragRotate"><a href="#15-DragRotate" class="headerlink" title="15 DragRotate"></a>15 DragRotate</h2><blockquote><p>允许用户通过在地图上单击和拖动来旋转地图</p></blockquote><h3 id="15-1-new-DragRotate-options"><a href="#15-1-new-DragRotate-options" class="headerlink" title="15.1 new DragRotate(options)"></a>15.1 new DragRotate(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.altShiftKeysOnly"><code>altShiftKeysOnly</code></a>.</td></tr><tr><td><code>duration</code></td><td>number (defaults to 250)</td><td>Animation duration in milliseconds.</td></tr></tbody></table><h3 id="15-2-代码实现"><a href="#15-2-代码实现" class="headerlink" title="15.2 代码实现"></a>15.2 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许用户通过在地图上单击和拖动来旋转地图</span></span><br><span class="line">  <span class="keyword">let</span> dragRotate = <span class="keyword">new</span> DragRotate(&#123;</span><br><span class="line">    <span class="attr">condition</span>: platformModifierKeyOnly, <span class="comment">// 按住 ctrl 时生效</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(dragRotate);</span><br></pre></td></tr></table></figure><h2 id="16-DragZoom"><a href="#16-DragZoom" class="headerlink" title="16 DragZoom"></a>16 DragZoom</h2><blockquote><p>允许用户通过在地图上单击并拖动来缩放地图，通常与一个 condition 限制它的键（默认为 shift）被按住时结合使用。</p></blockquote><h3 id="16-1-new-DragZoom-options"><a href="#16-1-new-DragZoom-options" class="headerlink" title="16.1 new DragZoom(options)"></a>16.1 new DragZoom(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-dragzoom’)</td><td>CSS class name for styling the box.</td></tr><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.shiftKeyOnly"><code>shiftKeyOnly</code></a>.</td></tr><tr><td><code>duration</code></td><td>number (defaults to 200)</td><td>Animation duration in milliseconds.</td></tr><tr><td><code>out</code></td><td>boolean (defaults to false)</td><td>Use interaction for zooming out.</td></tr><tr><td><code>minArea</code></td><td>number (defaults to 64)</td><td>The minimum area of the box in pixel, this value is used by the parent default <code>boxEndCondition</code> function.</td></tr></tbody></table><h3 id="16-2-代码实现"><a href="#16-2-代码实现" class="headerlink" title="16.2 代码实现"></a>16.2 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许用户通过单击并拖动地图来缩放地图</span></span><br><span class="line">  <span class="keyword">let</span> dragZoom = <span class="keyword">new</span> DragZoom(&#123;</span><br><span class="line">    <span class="attr">condition</span>: shiftKeyOnly, <span class="comment">// 按住 shift</span></span><br><span class="line">    <span class="attr">out</span>: <span class="literal">true</span>, <span class="comment">//  默认是 false，使用交互进行缩小。true 使用交互进行放大，放大之后镜头越来越远。</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(dragZoom);</span><br></pre></td></tr></table></figure><h2 id="17-MouseWheelZoom"><a href="#17-MouseWheelZoom" class="headerlink" title="17 MouseWheelZoom"></a>17 MouseWheelZoom</h2><blockquote><p>允许用户通过滚动鼠标滚轮来缩放地图。</p></blockquote><h3 id="17-1-new-MouseWheelZoom-options"><a href="#17-1-new-MouseWheelZoom-options" class="headerlink" title="17.1 new MouseWheelZoom(options)"></a>17.1 new MouseWheelZoom(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.always"><code>always</code></a>.</td></tr><tr><td><code>onFocusOnly</code></td><td>boolean (defaults to false)</td><td>When the map’s target has a <code>tabindex</code> attribute set, the interaction will only handle events when the map has the focus.</td></tr><tr><td><code>maxDelta</code></td><td>number (defaults to 1)</td><td>Maximum mouse wheel delta.</td></tr><tr><td><code>duration</code></td><td>number (defaults to 250)</td><td>Animation duration in milliseconds.</td></tr><tr><td><code>timeout</code></td><td>number (defaults to 80)</td><td>Mouse wheel timeout duration in milliseconds.</td></tr><tr><td><code>useAnchor</code></td><td>boolean (defaults to true)</td><td>Enable zooming using the mouse’s location as the anchor. When set to <code>false</code>, zooming in and out will zoom to the center of the screen instead of zooming on the mouse’s location.</td></tr><tr><td><code>constrainResolution</code></td><td>boolean (defaults to false)</td><td>If true, the mouse wheel zoom event will always animate to the closest zoom level after an interaction; false means intermediary zoom levels are allowed.</td></tr></tbody></table><h3 id="17-2-代码实现"><a href="#17-2-代码实现" class="headerlink" title="17.2 代码实现"></a>17.2 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用滚轮缩放</span></span><br><span class="line"> <span class="keyword">let</span> mouseWheelZoom = <span class="keyword">new</span> MouseWheelZoom(&#123;</span><br><span class="line">   <span class="attr">condition</span>: always,</span><br><span class="line"> &#125;);</span><br><span class="line"> map.addInteraction(mouseWheelZoom);</span><br></pre></td></tr></table></figure><h2 id="18-KeyboardZoom"><a href="#18-KeyboardZoom" class="headerlink" title="18 KeyboardZoom\"></a>18 KeyboardZoom\</h2><blockquote><p>使用键盘 + 和 - 按键进行缩放</p></blockquote><h3 id="18-1-new-KeyboardZoom-options"><a href="#18-1-new-KeyboardZoom-options" class="headerlink" title="18.1 new KeyboardZoom(options)"></a>18.1 new KeyboardZoom(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>duration</code></td><td>number (defaults to 100)</td><td>Animation duration in milliseconds.</td></tr><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. The default condition is that <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.targetNotEditable"><code>targetNotEditable</code></a> is fulfilled and that the platform modifier key isn’t pressed ( ! <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.platformModifierKey"><code>platformModifierKey</code></a>).</td></tr><tr><td><code>delta</code></td><td>number (defaults to 1)</td><td>The zoom level delta on each key press.</td></tr></tbody></table><h3 id="18-2-代码实现"><a href="#18-2-代码实现" class="headerlink" title="18.2 代码实现"></a>18.2 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用键盘 + 和 - 按键进行缩放</span></span><br><span class="line">  <span class="keyword">let</span> keyboardZoom = <span class="keyword">new</span> KeyboardZoom(&#123;</span><br><span class="line">    <span class="attr">condition</span>: targetNotEditable,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(keyboardZoom);</span><br></pre></td></tr></table></figure><h2 id="19-DoubleClickZoom"><a href="#19-DoubleClickZoom" class="headerlink" title="19 DoubleClickZoom"></a>19 DoubleClickZoom</h2><blockquote><p>允许用户通过双击地图进行缩放。</p></blockquote><h3 id="19-1-new-DoubleClickZoom-options"><a href="#19-1-new-DoubleClickZoom-options" class="headerlink" title="19.1 new DoubleClickZoom(options)"></a>19.1 new DoubleClickZoom(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>duration</code></td><td>number (defaults to 250)</td><td>Animation duration in milliseconds.</td></tr><tr><td><code>delta</code></td><td>number (defaults to 1)</td><td>The zoom delta applied on each double click.</td></tr></tbody></table><h3 id="19-2-代码实现"><a href="#19-2-代码实现" class="headerlink" title="19.2 代码实现"></a>19.2 代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用双击地图</span></span><br><span class="line">  <span class="keyword">let</span> doubleClickZoom = <span class="keyword">new</span> DoubleClickZoom(&#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>, <span class="comment">//双击缩放的动画时间</span></span><br><span class="line">    <span class="attr">delta</span>: <span class="number">5</span>, <span class="comment">//缩放增量</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addInteraction(doubleClickZoom);</span><br></pre></td></tr></table></figure><h2 id="20-DragRotateAndZoom"><a href="#20-DragRotateAndZoom" class="headerlink" title="20 DragRotateAndZoom"></a>20 DragRotateAndZoom</h2><blockquote><p>允许用户通过在地图上单击和拖动来缩放和旋转地图。默认情况下，此交互仅限于按住 shift 键时</p></blockquote><h3 id="20-1-new-DragRotateAndZoom-options"><a href="#20-1-new-DragRotateAndZoom-options" class="headerlink" title="20.1 new DragRotateAndZoom(options)"></a>20.1 new DragRotateAndZoom(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#~Condition">Condition</a> | undefined</td><td>A function that takes an <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html"><code>MapBrowserEvent</code></a> and returns a boolean to indicate whether that event should be handled. Default is <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_condition.html#.shiftKeyOnly"><code>shiftKeyOnly</code></a>.</td></tr><tr><td><code>duration</code></td><td>number (defaults to 400)</td><td>Animation duration in milliseconds.</td></tr></tbody></table><h3 id="20-2-代码实现"><a href="#20-2-代码实现" class="headerlink" title="20.2 代码实现"></a>20.2 代码实现</h3><pre><code class="js"> // 允许用户通过在地图上单击和拖动来缩放和旋转地图  let dragRotateAndZoom = new DragRotateAndZoom(&#123;    condition: shiftKeyOnly,  &#125;);  map.addInteraction(dragRotateAndZoom);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 openLayer_Layer + Source 各种数据</title>
      <link href="/2024/07/26/03%20openLayer_Layer%20+%20Source%20%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE/"/>
      <url>/2024/07/26/03%20openLayer_Layer%20+%20Source%20%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><blockquote><p>Openlayers 将地图渲染分为图层（layer）与数据源（source）分离，图层是渲染地图数的地图容器，而数据源则作为 GIS 数据的载体，图层要与数据源匹配设置</p></blockquote><h2 id="2-BaseLayer-抽象基类"><a href="#2-BaseLayer-抽象基类" class="headerlink" title="2 BaseLayer - 抽象基类"></a>2 BaseLayer - 抽象基类</h2><blockquote><p>抽象基类；通常仅用于创建子类，而不是在应用中实例化。请注意，对于 <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html"><code>BaseLayer</code></a> 其所有子类，在选项中设置的任何属性均设置为 <a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html"><code>BaseObject</code></a> 层对象上的属性，因此是可观察的，并且具有 get/set 访问器。</p></blockquote><p><code>import BaseLayer from &#39;ol/layer/Base.js&#39;;</code></p><h3 id="2-1-new-BaseLayer-options"><a href="#2-1-new-BaseLayer-options" class="headerlink" title="2.1 new BaseLayer(options)"></a>2.1 new BaseLayer(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-layer’)</td><td>A CSS class name to set to the layer element.</td></tr><tr><td><code>opacity</code></td><td>number (defaults to 1)</td><td>Opacity (0, 1).</td></tr><tr><td><code>visible</code></td><td>boolean (defaults to true)</td><td>Visibility.</td></tr><tr><td><code>extent</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a> | undefined</td><td>The bounding extent for layer rendering. The layer will not be rendered outside of this extent.</td></tr><tr><td><code>zIndex</code></td><td>number | undefined</td><td>The z-index for layer rendering. At rendering time, the layers will be ordered, first by Z-index and then by position. When <code>undefined</code>, a <code>zIndex</code> of 0 is assumed for layers that are added to the map’s <code>layers</code> collection, or <code>Infinity</code> when the layer’s <code>setMap()</code> method was used.</td></tr><tr><td><code>minResolution</code></td><td>number | undefined</td><td>The minimum resolution (inclusive) at which this layer will be visible.</td></tr><tr><td><code>maxResolution</code></td><td>number | undefined</td><td>The maximum resolution (exclusive) below which this layer will be visible.</td></tr><tr><td><code>minZoom</code></td><td>number | undefined</td><td>The minimum view zoom level (exclusive) above which this layer will be visible.</td></tr><tr><td><code>maxZoom</code></td><td>number | undefined</td><td>The maximum view zoom level (inclusive) at which this layer will be visible.</td></tr><tr><td><code>background</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base.html#~BackgroundColor">BackgroundColor</a> | undefined</td><td>Background color for the layer. If not specified, no background will be rendered.</td></tr><tr><td><code>properties</code></td><td>Object.&lt;string, *&gt; | undefined</td><td>Arbitrary observable properties. Can be accessed with <code>#get()</code> and <code>#set()</code>.</td></tr></tbody></table><p><strong>特别注意</strong><br><code>extent</code> : 图层渲染的边界范围。图层不会在此范围之外渲染<br><code>zIndex</code> : 图层渲染的级别，跟 css 样式的 dom 渲染级别是一样的，层级越大就显示在上一层<br><code>properties</code> : 任意可观察的属性。可以通过 <code>#get()</code>和访问<code>#set()</code>。<br><code>visible</code>: 图层的可见性，不可见图层不再请求数据</p><h3 id="2-2-Fires"><a href="#2-2-Fires" class="headerlink" title="2.2 Fires"></a>2.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721788337157.png" alt="QQ_1721788337157.png"></p><h3 id="2-3-Extends"><a href="#2-3-Extends" class="headerlink" title="2.3 Extends"></a>2.3 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h3 id="2-4-Subclasses"><a href="#2-4-Subclasses" class="headerlink" title="2.4 Subclasses"></a>2.4 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Group-LayerGroup.html">LayerGroup</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html">Layer</a></li></ul><h2 id="3-Layer-图层父类"><a href="#3-Layer-图层父类" class="headerlink" title="3 Layer - 图层父类"></a>3 Layer - 图层父类</h2><blockquote><p>所有图层类型均由其派生的基类。</p></blockquote><h3 id="3-1-new-Layer-options"><a href="#3-1-new-Layer-options" class="headerlink" title="3.1 new Layer(options)"></a>3.1 new Layer(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-layer’)</td><td>A CSS class name to set to the layer element.</td></tr><tr><td><code>opacity</code></td><td>number (defaults to 1)</td><td>Opacity (0, 1).</td></tr><tr><td><code>visible</code></td><td>boolean (defaults to true)</td><td>Visibility.</td></tr><tr><td><code>extent</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a> | undefined</td><td>The bounding extent for layer rendering. The layer will not be rendered outside of this extent.</td></tr><tr><td><code>zIndex</code></td><td>number | undefined</td><td>The z-index for layer rendering. At rendering time, the layers will be ordered, first by Z-index and then by position. When <code>undefined</code>, a <code>zIndex</code> of 0 is assumed for layers that are added to the map’s <code>layers</code> collection, or <code>Infinity</code> when the layer’s <code>setMap()</code> method was used.</td></tr><tr><td><code>minResolution</code></td><td>number | undefined</td><td>The minimum resolution (inclusive) at which this layer will be visible.</td></tr><tr><td><code>maxResolution</code></td><td>number | undefined</td><td>The maximum resolution (exclusive) below which this layer will be visible.</td></tr><tr><td><code>minZoom</code></td><td>number | undefined</td><td>The minimum view zoom level (exclusive) above which this layer will be visible.</td></tr><tr><td><code>maxZoom</code></td><td>number | undefined</td><td>The maximum view zoom level (inclusive) at which this layer will be visible.</td></tr><tr><td><code>source</code></td><td>SourceType | undefined</td><td>Source for this layer. If not provided to the constructor, the source can be set by calling <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html#setSource"><code>layer.setSource(source)</code></a> after construction.</td></tr><tr><td><code>map</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html">Map</a> | null | undefined</td><td>Map.</td></tr><tr><td><code>render</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer.html#~RenderFunction">RenderFunction</a> | undefined</td><td>Render function. Takes the frame state as input and is expected to return an HTML element. Will overwrite the default rendering for the layer.</td></tr><tr><td><code>properties</code></td><td>Object.&lt;string, *&gt; | undefined</td><td>Arbitrary observable properties. Can be accessed with <code>#get()</code> and <code>#set()</code>.</td></tr></tbody></table><h3 id="3-2-Fires"><a href="#3-2-Fires" class="headerlink" title="3.2 Fires"></a>3.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724140128.png" alt="image.png"></p><p><strong>注意几个事件：</strong></p><ul><li>A generic <code>change</code> event is fired when <strong>the state of the source changes.</strong> </li><li>A <code>sourceready</code> event is fired when <strong>the layer’s source is ready.</strong></li><li><code>prerender</code> Triggered <strong>before a layer is rendered.</strong></li><li><code>postrender</code> Triggered <strong>after a layer is rendered.。</strong></li></ul><p><strong>所有图层都有上面这几个事件</strong></p><h3 id="3-3-Subclasses"><a href="#3-3-Subclasses" class="headerlink" title="3.3 Subclasses"></a>3.3 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_BaseImage-BaseImageLayer.html">BaseImageLayer</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_BaseTile-BaseTileLayer.html">BaseTileLayer</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_BaseVector-BaseVectorLayer.html">BaseVectorLayer</a></li></ul><h3 id="3-4-Extends"><a href="#3-4-Extends" class="headerlink" title="3.4 Extends"></a>3.4 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html">BaseLayer</a></li></ul><h3 id="3-5-Observable-Properties"><a href="#3-5-Observable-Properties" class="headerlink" title="3.5 Observable Properties"></a>3.5 Observable Properties</h3><table><thead><tr><th>Name</th><th>Type</th><th>Settable</th><th><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a> type</th><th>Description</th></tr></thead><tbody><tr><td><code>extent</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a> | undefined</td><td>yes</td><td><code>change:extent</code></td><td>The layer extent.</td></tr><tr><td><code>maxResolution</code></td><td>number</td><td>yes</td><td><code>change:maxresolution</code></td><td>The maximum resolution of the layer.</td></tr><tr><td><code>maxZoom</code></td><td>number</td><td>yes</td><td><code>change:maxzoom</code></td><td>The maximum zoom level of the layer.</td></tr><tr><td><code>minResolution</code></td><td>number</td><td>yes</td><td><code>change:minresolution</code></td><td>The minimum resolution of the layer.</td></tr><tr><td><code>minZoom</code></td><td>number</td><td>yes</td><td><code>change:minzoom</code></td><td>The minimum zoom level of the layer.</td></tr><tr><td><code>opacity</code></td><td>number</td><td>yes</td><td><code>change:opacity</code></td><td>The opacity of the layer.</td></tr><tr><td><code>source</code></td><td>SourceType | null</td><td>yes</td><td><code>change:source</code></td><td>The layer source (or <code>null</code> if not yet set).</td></tr><tr><td><code>visible</code></td><td>boolean</td><td>yes</td><td><code>change:visible</code></td><td>The value of the <code>visible</code> property of the layer.</td></tr><tr><td><code>zIndex</code></td><td>number | undefined</td><td>yes</td><td><code>change:zindex</code></td><td>The Z-index of the layer.</td></tr></tbody></table><h2 id="4-Source-抽象基类"><a href="#4-Source-抽象基类" class="headerlink" title="4 Source 抽象基类"></a>4 Source 抽象基类</h2><blockquote><p>Abstract base class; normally only used for creating subclasses and not instantiated in apps. Base class for <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html"><code>Layer</code></a> sources.<br>A generic <code>change</code> event is triggered when the state of the source changes.</p></blockquote><h3 id="4-1-new-Source-options"><a href="#4-1-new-Source-options" class="headerlink" title="4.1 new Source(options)"></a>4.1 new Source(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>attributions</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Source.html#~AttributionLike">AttributionLike</a> | undefined</td><td>Attributions.</td></tr><tr><td><code>attributionsCollapsible</code></td><td>boolean (defaults to true)</td><td>Attributions are collapsible.</td></tr><tr><td><code>projection</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#~ProjectionLike">ProjectionLike</a> | undefined</td><td>Projection. Default is the view projection.</td></tr><tr><td><code>state</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Source.html#~State">State</a> (defaults to ‘ready’)</td><td>State.</td></tr><tr><td><code>wrapX</code></td><td>boolean (defaults to false)</td><td>WrapX.</td></tr><tr><td><code>interpolate</code></td><td>boolean (defaults to false)</td><td>Use interpolated values when resampling. By default, the nearest neighbor is used when resampling.</td></tr></tbody></table><h3 id="4-2-Fires"><a href="#4-2-Fires" class="headerlink" title="4.2 Fires"></a>4.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721888439132.png" alt="QQ_1721888439132.png"></p><h3 id="4-3-Subclasses"><a href="#4-3-Subclasses" class="headerlink" title="4.3 Subclasses"></a>4.3 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Image-ImageSource.html">ImageSource</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Tile-TileSource.html">TileSource</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html">VectorSource</a></li></ul><h3 id="4-4-Extends"><a href="#4-4-Extends" class="headerlink" title="4.4 Extends"></a>4.4 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h2 id="5-ImageLayer-影像数据"><a href="#5-ImageLayer-影像数据" class="headerlink" title="5 ImageLayer - 影像数据"></a>5 ImageLayer - 影像数据</h2><p>使用 layer.image+source.image 方式加载，从浏览器加载情况看，影像就是一张 image</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721802838212.png" alt="QQ_1721802838212.png|711"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 影像数据</span></span><br><span class="line"><span class="keyword">const</span> imageLayer = <span class="keyword">new</span> ImageLayer(&#123;</span><br><span class="line">  <span class="attr">source</span>: <span class="keyword">new</span> ImageArcGISRest(&#123;</span><br><span class="line">    <span class="attr">ratio</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://sampleserver6.arcgisonline.com/ArcGIS/rest/services/&#x27;</span> + <span class="string">&#x27;USA/MapServer&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.5</span>, <span class="comment">//透明度</span></span><br><span class="line">  <span class="attr">visible</span>: <span class="literal">true</span>, <span class="comment">//图层的可见性，不可见图层不再请求数据</span></span><br><span class="line">  <span class="attr">extent</span>: [-<span class="number">18372064.265054375</span>, <span class="number">642477.8989716391</span>, -<span class="number">3622231.734945626</span>, <span class="number">8495720.10102836</span>], <span class="comment">//图层渲染范围,该层将不会在此范围之外渲染。</span></span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">1</span>, <span class="comment">//图层渲染的级别，跟css样式的dom渲染级别是一样的，层级越大就显示在上一层</span></span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;ArcGISRest&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//图层渲染之前触发</span></span><br><span class="line">  imageLayer.on(<span class="string">&#x27;prerender&#x27;</span>, <span class="function">(<span class="params">event: RenderEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//在图层渲染完成之后触发</span></span><br><span class="line">  imageLayer.on(<span class="string">&#x27;postrender&#x27;</span>, <span class="function">(<span class="params">event: RenderEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="6-tileLayer-瓦片地图"><a href="#6-tileLayer-瓦片地图" class="headerlink" title="6 tileLayer - 瓦片地图"></a>6 tileLayer - 瓦片地图</h2><p>使用 layer.tile+source.tile 加载.。从浏览器加载可以看出，滚动鼠标浏览器在不断请求，由此可见矢量瓦片由很多个大小相同的图片组成，一般图片大小是 512*512 或 256*256</p><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><p>瓦片地图的工作原理如下：</p><p><strong>切割地图</strong>： 地图数据被分成许多小块，每个小块都被称为一个瓦片。瓦片通常是正方形，具有固定的尺寸，例如256x256像素。</p><p><strong>动态加载</strong>： 当用户在地图上进行平移或缩放操作时，OpenLayers 会动态加载新的瓦片。这些瓦片是根据用户当前视图的位置和缩放级别动态生成的。</p><p><strong>缓存</strong>： 为了提高性能，OpenLayers 通常会在用户浏览地图时缓存已经加载的瓦片。这样，当用户再次浏览同一区域时，OpenLayers 可以直接使用缓存中的瓦片，而不需要重新下载。</p><h3 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a>6.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721803179122.png" alt="QQ_1721803179122.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tileLayer = <span class="keyword">new</span> TileLayer(&#123;</span><br><span class="line">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span><br><span class="line">    <span class="attr">zIndex</span>: <span class="number">0</span>, <span class="comment">//图层渲染级别</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//图层渲染之前触发</span></span><br><span class="line">  tileLayer.on(<span class="string">&#x27;prerender&#x27;</span>, <span class="function">(<span class="params">event: RenderEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//在图层渲染完成之后触发</span></span><br><span class="line">  tileLayer.on(<span class="string">&#x27;postrender&#x27;</span>, <span class="function">(<span class="params">event: RenderEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="7-VectorLayer-矢量地图"><a href="#7-VectorLayer-矢量地图" class="headerlink" title="7 VectorLayer - 矢量地图"></a>7 VectorLayer - 矢量地图</h2><p>一般使用 layer.vector+source.vector 方式加载。</p><p>矢量数据源一般有两种设置方式：</p><ul><li>一种是 features 方法，静态加载矢量地图(如 <strong>geojson</strong>)，或者调用 addFeatrue()，addFeatrues()方法动态加载矢量地图；</li><li>另外一种是 url+format 方法，即设置矢量地图的 url 地址与数据格式 format 来加载矢量地图</li></ul><h3 id="7-1-方式1-："><a href="#7-1-方式1-：" class="headerlink" title="7.1 方式1 ："></a>7.1 方式1 ：</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721807569332.png" alt="QQ_1721807569332.png|695"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加静态矢量数据</span></span><br><span class="line"><span class="keyword">const</span> addStaticVector = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 静态矢量数据</span></span><br><span class="line">  <span class="keyword">let</span> geojson = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">    <span class="attr">features</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;Point&#x27;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [<span class="number">87.16552734375</span>, <span class="number">39.470125122358176</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;LineString&#x27;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="number">79.16748046874999</span>, <span class="number">37.61423141542417</span>],</span><br><span class="line">            [<span class="number">81.27685546875</span>, <span class="number">42.00032514831621</span>],</span><br><span class="line">            [<span class="number">84.111328125</span>, <span class="number">41.52502957323801</span>],</span><br><span class="line">            [<span class="number">84.66064453125</span>, <span class="number">43.229195113965005</span>],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;Polygon&#x27;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [</span><br><span class="line">              [<span class="number">81.71630859375</span>, <span class="number">40.49709237269567</span>],</span><br><span class="line">              [<span class="number">82.0458984375</span>, <span class="number">37.21283151445594</span>],</span><br><span class="line">              [<span class="number">86.220703125</span>, <span class="number">36.59788913307022</span>],</span><br><span class="line">              [<span class="number">86.06689453125</span>, <span class="number">41.04621681452063</span>],</span><br><span class="line">              [<span class="number">81.71630859375</span>, <span class="number">40.49709237269567</span>],</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 矢量几何要素的样式</span></span><br><span class="line">  <span class="keyword">let</span> image = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">    <span class="attr">radius</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">width</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> styles = &#123;</span><br><span class="line">    <span class="attr">Point</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="comment">//点样式</span></span><br><span class="line">        <span class="attr">image</span>: image,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">LineString</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">          <span class="comment">//线的边界样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">Polygon</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">          <span class="comment">//区的边界样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">          <span class="attr">lineDash</span>: [<span class="number">4</span>],</span><br><span class="line">          <span class="attr">width</span>: <span class="number">3</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">          <span class="comment">//区的填充样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;rgba(0, 0, 255, 0.1)&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">LinearRing</span>: [],</span><br><span class="line">    <span class="attr">MultiLineString</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">          <span class="comment">//多线的边界样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">MultiPoint</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="comment">//多点的点样式</span></span><br><span class="line">        <span class="attr">image</span>: image,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">MultiPolygon</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">          <span class="comment">//多区的边界样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">          <span class="comment">//多区的填充样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 255, 0, 0.1)&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">GeometryCollection</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">          <span class="comment">//集合要素的边界样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">          <span class="comment">//集合要素的填充样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">image</span>: <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">          <span class="comment">//集合要素的点样式</span></span><br><span class="line">          <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">fill</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">Circle</span>: [</span><br><span class="line">      <span class="keyword">new</span> Style(&#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">          <span class="comment">//圆的边界样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">          <span class="comment">//圆的填充样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;rgba(255,0,0,0.2)&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 根据要素类型设置几何要素的样式</span></span><br><span class="line">  <span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature: Feature&lt;Geometry&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> type = feature.getGeometry()?.getType();</span><br><span class="line">    <span class="keyword">if</span> (type) <span class="keyword">return</span> styles[type];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置地图投影</span></span><br><span class="line">  <span class="keyword">let</span> projection = <span class="keyword">new</span> Projection(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&#x27;EPSG:3857&#x27;</span>, <span class="comment">//投影编码</span></span><br><span class="line">    <span class="attr">units</span>: <span class="string">&#x27;degrees&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> geo = <span class="keyword">new</span> GeoJSON(); <span class="comment">// 定义geojson的数据格式</span></span><br><span class="line">  <span class="comment">//读取要素数据</span></span><br><span class="line">  <span class="keyword">let</span> featrue = geo.readFeatures(geojson, &#123;</span><br><span class="line">    <span class="attr">featureProjection</span>: projection,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 给数据源添加要素</span></span><br><span class="line">  <span class="keyword">const</span> vectorSource = <span class="keyword">new</span> VectorSource();</span><br><span class="line">  vectorSource.addFeatures(featrue);</span><br><span class="line">  <span class="comment">// 构建矢量图层</span></span><br><span class="line">  <span class="keyword">const</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span><br><span class="line">    <span class="attr">source</span>: vectorSource, <span class="comment">// 定义geojson的数据格式</span></span><br><span class="line">    <span class="attr">style</span>: styleFunction <span class="keyword">as</span> StyleLike, <span class="comment">// 样式设置</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(vectorLayer);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-2-方式2："><a href="#7-2-方式2：" class="headerlink" title="7.2 方式2："></a>7.2 方式2：</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724170412.png" alt="image.png|714"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="comment">// 添加矢量图层 并选择要素时高亮</span></span><br><span class="line"><span class="keyword">const</span> addVectorLayer = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要素样式</span></span><br><span class="line">  <span class="keyword">const</span> style = <span class="keyword">new</span> Style(&#123;</span><br><span class="line">    <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 255, 255, 0.6)&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#319FD3&#x27;</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">text</span>: <span class="keyword">new</span> Text(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span><br><span class="line">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Aprovincial_boundaries&amp;maxFeatures=50&amp;outputFormat=application%2Fjson&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="keyword">new</span> GeoJSON(), <span class="comment">//指定数据读取格式</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">style</span>: <span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//指定样式函数</span></span><br><span class="line">      style?.getText()?.setText(feature.get(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">      <span class="keyword">return</span> style;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(vectorLayer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置矢量图层的高亮</span></span><br><span class="line">  <span class="keyword">const</span> featureOverlay = <span class="keyword">new</span> VectorLayer(&#123;</span><br><span class="line">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(),</span><br><span class="line">    <span class="attr">map</span>: map,</span><br><span class="line">    <span class="attr">style</span>: <span class="keyword">new</span> Style(&#123;</span><br><span class="line">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#f00&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;rgba(255,0,0,0.1)&#x27;</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> highlight: Feature&lt;Geometry&gt; | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由像素值获取点击要素 并显示要素信息</span></span><br><span class="line">  <span class="keyword">const</span> displayFeatureInfo = <span class="keyword">async</span> (pixel: Pixel) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> layer = map.getLayers().item(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (layer <span class="keyword">instanceof</span> VectorLayer) &#123;</span><br><span class="line">      <span class="keyword">let</span> features = <span class="keyword">await</span> layer.getFeatures(pixel);</span><br><span class="line">      <span class="keyword">let</span> feature = features.length &gt; <span class="number">0</span> ? features[<span class="number">0</span>] : <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">if</span> (feature) &#123;</span><br><span class="line">        <span class="comment">//获取到的要素的名称渲染到，屏幕左上角</span></span><br><span class="line">        info.value!.innerHTML = feature.get(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// !为not null的断言操作符</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        info.value!.innerHTML = <span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//没有高亮的要素就要恢复之前的效果</span></span><br><span class="line">      <span class="keyword">if</span> (feature !== highlight) &#123;</span><br><span class="line">        <span class="keyword">if</span> (highlight) &#123;</span><br><span class="line">          featureOverlay?.getSource()?.removeFeature(highlight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (feature) &#123;</span><br><span class="line">          featureOverlay?.getSource()?.addFeature(feature <span class="keyword">as</span> Feature&lt;Geometry&gt;);</span><br><span class="line">        &#125;</span><br><span class="line">        highlight = feature <span class="keyword">as</span> Feature&lt;Geometry&gt;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//地图鼠标移动事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;pointermove&#x27;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//没有拖拽地图触发，将鼠标事件的像素值传入</span></span><br><span class="line">    <span class="keyword">if</span> (!evt.dragging) &#123;</span><br><span class="line">      displayFeatureInfo(evt.pixel);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//地图点击触发函数，将鼠标事件的像素值传入</span></span><br><span class="line">  map.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    displayFeatureInfo(evt.pixel);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-VectorTileLayer-矢量瓦片"><a href="#8-VectorTileLayer-矢量瓦片" class="headerlink" title="8 VectorTileLayer - 矢量瓦片"></a>8 VectorTileLayer - 矢量瓦片</h2><blockquote><p>Mapbox 由于配合其矢量瓦片 PBF 格式（“Protocolbuffer 二进制格式”）文件，有突出的渲染性能，被很多公司和开发者所使用。矢量瓦片的格式有很多种，其中 PBF 格式是一种二进制文件，直接把数据信息压缩位二进制了。</p></blockquote><h3 id="8-1-优势"><a href="#8-1-优势" class="headerlink" title="8.1 优势"></a>8.1 优势</h3><ul><li>数据传输量小，相对与栅格瓦片数据量大大缩小，PBF 主要用于替代 XML 格式。 与 gzip 压缩的相比，写入速度也要快 5 倍，而且读取速度要比 gzip 压缩的要快 6 倍。</li><li>不受分辨率影响，矢量瓦片无论在地图放大到各种级别都是清晰的，都不会出现栅格放大后显示像元的问题。</li><li>动态样式，矢量瓦片会根据用户的定制的样式动态绘制，也可以动态改变</li><li>支持前端查询，由于使用的是矢量瓦片，可以在前端直接进行信息查询</li></ul><h3 id="8-2-缺点"><a href="#8-2-缺点" class="headerlink" title="8.2 缺点"></a>8.2 缺点</h3><ul><li>坐标和属性信息是可以被用户解析的，也就是安全性的问题</li></ul><h3 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h3><p>使用 layer.VectorTileLayer + source.VectorTile 实现，其中 format 为 new MVT()</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721814840545.png" alt="QQ_1721814840545.png|857"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import &#123; Zoom, ZoomSlider, ZoomToExtent &#125; from &#x27;ol/control&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import OSM from &#x27;ol/source/OSM.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defaults as defaultControls &#125; from &#x27;ol/control.js&#x27;;</span><br><span class="line">import type MapEvent from &#x27;ol/MapEvent&#x27;;</span><br><span class="line">import VectorTileLayer from &#x27;ol/layer/VectorTile&#x27;;</span><br><span class="line">import VectorTile from &#x27;ol/source/VectorTile.js&#x27;;</span><br><span class="line">import MVT from &#x27;ol/format/MVT.js&#x27;;</span><br><span class="line">import type MapBrowserEvent from &#x27;ol/MapBrowserEvent&#x27;;</span><br><span class="line">let map: Map;</span><br><span class="line">const info = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line"></span><br><span class="line">// 添加矢量瓦片类型图层 并为map设置pointermove事件</span><br><span class="line">const addVectorTileLayer = () =&gt; &#123;</span><br><span class="line">  const vectorTileLayer = new VectorTileLayer(&#123;</span><br><span class="line">    source: new VectorTile(&#123;</span><br><span class="line">      format: new MVT(), //设置矢量瓦片类型资源</span><br><span class="line">      url: &#x27;https://ahocevar.com/geoserver/gwc/service/tms/1.0.0/&#x27; + &#x27;ne:ne_10m_admin_0_countries@EPSG%3A900913@pbf/&#123;z&#125;/&#123;x&#125;/&#123;-y&#125;.pbf&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(vectorTileLayer);</span><br><span class="line"></span><br><span class="line">  // 为map设置pointermove事件</span><br><span class="line">  map.on(&#x27;pointermove&#x27;, (event: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    // 获取到鼠标当前像素所获取到的要素</span><br><span class="line">    const features = map.getFeaturesAtPixel(event.pixel);</span><br><span class="line">    if (features.length == 0) &#123;</span><br><span class="line">      if (info.value) &#123;</span><br><span class="line">        info.value!.innerText = &#x27;&#x27;;</span><br><span class="line">        info.value.style!.opacity = &#x27;0&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(features);</span><br><span class="line">    const properties = features[0].getProperties();</span><br><span class="line">    console.log(properties);</span><br><span class="line">    if (info.value) &#123;</span><br><span class="line">      info.value.innerText = JSON.stringify(properties, null, 2);</span><br><span class="line">      info.value.style!.opacity = &#x27;1&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [0, 0],</span><br><span class="line">      zoom: 2,</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [],</span><br><span class="line">  &#125;);</span><br><span class="line">  addVectorTileLayer();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">#info &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 10px;</span><br><span class="line">  right: 50px;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-瓦片网格"><a href="#9-瓦片网格" class="headerlink" title="9 瓦片网格"></a>9 瓦片网格</h2><blockquote><p>就是带有格网的瓦片</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721823340891.png" alt="QQ_1721823340891.png|1090"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; TileDebug, XYZ &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/source&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; fromLonLat &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/proj&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//实例化图层数据源对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> TiandituSource = <span class="keyword">new</span> XYZ(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">url</span>: <span class="string">&#x27;http://t0.tianditu.com/DataServer?T=vec_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;&amp;tk=e2a629259868f1b5e14ed43ff28d5c8c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">attributions</span>: <span class="string">&#x27;天地图的属性描述&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">wrapX</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//加载瓦片网格图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> tileLayer = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> TileDebug(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//获取瓦片图层数据对象（osmSource）的网格信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">tileGrid</span>: TiandituSource.getTileGrid()!,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: fromLonLat([<span class="number">87.16552734375</span>, <span class="number">39.470125122358176</span>]),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">8</span>, <span class="comment">//地图初始显示级别</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [tileLayer],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>``</p><h2 id="10-各渠道地图"><a href="#10-各渠道地图" class="headerlink" title="10 各渠道地图"></a>10 各渠道地图</h2><h3 id="10-1-高德地图"><a href="#10-1-高德地图" class="headerlink" title="10.1 高德地图"></a>10.1 高德地图</h3><blockquote><p>高德地图也是一种瓦片图层，是通过行列号与层级(zoom)关系加载的<br>Layer.TileLayer + Source.XYZ</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721870326007.png" alt="QQ_1721870326007.png|954"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; XYZ &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/source&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//高德地图也是一种瓦片图层，是通过行列号与层级(zoom)关系加载的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> gaodeMapLayer = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> XYZ(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27; http://wprd0 &#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">wrapX</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">12958752</span>, <span class="number">4848452</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">8</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">minZoom</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [gaodeMapLayer],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-2-天地图"><a href="#10-2-天地图" class="headerlink" title="10.2 天地图"></a>10.2 天地图</h3><blockquote><p>Layer.TileLayer + Source.XYZ</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721870387476.png" alt="QQ_1721870387476.png|778"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;checkList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in layerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;(checked: boolean) =&gt; layerCtl(checked, i)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; transform &#125; from &#x27;ol/proj&#x27;;</span><br><span class="line">import XYZ from &#x27;ol/source/XYZ&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line">// 选中的图层</span><br><span class="line">const checkList = ref&lt;string[]&gt;([]);</span><br><span class="line">// 所有图层</span><br><span class="line">const layerList = ref&lt;string[]&gt;([]);</span><br><span class="line"></span><br><span class="line">// 图层选择</span><br><span class="line">const layerCtl = (checked: boolean, index: number) =&gt; &#123;</span><br><span class="line">  let layers = map.getLayers();</span><br><span class="line">  layers?.getArray()[index].setVisible(checked);</span><br><span class="line">&#125;;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  // 加载瓦片图层数据(天地图矢量图层)</span><br><span class="line">  const VectorLayer = new TileLayer(&#123;</span><br><span class="line">    source: new XYZ(&#123;</span><br><span class="line">      url: &#x27; http://t0.tianditu.com/DataServer?T=vec_w&amp;x= &#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;&amp;tk=e2a629259868f1b5e14ed43ff28d5c8c&#x27;,</span><br><span class="line">      wrapX: false,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  VectorLayer.set(&#x27;name&#x27;, &#x27;天地图矢量图层&#x27;);</span><br><span class="line">  // 天地图矢量图层注记</span><br><span class="line">  const VectorNoteLayer = new TileLayer(&#123;</span><br><span class="line">    source: new XYZ(&#123;</span><br><span class="line">      url: &#x27; http://t0.tianditu.com/DataServer?T=cva_w&amp;x= &#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;&amp;tk=e2a629259868f1b5e14ed43ff28d5c8c&#x27;,</span><br><span class="line">      wrapX: false,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  VectorNoteLayer.set(&#x27;name&#x27;, &#x27;天地图矢量图层注记&#x27;);</span><br><span class="line">  // 天地图路网</span><br><span class="line">  const roadLayer = new TileLayer(&#123;</span><br><span class="line">    source: new XYZ(&#123;</span><br><span class="line">      url: &#x27; https://t0.tianditu.gov.cn/DataServer?T=vec_w&amp;x= &#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;&amp;tk=e2a629259868f1b5e14ed43ff28d5c8c&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  roadLayer.set(&#x27;name&#x27;, &#x27;天地图路网&#x27;);</span><br><span class="line">  // 天地图文字标注</span><br><span class="line">  const textNoteLayer = new TileLayer(&#123;</span><br><span class="line">    source: new XYZ(&#123;</span><br><span class="line">      url: &#x27; https://t0.tianditu.gov.cn/DataServer?T=cia_w&amp;x= &#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;&amp;tk=e2a629259868f1b5e14ed43ff28d5c8c&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  textNoteLayer.set(&#x27;name&#x27;, &#x27;天地图文字标注&#x27;);</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: transform([114.5, 38.0], &#x27;EPSG:4326&#x27;, &#x27;EPSG:3857&#x27;),</span><br><span class="line">      zoom: 11,</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [VectorLayer, VectorNoteLayer, roadLayer, textNoteLayer],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 获取 map 中图层</span><br><span class="line">  const allLayer = map.getAllLayers();</span><br><span class="line">  allLayer.forEach((e) =&gt; &#123;</span><br><span class="line">    layerList.value.push(e.get(&#x27;name&#x27;));</span><br><span class="line">    checkList.value.push(e.get(&#x27;name&#x27;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 20px;</span><br><span class="line">  top: 20px;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-3-Bing-地图"><a href="#10-3-Bing-地图" class="headerlink" title="10.3 Bing 地图"></a>10.3 Bing 地图</h3><blockquote><p>bingMapS 其实也是一种地图瓦片，采用的是瓦片方式加载，需要用到瓦片地图渲染<br>Layer.TileLayer+Source.BingMaps</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721870463613.png" alt="QQ_1721870463613.png|642"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; BingMaps &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/source&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; fromLonLat &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/proj&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//实例化 Map 对象加载地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> key = <span class="string">&#x27;Q57tupj2UBsQNQdju4xL~xBceblfTd6icjljunbuaCw~AhwA-whmGMsfIpVhslZyknWhFYq-GvWJZqBnqV8Zq1uRlI5YM_qr7_hxvdgnU7nH&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// bingMapS 其实也是一种地图瓦片，采用的是瓦片方式加载，需要用到瓦片地图渲染</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> roads = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> BingMaps(&#123; <span class="attr">key</span>: key, <span class="attr">imagerySet</span>: <span class="string">&#x27;Road&#x27;</span> &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [roads],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: fromLonLat([-<span class="number">109</span>, <span class="number">46.5</span>]),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">6</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-4-ArcGIS"><a href="#10-4-ArcGIS" class="headerlink" title="10.4 ArcGIS"></a>10.4 ArcGIS</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721870905400.png" alt="QQ_1721870905400.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;checkList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in layerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;(checked: boolean) =&gt; layerCtl(checked, i)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; TileArcGISRest, XYZ &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import &#123; fromLonLat &#125; from &#x27;ol/proj&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line">// 选中的图层</span><br><span class="line">const checkList = ref&lt;string[]&gt;([]);</span><br><span class="line">// 所有图层</span><br><span class="line">const layerList = ref&lt;string[]&gt;([]);</span><br><span class="line"></span><br><span class="line">// 图层选择</span><br><span class="line">const layerCtl = (checked: boolean, index: number) =&gt; &#123;</span><br><span class="line">  let layers = map.getLayers();</span><br><span class="line">  layers?.getArray()[index].setVisible(checked);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  // 加载 arcGIS 的 MapServer 地图</span><br><span class="line">  // arcGIS 的地图影像都是通过地图影像切片，将数据裁切成512*512/256*256的大小的图片，加载</span><br><span class="line">  const arcGISMapServerLayer = new TileLayer(&#123;</span><br><span class="line">    source: new TileArcGISRest(&#123;</span><br><span class="line">      url: &#x27; https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer &#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  arcGISMapServerLayer.set(&#x27;name&#x27;, &#x27;TileArcGISRest&#x27;);</span><br><span class="line"></span><br><span class="line">  const arcGISTileLayer = new TileLayer(&#123;</span><br><span class="line">    source: new XYZ(&#123;</span><br><span class="line">      url: &#x27; http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/ &#123;z&#125;/&#123;y&#125;/&#123;x&#125;&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  arcGISTileLayer.set(&#x27;name&#x27;, &#x27;XYZ&#x27;);</span><br><span class="line"></span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: fromLonLat([87.16552734375, 39.470125122358176]),</span><br><span class="line">      zoom: 5,</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [arcGISMapServerLayer, arcGISTileLayer],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 获取 map 中图层</span><br><span class="line">  const allLayer = map.getAllLayers();</span><br><span class="line">  allLayer.forEach((e) =&gt; &#123;</span><br><span class="line">    layerList.value.push(e.get(&#x27;name&#x27;));</span><br><span class="line">    checkList.value.push(e.get(&#x27;name&#x27;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 20px;</span><br><span class="line">  top: 20px;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-JSON-相关"><a href="#11-JSON-相关" class="headerlink" title="11 JSON 相关"></a>11 JSON 相关</h2><h3 id="11-1-GeoJSON"><a href="#11-1-GeoJSON" class="headerlink" title="11.1 GeoJSON"></a>11.1 GeoJSON</h3><h4 id="11-1-1-简介"><a href="#11-1-1-简介" class="headerlink" title="11.1.1 简介"></a>11.1.1 简介</h4><p>GeoJSON 是一种对各种地理数据结构进行编码的格式，基于 Javascript 对象表示法(JavaScript Object Notation, 简称 JSON)的地理空间信息数据交换格式。GeoJSON 对象可以表示几何、特征或者特征集合。</p><p>GeoJSON 支持下面几何类型：点、线、面、多点、多线、多面和几何集合。</p><p>GeoJSON 里的特征包含一个几何对象和其他属性，特征集合表示一系列特征。</p><p>一个完整的 GeoJSON 数据结构总是一个（JSON 术语里的）对象。在 GeoJSON 里，对象由名/值对–也称作成员的集合组成。对每个成员来说，名字总是字符串。成员的值要么是字符串、数字、对象、数组，要么是下面文本常量中的一个：”true”,”false”和”null”。数组的值是上面所说的元素组成。GeoJSON 总是由一个单独的对象组成。这个对象（指的是下面的 GeoJSON 对象）表示几何、特征或者特征集合。GeoJSON 对象可能有任何数目成员（名/值对）。</p><p>GeoJSON 对象必须有一个名字为”type”的成员。这个成员的值是由 GeoJSON 对象的类型所确定的字符串。type 成员的值必须是下面之一：</p><ul><li>Point</li><li>MultiPoint</li><li>LineString</li><li>MultiLineString</li><li>Polygon</li><li>MultiPolygon</li><li>GeometryCollection</li><li>Feature</li><li>FeatureCollection</li></ul><p>GeoJSON 对象可能有一个可选的”crs”成员，它的值必须是一个坐标参考系统的对象。</p><p>GeoJSON 对象可能有一个”bbox”成员，它的值必须是边界框数组。</p><h4 id="11-1-2-new-GeoJSON-options"><a href="#11-1-2-new-GeoJSON-options" class="headerlink" title="11.1.2 new GeoJSON(options)"></a>11.1.2 new GeoJSON(options)</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721876969291.png" alt="QQ_1721876969291.png"></p><h4 id="11-1-3-代码实现"><a href="#11-1-3-代码实现" class="headerlink" title="11.1.3 代码实现"></a>11.1.3 代码实现</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721871220939.png" alt="QQ_1721871220939.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> CircleStyle <span class="keyword">from</span> <span class="string">&#x27;ol/style/Circle&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type Feature <span class="keyword">from</span> <span class="string">&#x27;ol/Feature&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Geometry &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> GeoJSON <span class="keyword">from</span> <span class="string">&#x27;ol/format/GeoJSON&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; StyleLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style/Style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addGeoJsonLayer = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//定义各种要素的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> image = <span class="keyword">new</span> CircleStyle(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">radius</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">fill</span>: <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styles = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Point</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: image,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">LineString</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Polygon</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">lineDash</span>: [<span class="number">4</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;rgba(0, 0, 255, 0.1)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">LinearRing</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiPoint</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: image,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiLineString</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiPolygon</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 255, 0, 0.1)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">GeometryCollection</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: <span class="keyword">new</span> CircleStyle(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">radius</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">fill</span>: <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Circle</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;rgba(255,0,0,0.2)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 根据要素类型设置几何要素的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature: Feature&lt;Geometry&gt;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> type = feature.getGeometry()?.getType();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (type) <span class="keyword">return</span> styles[type];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vectorLayer = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Aprovincial_boundaries&amp;maxFeatures=50&amp;outputFormat=application%2Fjson &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> GeoJSON(), <span class="comment">//指定数据读取格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">style</span>: styleFunction <span class="keyword">as</span> StyleLike,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.addLayer(vectorLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">4</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addGeoJsonLayer();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><h3 id="11-2-TopoJSON"><a href="#11-2-TopoJSON" class="headerlink" title="11.2 TopoJSON"></a>11.2 TopoJSON</h3><h4 id="11-2-1-简介"><a href="#11-2-1-简介" class="headerlink" title="11.2.1 简介"></a>11.2.1 简介</h4><p>TopoJSON 是 GeoJSON 的扩展，增加了拓扑逻辑的编码。支持多种几何图形类型：Point、LineString、Polygon、MultiPoint、MultiLineString、MultiPolygon 和 GeometryCollection。TopoJSON 中的几何图形可能包含用于编码非几何数据的附加属性。</p><p>TopoJSON 文件中的几何图形不是独立地表示，而是由共享的线段（称为弧线）拼接而成，即 TopoJSON 中的每一个几何体都是通过将共享边（被称为 arcs）整合后组成的。</p><p>因此 TopoJSON 消除了冗余，提供了比 GeoJSON 更紧凑的几何表示；典型的 TopoJSON 文件比 GeoJSON 等价文件小 80%。原因：</p><ol><li>边界线只记录一次（例如广西和广东的交界线只记录一次）;</li><li>地理坐标使用整数，不使用浮点数。</li></ol><p>其中：</p><ul><li>点状地理实体 - 由坐标表示</li><li>线状地理实体 - 由弧索引表示</li><li>多边形 - 由弧索引表示</li></ul><p>TopoJSON 文件由三部分组成：</p><ul><li>transform：描述了变换参数</li><li>objects：描述地理实体包含空间及属性信息</li><li>arcs： <strong>描述了有向弧的空间关系，弧由一系列起点及相对于起点的有向偏移坐标表示</strong></li></ul><p>geometries 中 <strong>arcs 如果是负值，说明逆序</strong>。基于这种弧的存储方式可以表达出拓扑关系。</p><p>由于弧只记录一次及地理坐标使用整数，不使用浮点数，相对于 GeoJSON，TopoJSON 消除了冗余，文件大小缩小了 80%。</p><p>topojson 格式说明： <a href="https://github.com/topojson/topojson-specification">https://github.com/topojson/topojson-specification</a></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721871937882.png" alt="QQ_1721871937882.png|732"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Topology&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;transform&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;scale&quot;</span>: [<span class="number">0.0005000500050005</span>, <span class="number">0.00010001000100010001</span>],</span><br><span class="line">    <span class="attr">&quot;translate&quot;</span>: [<span class="number">100</span>, <span class="number">0</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;objects&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;example&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;GeometryCollection&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;geometries&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Point&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;prop0&quot;</span>: <span class="string">&quot;value0&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;coordinates&quot;</span>: [<span class="number">4000</span>, <span class="number">5000</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;LineString&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;prop0&quot;</span>: <span class="string">&quot;value0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;prop1&quot;</span>: <span class="number">0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;arcs&quot;</span>: [<span class="number">0</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;prop0&quot;</span>: <span class="string">&quot;value0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;prop1&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;this&quot;</span>: <span class="string">&quot;that&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;arcs&quot;</span>: [[<span class="number">1</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;arcs&quot;</span>: [</span><br><span class="line">    [[<span class="number">4000</span>, <span class="number">0</span>], [<span class="number">1999</span>, <span class="number">9999</span>], [<span class="number">2000</span>, <span class="number">-9999</span>], [<span class="number">2000</span>, <span class="number">9999</span>]],</span><br><span class="line">    [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">9999</span>], [<span class="number">2000</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">-9999</span>], [<span class="number">-2000</span>, <span class="number">0</span>]]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-2-2-代码实现"><a href="#11-2-2-代码实现" class="headerlink" title="11.2.2 代码实现"></a>11.2.2 代码实现</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721871420626.png" alt="QQ_1721871420626.png|843"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TopoJSON <span class="keyword">from</span> <span class="string">&#x27;ol/format/TopoJSON&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> style = <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 255, 255, 0.6)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27; #319FD3 &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27;/GisData/topojson/world-110m.json&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> TopoJSON(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// don&#x27;t want to render the full world polygon (stored as &#x27;land&#x27; layer),</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// which repeats all countries</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">layers</span>: [<span class="string">&#x27;countries&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">overlaps</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">style</span>: style,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">console</span>.log(vector.getSource()?.getFeatures());</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">0</span>, <span class="number">0</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：这里 GisData 在 public 里</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721871298439.png"></p><h4 id="11-2-3-Geojson-与-Topojson-之间的转换"><a href="#11-2-3-Geojson-与-Topojson-之间的转换" class="headerlink" title="11.2.3 Geojson 与 Topojson 之间的转换"></a>11.2.3 Geojson 与 Topojson 之间的转换</h4><p><code>npm install -g topojson -s</code></p><p>topojson.topology 转换 GeoJSON to TopoJSON.</p><p>geo2topo 转换 GeoJSON to TopoJSON</p><p>详情见：<a href="https://github.com/topojson/topojson">GitHub - topojson/topojson: An extension of GeoJSON that encodes topology! 🌐</a></p><h3 id="11-3-Esrijson"><a href="#11-3-Esrijson" class="headerlink" title="11.3 Esrijson"></a>11.3 Esrijson</h3><h4 id="11-3-1-简介"><a href="#11-3-1-简介" class="headerlink" title="11.3.1 简介"></a>11.3.1 简介</h4><p>EsriJSON 是一种用于对各种地理数据结构进行编码的格式。对于 EsriJSON，其通常是指 FeatureSet 对象，其中 FeatureSet 包含一组 Feature 对象。在 ArcGIS Velocity 中，可以将 EsriJSON 提取为 FeatureSet 对象（要素集合）或者将单个 Feature 对象提取为行。</p><ul><li>支持的 EsriJSON：Velocity 支持保持一致的几何类型、字段集合和空间参考的 EsriJSON。</li><li>生成 EsriJSON：可以使用 ArcGIS Pro 要素转 JSON 工具或 ArcMap 要素转 JSON 工具将数据从多种格式转换为 EsriJSON。</li></ul><p><strong>EsriJSON 要素属性必须保持一致</strong>：在 EsriJSON 数据格式中，属性数据用属性对象内的名称值对表示。任何属性的值都应该具有值或空值。如果要素的某个属性不具有值，则该属性值应以空值表示，而不应缺少该属性名称。</p><p><strong>EsriJSON 文件大小</strong>：最佳做法是，要提取的每个 EsriJSON 文件应小于 100 MB。如果要提取的数据量较大，建议将这些文件分解为每个文件 100 MB 以下。</p><h4 id="11-3-2-代码实现"><a href="#11-3-2-代码实现" class="headerlink" title="11.3.2 代码实现"></a>11.3.2 代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> CircleStyle <span class="keyword">from</span> <span class="string">&#x27;ol/style/Circle&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type Feature <span class="keyword">from</span> <span class="string">&#x27;ol/Feature&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Geometry &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> EsriJSON <span class="keyword">from</span> <span class="string">&#x27;ol/format/EsriJSON&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; StyleLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style/Style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//定义各种要素的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> image = <span class="keyword">new</span> CircleStyle(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">radius</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">fill</span>: <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styles = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Point</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: image,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">LineString</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Polygon</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">lineDash</span>: [<span class="number">4</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;rgba(0, 0, 255, 0.1)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">LinearRing</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiPoint</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: image,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiLineString</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiPolygon</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 255, 0, 0.1)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">GeometryCollection</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: <span class="keyword">new</span> CircleStyle(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">radius</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">fill</span>: <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">color</span>: <span class="string">&#x27;magenta&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Circle</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27;rgba(255,0,0,0.2)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 根据要素类型设置几何要素的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature: Feature&lt;Geometry&gt;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> type = feature.getGeometry()?.getType();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (type) <span class="keyword">return</span> styles[type];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  axios</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    .get(<span class="string">&#x27; http://localhost:8888/openlayer/esrijson/esrijson.json &#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    .then(<span class="function">(<span class="params">response: any</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//指定数据格式是 esrijson</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> esriJSON = <span class="keyword">new</span> EsriJSON();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> arr = response.data;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> vectorSource = <span class="keyword">new</span> VectorSource();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">const</span> arrElement <span class="keyword">of</span> arr) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//读取后台响应的 esrijson 数据，读取要素信息，添加到矢量数据源</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> feature = esriJSON.readFeature(arrElement);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        vectorSource.addFeature(feature);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// let feature = esriJSON.readFeatures(arr);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// vectorSource.addFeatures(feature);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//将矢量图层添加到地图中</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//矢量数据源</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: vectorSource,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//样式设置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">style</span>: styleFunction <span class="keyword">as</span> StyleLike,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">layers</span>: [vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">center</span>: [<span class="number">0</span>, <span class="number">0</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">zoom</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//指定投影</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error: any</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><h4 id="11-3-3-Geojson-与-Esrijson-之间的转换"><a href="#11-3-3-Geojson-与-Esrijson-之间的转换" class="headerlink" title="11.3.3 Geojson 与 Esrijson 之间的转换"></a>11.3.3 Geojson 与 Esrijson 之间的转换</h4><p><code>npm install @esri/arcgis-to-geojson-utils</code></p><h2 id="12-WKT"><a href="#12-WKT" class="headerlink" title="12 WKT"></a>12 WKT</h2><h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><p>WKT(Well-known text)是一种文本标记语言，用于表示矢量几何对象、空间参照系统及空间参照系统之间的转换。</p><p>它的二进制表示方式，亦即 WKB(well-known binary)则胜于在传输和在数据库中存储相同的信息。该格式由开放地理空间联盟(OGC)制定。</p><ul><li><p>WKT - 几何对象：WKT 可以表示的几何对象包括：点，线，多边形，TIN（不规则三角网）及多面体。可以通过几何集合的方式来表示不同维度的几何对象。</p></li><li><p>几何物体的坐标可以是 2D(x,y),3D(x,y,z),4D(x,y,z,m),加上一个属于线性参照系统的 m 值。</p></li></ul><p>WKT 字串样例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POINT(<span class="number">6</span> <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">LINESTRING(<span class="number">3</span> <span class="number">4</span>,<span class="number">10</span> <span class="number">50</span>,<span class="number">20</span> <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">POLYGON((<span class="number">1</span> <span class="number">1</span>,<span class="number">5</span> <span class="number">1</span>,<span class="number">5</span> <span class="number">5</span>,<span class="number">1</span> <span class="number">5</span>,<span class="number">1</span> <span class="number">1</span>),(<span class="number">2</span> <span class="number">2</span>,<span class="number">2</span> <span class="number">3</span>,<span class="number">3</span> <span class="number">3</span>,<span class="number">3</span> <span class="number">2</span>,<span class="number">2</span> <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">MULTIPOINT(<span class="number">3.5</span> <span class="number">5.6</span>, <span class="number">4.8</span> <span class="number">10.5</span>)</span><br><span class="line"></span><br><span class="line">MULTILINESTRING((<span class="number">3</span> <span class="number">4</span>,<span class="number">10</span> <span class="number">50</span>,<span class="number">20</span> <span class="number">25</span>),(-<span class="number">5</span> -<span class="number">8</span>,-<span class="number">10</span> -<span class="number">8</span>,-<span class="number">15</span> -<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">MULTIPOLYGON(((<span class="number">1</span> <span class="number">1</span>,<span class="number">5</span> <span class="number">1</span>,<span class="number">5</span> <span class="number">5</span>,<span class="number">1</span> <span class="number">5</span>,<span class="number">1</span> <span class="number">1</span>),(<span class="number">2</span> <span class="number">2</span>,<span class="number">2</span> <span class="number">3</span>,<span class="number">3</span> <span class="number">3</span>,<span class="number">3</span> <span class="number">2</span>,<span class="number">2</span> <span class="number">2</span>)),((<span class="number">6</span> <span class="number">3</span>,<span class="number">9</span> <span class="number">2</span>,<span class="number">9</span> <span class="number">4</span>,<span class="number">6</span> <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">GEOMETRYCOLLECTION(POINT(<span class="number">4</span> <span class="number">6</span>),LINESTRING(<span class="number">4</span> <span class="number">6</span>,<span class="number">7</span> <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">POINT ZM (<span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">60</span>)   <span class="comment">// Z 一般代表高程信息，M 一般代表其他信息如距离、温度、浓度，湿度等</span></span><br><span class="line"></span><br><span class="line">POINT M (<span class="number">1</span> <span class="number">1</span> <span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="12-2-代码实现"><a href="#12-2-代码实现" class="headerlink" title="12.2 代码实现"></a>12.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721872871517.png" alt="QQ_1721872871517.png|594"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> WKT <span class="keyword">from</span> <span class="string">&#x27;ol/format/WKT&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> raster = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> wkt = <span class="string">&#x27;POLYGON((10.689 -25.092, 34.595 &#x27;</span> + <span class="string">&#x27;-20.170, 38.814 -35.639, 13.502 &#x27;</span> + <span class="string">&#x27;-39.155, 10.689 -25.092))&#x27;</span>; <span class="comment">//wkt 表示面的情况下，也是需要闭合的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//指定数据加载的读取格式 wkt</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> format = <span class="keyword">new</span> WKT();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//用 wkt 读取要素信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> feature = format.readFeature(wkt, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">dataProjection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">// 数据的投影坐标</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">featureProjection</span>: <span class="string">&#x27;EPSG:3857&#x27;</span>, <span class="comment">// 读取之后的要素的投影坐标</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//矢量图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">features</span>: [feature],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//地图渲染</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [raster, vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">2952104.0199</span>, -<span class="number">3277504.823</span>], <span class="comment">//中心点使用的是平面投影3857</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">4</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-WKB"><a href="#13-WKB" class="headerlink" title="13 WKB"></a>13 WKB</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><p>WKB 采用<strong>二进制</strong>进行存储，更方便于计算机处理，因此广泛运用于数据的传输与存储。其存储结构如下：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721872526732.png" alt="QQ_1721872526732.png|1009"></p><p>以二位点 Point(1 1)为例，其 WKB 表达如下：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721872587042.png" alt="QQ_1721872587042.png|682"></p><p>其中：</p><ul><li><strong>byteOrder</strong><br>第 1 个字节表示编码方式，00 为使用 big-endian 编码(XDR)，01 为使用 little-endian 编码(NDR)。他们的不同仅限于在内存中放置字节的顺序，比如我们将 0x1234abcd 写入到以 0×0000 开始的内存中，则结果如下表：<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721872705284.png" alt="QQ_1721872705284.png"></li><li><strong>wkbType</strong><br>第 2 到第 9 字节对矢量数据基本信息进行了定义。<br>第 2 与第 3 个字节规定了矢量数据的类型，如例子中的 0100 代表 Point。<br>第 3 与第 4 个字节规定了矢量数据的维数，如例子中的 0020 代表该点是二维的。</li><li><strong>srid</strong><br>第 5 到第 9 个字节规定了矢量数据的空间参考 SRID，如例子中的 E6100000 是 4326 的整数十六位进制表达。</li><li><strong>structPoint</strong><br>第 10 个字节开始，每 16 个字节就代表一个坐标对，如例子中的 000000000000F03F 是浮点型 1 的十六进制表达</li></ul><h3 id="13-2-代码实现"><a href="#13-2-代码实现" class="headerlink" title="13.2 代码实现"></a>13.2 代码实现</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721872884171.png" alt="QQ_1721872884171.png|714"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> WKB <span class="keyword">from</span> <span class="string">&#x27;ol/format/WKB&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; SimpleGeometry &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//初始化 osm 的瓦片地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> raster = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//wkb16进制的字符串表示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> wkb =</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="string">&#x27;0103000020E61000000100000005000000AFA82D76AC9B5A404201744963AD4140CC9DB93DAE9B5A40740FC69561AD4140767163B4AE9B5A407948E4205EAD4140A5C08AA8AB9B5A400410172E61AD4140AFA82D76AC9B5A404201744963AD4140&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//指定加载的数据格式 wkb</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> format = <span class="keyword">new</span> WKB();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//读取 wkb</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> feature = format.readFeature(wkb, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">/* 因为 view 指定了4326投影 与数据的投影一致 故不需要再转换投影 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// dataProjection: &#x27;EPSG:4326&#x27;,//数据投影</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// featureProjection: &#x27;EPSG:3857&#x27;,//要素投影</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//wkb 也是矢量数据，只不过是矢量数据的二进制表示，因此数据需要使用矢量图层加载</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">features</span>: [feature],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [raster, vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">106.432666551</span>, <span class="number">35.354313681</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">15</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//指定投影</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 跳转视图到要素所在位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.getView().fit(feature.getGeometry() <span class="keyword">as</span> SimpleGeometry);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-XML"><a href="#14-XML" class="headerlink" title="14 XML"></a>14 XML</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721812288654.png" alt="QQ_1721812288654.png|619"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721812338516.png" alt="QQ_1721812338516.png|756"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721812398558.png" alt="QQ_1721812398558.png|424"></p><h2 id="15-KML"><a href="#15-KML" class="headerlink" title="15 KML"></a>15 KML</h2><blockquote><p>KML(Keyhole Markup Language,Keyhole 标记语言)最初是由 Google 旗下的 Keyhole 公司开发和维护的一种基于 XML 的标记语言，利用 XML 语法格式描述地理空间数据(如点、线、面、<br>多边形和模型等)，适合网络环境下的地理信息协作与共享。2008 年 4 月,KML 的最新版本2.2 被 OGC 宣布为开放地理信息编码标准,并改由 OGC 维护和发展。</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721877380601.png" alt="QQ_1721877380601.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;infoDom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> KML <span class="keyword">from</span> <span class="string">&#x27;ol/format/KML&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; FeatureLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/Feature&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Pixel &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/pixel&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> infoDom = ref&lt;HTMLElement | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 显示选择要素的属性信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addEvent = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> displayFeatureInfo = <span class="function">(<span class="params">pixel: Pixel</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> features: FeatureLike[] = [];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//遍历地图当前像素下的所有的矢量要素数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    map.forEachFeatureAtPixel(pixel, <span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      features.push(feature);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (features.length &gt; <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> info = [];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> i, j;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//通过 name 属性获取到要素的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (i = <span class="number">0</span>, j = features.length; i &lt; j; ++i) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        info.push(features[i].get(<span class="string">&#x27;name&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//将要素的 name 值放到 info 框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      infoDom.value!.innerHTML = info.join(<span class="string">&#x27;, &#x27;</span>) || <span class="string">&#x27;(unknown)&#x27;</span>; <span class="comment">//鼠标放在地图 map 上的鼠标样式：手型</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.getTargetElement().style.cursor = <span class="string">&#x27;pointer&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      infoDom.value!.innerHTML = <span class="string">&#x27;&amp;nbsp;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.getTargetElement().style.cursor = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//地图的鼠标移动事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.on(<span class="string">&#x27;pointermove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (evt.dragging) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取到鼠标移动的像素信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> pixel = map.getEventPixel(evt.originalEvent);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    displayFeatureInfo(pixel);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//地图的鼠标点击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map.on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取到鼠标点击的像素信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    displayFeatureInfo(evt.pixel);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 设置样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> style = <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27;rgba(255, 255, 255, 0.6)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">color</span>: <span class="string">&#x27; #319FD3 &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// osm 地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> raster = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(), <span class="comment">//加载 OpenStreetMap</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//kml 是矢量数据，需要使用矢量数据源加载，然后使用矢量图层渲染</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3Aprovincial_boundaries&amp;maxFeatures=50&amp;outputFormat=application%2Fvnd.google-earth.kml%2Bxml &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 指定数据读取格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> KML(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">writeStyles</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 注意这里设置样式的不同</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">defaultStyle</span>: [style],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//渲染矢量图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [raster, vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">108.24981689453125</span>, <span class="number">35.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addEvent();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#info</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><p><strong>注意设置 style 的不同</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">format: <span class="keyword">new</span> KML(&#123;</span><br><span class="line">    <span class="attr">writeStyles</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 注意这里设置样式的不同</span></span><br><span class="line">    <span class="attr">defaultStyle</span>: [style],</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721877497411.png" alt="QQ_1721877497411.png|1262"></p><h2 id="16-GML"><a href="#16-GML" class="headerlink" title="16 GML"></a>16 GML</h2><blockquote><p>地理标记语言（Geographic Markup Language）是由 OGC 定义的 XML（标准通用标记语言的子集）格式，用来表达地理信息要素。它提供一个表达地理信息要素的语言模型，同时可以<br>   用来在 Internet 上进行数据交换。由开放地理信息系统协会（OGC）负责制定它的标准。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gml 是矢量数据，需要使用矢量数据源加载，然后使用矢量图层渲染</span></span><br><span class="line">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span><br><span class="line">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/GisData/gml/map.gml&#x27;</span>,</span><br><span class="line">      <span class="comment">// 指定数据读取格式</span></span><br><span class="line">      <span class="attr">format</span>: <span class="keyword">new</span> GML(),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">style</span>: style,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721887340450.png" alt="QQ_1721887340450.png|829"></p><h2 id="17-GPX"><a href="#17-GPX" class="headerlink" title="17 GPX"></a>17 GPX</h2><blockquote><p>GPX（GPS eXchange Format, GPS 交换格式)是一个 XML 格式，为应用软件设计的通用 GPS 数据格式。<br>它可以用来描述路点、轨迹、路程。这个格式是免费的，可以在不需要付任何许可费用的前提下使用。<br>它的标签保存位置，海拔和时间，可以用来在不同的 GPS 设备和软件之间交换数据。<br>如查看轨迹、在照片的 exif 数据中嵌入地理数据。</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721888185514.png" alt="QQ_1721888185514.png|727"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;infoDom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> GPX <span class="keyword">from</span> <span class="string">&#x27;ol/format/GPX&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Fill, Stroke, Style &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VectorSource <span class="keyword">from</span> <span class="string">&#x27;ol/source/Vector&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; FeatureLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/Feature&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Pixel &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/pixel&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> CircleStyle <span class="keyword">from</span> <span class="string">&#x27;ol/style/Circle&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type Feature <span class="keyword">from</span> <span class="string">&#x27;ol/Feature&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Geometry &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/geom&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; StyleLike &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/style/Style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//定义各种要素的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styles = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Point</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">image</span>: <span class="keyword">new</span> CircleStyle(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">fill</span>: <span class="keyword">new</span> Fill(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,0,0.4)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">radius</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">color</span>: <span class="string">&#x27; #ff0 &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">width</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">LineString</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27; #f00 &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">MultiLineString</span>: <span class="keyword">new</span> Style(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stroke</span>: <span class="keyword">new</span> Stroke(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&#x27; #0f0 &#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 根据要素类型设置几何要素的样式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature: Feature&lt;Geometry&gt;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> type = feature.getGeometry()?.getType();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (type === <span class="string">&#x27;Point&#x27;</span> || type === <span class="string">&#x27;LineString&#x27;</span> || type === <span class="string">&#x27;MultiLineString&#x27;</span>) <span class="keyword">return</span> styles[type];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// osm 地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> raster = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(), <span class="comment">//加载 OpenStreetMap</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//GPX 是矢量数据，需要使用矢量数据源加载，然后使用矢量图层渲染</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> vector = <span class="keyword">new</span> VectorLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> VectorSource(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">url</span>: <span class="string">&#x27;/GisData/gpx/fells_loop.gpx&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 指定数据读取格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">format</span>: <span class="keyword">new</span> GPX(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">style</span>: styleFunction <span class="keyword">as</span> StyleLike,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//渲染矢量图层</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [raster, vector],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [-<span class="number">7916041.528716288</span>, <span class="number">5228379.045749711</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#info</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721887456400.png" alt="QQ_1721887456400.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 openLayer_Control 控件</title>
      <link href="/2024/07/26/02%20openLayer_Control%20%E6%8E%A7%E4%BB%B6/"/>
      <url>/2024/07/26/02%20openLayer_Control%20%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Control-父类"><a href="#1-Control-父类" class="headerlink" title="1 Control - 父类"></a>1 Control - 父类</h2><blockquote><p>A control is a visible widget with a DOM element in a fixed position on the screen. They can involve user input (buttons), or be informational only; the position is determined using CSS. By default these are placed in the container with CSS class name <code>ol-overlaycontainer-stopevent</code>, but can use any outside DOM element.</p><p>This is the base class for controls. You can use it for simple custom controls by creating the element with listeners, creating an instance:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myControl = <span class="keyword">new</span> Control(&#123;<span class="attr">element</span>: myElement&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>and then adding this to the map.</p><p>The main advantage of having this as a control rather than a simple separate DOM element is that preventing propagation is handled for you. Controls will also be objects in a <a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html"><code>Collection</code></a>, so you can use their methods.</p><p>You can also extend this base for your own control class. See examples/custom-controls for an example of how to do this.</p></blockquote><h3 id="1-1-Extends"><a href="#1-1-Extends" class="headerlink" title="1.1 Extends"></a>1.1 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h3 id="1-2-Subclasses"><a href="#1-2-Subclasses" class="headerlink" title="1.2 Subclasses"></a>1.2 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Attribution-Attribution.html">Attribution</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_FullScreen-FullScreen.html">FullScreen</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_MousePosition-MousePosition.html">MousePosition</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_OverviewMap-OverviewMap.html">OverviewMap</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Rotate-Rotate.html">Rotate</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ScaleLine-ScaleLine.html">ScaleLine</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ZoomSlider-ZoomSlider.html">ZoomSlider</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ZoomToExtent-ZoomToExtent.html">ZoomToExtent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Zoom-Zoom.html">Zoom</a></li></ul><h3 id="1-3-new-control-option"><a href="#1-3-new-control-option" class="headerlink" title="1.3 new control(option)"></a>1.3 new control(option)</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723110633.png" alt="image.png"></p><h3 id="1-4-Fires"><a href="#1-4-Fires" class="headerlink" title="1.4 Fires"></a>1.4 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723110646.png" alt="image.png"></p><h3 id="1-5-Methods"><a href="#1-5-Methods" class="headerlink" title="1.5 Methods"></a>1.5 Methods</h3><ul><li><p>setMap(map)</p><blockquote><p>Remove the control from its current map and attach it to the new map. Pass <code>null</code> to just remove the control from the current map. Subclasses may set up event handlers to get notified about changes to the map here.<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723110909.png" alt="image.png"></p></blockquote></li><li><p>getMap() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html">Map</a> | null}</p></li><li><p>setTarget(target)</p><blockquote><p>This function is used to set a target element for the control. It has no effect if it is called after the control has been added to the map (i.e. after <code>setMap</code> is called on the control). If no <code>target</code> is set in the options passed to the control constructor and if <code>setTarget</code> is not called then the control is added to the map’s overlay container.<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723111139.png" alt="image.png"></p></blockquote></li><li><p>render(mapEvent)</p><blockquote><p>Renders the control.<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723111108.png" alt="image.png"></p></blockquote></li></ul><h2 id="2-Zoom-导航控件"><a href="#2-Zoom-导航控件" class="headerlink" title="2 Zoom - 导航控件"></a>2 Zoom - 导航控件</h2><h3 id="2-1-Zoom"><a href="#2-1-Zoom" class="headerlink" title="2.1 Zoom"></a>2.1 Zoom</h3><blockquote><p>A control with 2 buttons, one for zoom in and one for zoom out. This control is one of the default controls of a map. To style this control use css selectors <code>.ol-zoom-in</code> and <code>.ol-zoom-out</code>.<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723111323.png" alt="image.png"></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zoom = <span class="keyword">new</span> Zoom(&#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;ol-zoom-custom&#x27;</span>, <span class="comment">//CSS 类名</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">zoomInLabel</span>: <span class="string">&#x27;+&#x27;</span>, <span class="comment">//放大的文本标签</span></span><br><span class="line">    <span class="attr">zoomOutLabel</span>: <span class="string">&#x27;-&#x27;</span>, <span class="comment">//缩小的文本标签</span></span><br><span class="line">    <span class="attr">zoomInTipLabel</span>: <span class="string">&#x27;放大&#x27;</span>, <span class="comment">//用于按钮提示的文本标签</span></span><br><span class="line">    <span class="attr">zoomOutTipLabel</span>: <span class="string">&#x27;缩小&#x27;</span>, <span class="comment">//用于按钮提示的文本标签</span></span><br><span class="line">    <span class="attr">delta</span>: <span class="number">5</span>, <span class="comment">//每次单击时应用的缩放增量</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addControl(zoom);</span><br></pre></td></tr></table></figure><h3 id="2-2-ZoomSlider"><a href="#2-2-ZoomSlider" class="headerlink" title="2.2 ZoomSlider"></a>2.2 ZoomSlider</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723112714.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slider = <span class="keyword">new</span> ZoomSlider(&#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>, <span class="comment">//以毫秒为单位的动画持续时间</span></span><br><span class="line">    <span class="comment">//应重新呈现控件时调用的函数</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">mapEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(mapEvent);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addControl(slider);</span><br></pre></td></tr></table></figure><h3 id="2-3-ZoomToExtent"><a href="#2-3-ZoomToExtent" class="headerlink" title="2.3 ZoomToExtent"></a>2.3 ZoomToExtent</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723113735.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extent = <span class="keyword">new</span> ZoomToExtent(&#123;</span><br><span class="line">    <span class="comment">// 缩放至特定位置控件</span></span><br><span class="line">    <span class="attr">extent</span>: [<span class="number">813079.7791264898</span>, <span class="number">5929220.284081122</span>, <span class="number">848966.9639063801</span>, <span class="number">5936863.986909639</span>],</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    <span class="attr">tipLabel</span>: <span class="string">&#x27;复位&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addControl(extent);</span><br></pre></td></tr></table></figure><h2 id="3-基础控件实现"><a href="#3-基础控件实现" class="headerlink" title="3 基础控件实现"></a>3 基础控件实现</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721715631048.png" alt="QQ_1721715631048.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缩小</span></span><br><span class="line"><span class="keyword">const</span> zoomOut = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">let</span> zoom = view?.getZoom();</span><br><span class="line">  <span class="keyword">if</span> (zoom) view?.setZoom(zoom - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放大</span></span><br><span class="line"><span class="keyword">const</span> zoomIn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">let</span> zoom = view?.getZoom();</span><br><span class="line">  <span class="keyword">if</span> (zoom) view?.setZoom(zoom + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平移</span></span><br><span class="line"><span class="keyword">const</span> translate = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="comment">//使用proj转换经纬度的坐标为平面坐标</span></span><br><span class="line">  <span class="keyword">let</span> lonLat = fromLonLat([<span class="number">116.36444091796875</span>, <span class="number">39.91184298474967</span>], <span class="string">&#x27;EPSG:4326&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(lonLat);</span><br><span class="line">  <span class="comment">//设置当前视图的中心位置与缩放级别</span></span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    view.setCenter([<span class="number">116.36444091796875</span>, <span class="number">39.91184298474967</span>]);</span><br><span class="line">    view.setZoom(<span class="number">12</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line"><span class="keyword">const</span> rotate = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    <span class="keyword">let</span> rotation = view.getRotation();</span><br><span class="line">    <span class="comment">//设置当前视图旋转的度数，度数是弧度制</span></span><br><span class="line">    view.setRotation(rotation + <span class="built_in">Math</span>.PI / <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复位</span></span><br><span class="line"><span class="keyword">const</span> reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    view.setZoom(zoom);</span><br><span class="line">    view.setRotation(rotation);</span><br><span class="line">    view.setCenter(center);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-图层选择实现"><a href="#4-图层选择实现" class="headerlink" title="4 图层选择实现"></a>4 图层选择实现</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721717903399.png" alt="QQ_1721717903399.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;checkList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in layerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;(checked: boolean) =&gt; layerCtl(checked, i)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import &#123; Zoom, ZoomSlider, ZoomToExtent &#125; from &#x27;ol/control&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import OSM from &#x27;ol/source/OSM.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defaults as defaultControls &#125; from &#x27;ol/control.js&#x27;;</span><br><span class="line">import type MapEvent from &#x27;ol/MapEvent&#x27;;</span><br><span class="line">import VectorSource from &#x27;ol/source/Vector&#x27;;</span><br><span class="line">import GeoJSON from &#x27;ol/format/GeoJSON&#x27;;</span><br><span class="line">import &#123; ImageWMS, XYZ &#125; from &#x27;ol/source&#x27;;</span><br><span class="line">import ImageLayer from &#x27;ol/layer/Image&#x27;;</span><br><span class="line">import VectorLayer from &#x27;ol/layer/Vector&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line">// 选中的图层</span><br><span class="line">const checkList = ref&lt;string[]&gt;([]);</span><br><span class="line">// 所有图层</span><br><span class="line">const layerList = ref&lt;string[]&gt;([]);</span><br><span class="line"></span><br><span class="line">// 图层选择</span><br><span class="line">const layerCtl = (checked: boolean, index: number) =&gt; &#123;</span><br><span class="line">  let layers = map.getLayers();</span><br><span class="line">  layers?.getArray()[index].setVisible(checked);</span><br><span class="line">&#125;;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  // 加载 OSM</span><br><span class="line">  const osmLayer = new TileLayer(&#123;</span><br><span class="line">    source: new OSM(),</span><br><span class="line">  &#125;);</span><br><span class="line">  osmLayer.set(&#x27;name&#x27;, &#x27;OSM&#x27;);</span><br><span class="line">  // 加载天地图</span><br><span class="line">  const tileLayer = new TileLayer(&#123;</span><br><span class="line">    visible: true,</span><br><span class="line">    source: new XYZ(&#123; url: &#x27; http://wprd0 &#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27; &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  tileLayer.set(&#x27;name&#x27;, &#x27;天地图&#x27;);</span><br><span class="line">  // 加载 WMS 服务</span><br><span class="line">  const imageLayer = new ImageLayer(&#123;</span><br><span class="line">    source: new ImageWMS(&#123;</span><br><span class="line">      url: &#x27; http://localhost:8080/geoserver/DTQ/wms &#x27;,</span><br><span class="line">      params: &#123; layers: &#x27;DTQ:D4DTQYC&#x27; &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  imageLayer.set(&#x27;name&#x27;, &#x27;D4DTQYC&#x27;);</span><br><span class="line"></span><br><span class="line">  // 加载 WFS 服务</span><br><span class="line">  const FeatureLayer = new VectorLayer(&#123;</span><br><span class="line">    source: new VectorSource(&#123;</span><br><span class="line">      url: &#x27; http://localhost:8080/geoserver/DTQ/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=DTQ%3AL4DTQDGX01&amp;maxFeatures=50&amp;outputFormat=application%2Fjson &#x27;,</span><br><span class="line">      format: new GeoJSON(),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  FeatureLayer.set(&#x27;name&#x27;, &#x27;L4DTQDGX01&#x27;);</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;,</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [119.316, 32.13],</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;,</span><br><span class="line">      zoom: 13, // 默认缩放等级</span><br><span class="line">      maxZoom: 20, // 最大缩放等级</span><br><span class="line">      minZoom: 5, // 最小缩放等级</span><br><span class="line">    &#125;),</span><br><span class="line">    layers: [osmLayer, tileLayer, imageLayer, FeatureLayer],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 获取 map 中图层</span><br><span class="line">  const allLayer = map.getAllLayers();</span><br><span class="line">  allLayer.forEach((e) =&gt; &#123;</span><br><span class="line">    layerList.value.push(e.get(&#x27;name&#x27;));</span><br><span class="line">    checkList.value.push(e.get(&#x27;name&#x27;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 220px;</span><br><span class="line">  top: 20px;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-MousePosition-位置控件"><a href="#5-MousePosition-位置控件" class="headerlink" title="5 MousePosition - 位置控件"></a>5 MousePosition - 位置控件</h2><blockquote><p>A control to show the 2D coordinates of the mouse cursor. By default, these are in the view projection, but can be in any supported projection. By default the control is shown in the top right corner of the map, but this can be changed by using the css selector <code>.ol-mouse-position</code>.</p><p>On touch devices, which usually do not have a mouse cursor, the coordinates of the currently touched position are shown.</p></blockquote><p><strong>注意</strong>：自定义挂载元素时 className = “<strong>custom</strong>-mouse-position”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;mouse-position&quot;</span> ref=<span class="string">&quot;position&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> mousePosition = <span class="keyword">new</span> MousePosition(&#123;</span><br><span class="line">        <span class="attr">className</span>: <span class="string">&quot;custom-mouse-position&quot;</span>,</span><br><span class="line">        ...</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="5-1-Extends"><a href="#5-1-Extends" class="headerlink" title="5.1 Extends"></a>5.1 Extends</h3><ul><li>[Control]( <a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html</a></li></ul><h3 id="5-2-new-MousePosition-options"><a href="#5-2-new-MousePosition-options" class="headerlink" title="5.2 new MousePosition(options)"></a>5.2 new MousePosition(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-mouse-position’)</td><td>CSS class name.</td></tr><tr><td><code>coordinateFormat</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~CoordinateFormat">CoordinateFormat</a> | undefined</td><td>Coordinate format.</td></tr><tr><td><code>projection</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#~ProjectionLike">ProjectionLike</a> | undefined</td><td>Projection. Default is the view projection.</td></tr><tr><td><code>render</code></td><td>function | undefined</td><td>Function called when the control should be re-rendered. This is called in a <code>requestAnimationFrame</code> callback.</td></tr><tr><td><code>target</code></td><td>HTMLElement | string | undefined</td><td>Specify a target if you want the control to be rendered outside of the map’s viewport.</td></tr><tr><td><code>placeholder</code></td><td>string | undefined</td><td>Markup to show when the mouse position is not available (e.g. when the pointer leaves the map viewport). By default, a non-breaking space is rendered initially and the last position is retained when the mouse leaves the viewport. When a string is provided (e.g. <code>&#39;no position&#39;</code> or <code>&#39;&#39;</code> for an empty string) it is used as a placeholder.</td></tr><tr><td><code>wrapX</code></td><td>boolean (defaults to true)</td><td>Wrap the world horizontally on the projection’s antimeridian, if it is a global projection.</td></tr></tbody></table><h3 id="5-3-Observable-Properties"><a href="#5-3-Observable-Properties" class="headerlink" title="5.3 Observable Properties"></a>5.3 Observable Properties</h3><p><strong>可观察属性即可以使用<code>change:属性字段</code></strong></p><table><thead><tr><th>Name</th><th>Type</th><th>Settable</th><th><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a> type</th><th>Description</th></tr></thead><tbody><tr><td><code>coordinateFormat</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~CoordinateFormat">CoordinateFormat</a> | undefined</td><td>yes</td><td><code>change:coordinateformat</code></td><td>The format to render the current position in.</td></tr><tr><td><code>projection</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_proj_Projection-Projection.html">Projection</a> | undefined</td><td>yes</td><td><code>change:projection</code></td><td>The projection to report mouse position in.</td></tr></tbody></table><h3 id="5-4-Fires"><a href="#5-4-Fires" class="headerlink" title="5.4 Fires"></a>5.4 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721719811685.png" alt="QQ_1721719811685.png"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721721551347.png" alt="QQ_1721721551347.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;map&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mouse-position&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;position&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> position = ref&lt;HTMLElement | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> mousePosition = <span class="keyword">new</span> MousePosition(&#123;</span><br><span class="line">    <span class="comment">//坐标格式</span></span><br><span class="line">    <span class="attr">coordinateFormat</span>: createStringXY(<span class="number">9</span>),</span><br><span class="line">    <span class="comment">//坐标的投影默认使用的是 view 视图的投影</span></span><br><span class="line">    <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span><br><span class="line">    <span class="comment">//坐标信息显示样式类名，默认是&#x27;ol-mouse-position&#x27;</span></span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;custom-mouse-position&#x27;</span>,</span><br><span class="line">    <span class="comment">//指定鼠标控件挂载的位置</span></span><br><span class="line">    <span class="attr">target</span>: position.value <span class="keyword">as</span> HTMLElement,</span><br><span class="line">    <span class="comment">//未定义坐标的标记</span></span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&#x27;未识别鼠标位置&#x27;</span>,</span><br><span class="line">    <span class="comment">// 重新呈现控件时调用的函数</span></span><br><span class="line">    <span class="comment">// render: (MapEvent) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(MapEvent);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addControl(mousePosition);</span><br></pre></td></tr></table></figure><p><strong>其中createStringXY（）是格式化坐标的，让其精确到几位，更多格式化坐标函数见 <a href="https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~CoordinateFormat">CoordinateFormat</a></strong></p><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStringXY&#125; <span class="keyword">from</span> <span class="string">&#x27;ol/coordinate.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coord = [<span class="number">7.85</span>, <span class="number">47.983333</span>];</span><br><span class="line"><span class="keyword">const</span> stringifyFunc = createStringXY(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> out = stringifyFunc(coord);</span><br><span class="line"><span class="comment">// out is now &#x27;7.85, 47.98&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-OverviewMap-鹰眼控件"><a href="#6-OverviewMap-鹰眼控件" class="headerlink" title="6 OverviewMap-鹰眼控件"></a>6 OverviewMap-鹰眼控件</h2><blockquote><p>创建一个新的控件，其中的地图可作为另一个定义地图的总览图。</p></blockquote><h3 id="6-1-Extends"><a href="#6-1-Extends" class="headerlink" title="6.1 Extends"></a>6.1 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">Control</a></li></ul><h3 id="6-2-new-OverviewMap-options"><a href="#6-2-new-OverviewMap-options" class="headerlink" title="6.2 new OverviewMap(options)"></a>6.2 new OverviewMap(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-overviewmap’)</td><td>CSS class name.</td></tr><tr><td><code>collapsed</code></td><td>boolean (defaults to true)</td><td>Whether the control should start collapsed or not (expanded).</td></tr><tr><td><code>collapseLabel</code></td><td>string | HTMLElement (defaults to ‘‹’)</td><td>Text label to use for the expanded overviewmap button. Instead of text, also an element (e.g. a <code>span</code> element) can be used.</td></tr><tr><td><code>collapsible</code></td><td>boolean (defaults to true)</td><td>Whether the control can be collapsed or not.</td></tr><tr><td><code>label</code></td><td>string | HTMLElement (defaults to ‘›’)</td><td>Text label to use for the collapsed overviewmap button. Instead of text, also an element (e.g. a <code>span</code> element) can be used.</td></tr><tr><td><code>layers</code></td><td>Array&lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html">BaseLayer</a> &gt; | <a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html">BaseLayer</a> &gt; | undefined</td><td>Layers for the overview map.</td></tr><tr><td><code>render</code></td><td>function | undefined</td><td>Function called when the control should be re-rendered. This is called in a <code>requestAnimationFrame</code> callback.</td></tr><tr><td><code>rotateWithView</code></td><td>boolean (defaults to false)</td><td>Whether the control view should rotate with the main map view.</td></tr><tr><td><code>target</code></td><td>HTMLElement | string | undefined</td><td>Specify a target if you want the control to be rendered outside of the map’s viewport.</td></tr><tr><td><code>tipLabel</code></td><td>string (defaults to ‘Overview map’)</td><td>Text label to use for the button tip.</td></tr></tbody></table><p>| <code>view</code></p><pre><code>     | [View](https://openlayers.org/en/latest/apidoc/module-ol_View-View.html) \| undefined | Custom view for the overview map (should use same projection as main map). If not provided, a default view with the same projection as the main map will be used. |</code></pre><h3 id="6-3-Fires"><a href="#6-3-Fires" class="headerlink" title="6.3 Fires"></a>6.3 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721721154634.png" alt="QQ_1721721154634.png"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721721528028.png" alt="QQ_1721721528028.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">const</span> overviewMap = <span class="keyword">new</span> OverviewMap(&#123;</span><br><span class="line">    <span class="comment">//鹰眼控件样式（默认为 ol-overviewmap）</span></span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;ol-overviewmap ol-custom-overviewmap&#x27;</span>,</span><br><span class="line">    <span class="attr">layers</span>: [</span><br><span class="line">      <span class="keyword">new</span> TileLayer(&#123;</span><br><span class="line">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//当前的鹰眼图会跟随当前的视图旋转</span></span><br><span class="line">    <span class="attr">rotateWithView</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">collapseLabel</span>: <span class="string">&#x27;\u00BB&#x27;</span>,</span><br><span class="line">    <span class="comment">//鹰眼控件折叠时功能按钮上的标识</span></span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;\u00AB&#x27;</span>,</span><br><span class="line">    <span class="comment">//初始为展开显示方式</span></span><br><span class="line">    <span class="attr">collapsed</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">map.addControl(overviewMap);</span><br></pre></td></tr></table></figure><h2 id="7-FullScreen-全屏控件"><a href="#7-FullScreen-全屏控件" class="headerlink" title="7 FullScreen - 全屏控件"></a>7 FullScreen - 全屏控件</h2><h3 id="7-1-Extends"><a href="#7-1-Extends" class="headerlink" title="7.1 Extends"></a>7.1 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">Control</a></li></ul><h3 id="7-2-new-FullScreen-options"><a href="#7-2-new-FullScreen-options" class="headerlink" title="7.2 new FullScreen(options)"></a>7.2 new FullScreen(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string (defaults to ‘ol-full-screen’)</td><td>CSS class name.</td></tr><tr><td><code>label</code></td><td>string | Text | HTMLElement (defaults to ‘\u2922’)</td><td>Text label to use for the button. Instead of text, also an element (e.g. a <code>span</code> element) can be used.</td></tr><tr><td><code>labelActive</code></td><td>string | Text | HTMLElement (defaults to ‘\u00d7’)</td><td>Text label to use for the button when full-screen is active. Instead of text, also an element (e.g. a <code>span</code> element) can be used.</td></tr><tr><td><code>activeClassName</code></td><td>string (defaults to className + ‘-true’)</td><td>CSS class name for the button when full-screen is active.</td></tr><tr><td><code>inactiveClassName</code></td><td>string (defaults to className + ‘-false’)</td><td>CSS class name for the button when full-screen is inactive.</td></tr><tr><td><code>tipLabel</code></td><td>string (defaults to ‘Toggle full-screen’)</td><td>Text label to use for the button tip.</td></tr><tr><td><code>keys</code></td><td>boolean (defaults to false)</td><td>Full keyboard access.</td></tr><tr><td><code>target</code></td><td>HTMLElement | string | undefined</td><td>Specify a target if you want the control to be rendered outside of the map’s viewport.</td></tr><tr><td><code>source</code></td><td>HTMLElement | string | undefined</td><td>The element to be displayed fullscreen. When not provided, the element containing the map viewport will be displayed fullscreen.</td></tr></tbody></table><h3 id="7-3-Fires"><a href="#7-3-Fires" class="headerlink" title="7.3 Fires"></a>7.3 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721722148792.png" alt="QQ_1721722148792.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullScreen = <span class="keyword">new</span> FullScreen(&#123; <span class="attr">tipLabel</span>: <span class="string">&#x27;全屏&#x27;</span> &#125;);</span><br><span class="line">map.addControl(fullScreen);</span><br></pre></td></tr></table></figure><h2 id="8-测量控件"><a href="#8-测量控件" class="headerlink" title="8 测量控件"></a>8 测量控件</h2><h3 id="8-1-unByKey-key"><a href="#8-1-unByKey-key" class="headerlink" title="8.1 unByKey(key)"></a>8.1 unByKey(key)</h3><blockquote><p>Removes an event listener using the key returned by <code>on()</code> or <code>once()</code>.</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724092408.png" alt="image.png"></p><p><strong>注意：map 不要用 ref 包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;measureCtl(&#x27;Polygon&#x27;)&quot;</span>&gt;</span>面积<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;measureCtl(&#x27;LineString&#x27;)&quot;</span>&gt;</span>距离<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import Map from &#x27;ol/Map.js&#x27;;</span><br><span class="line">import View from &#x27;ol/View.js&#x27;;</span><br><span class="line">import &#123; Zoom, ZoomSlider, ZoomToExtent &#125; from &#x27;ol/control&#x27;;</span><br><span class="line">import TileLayer from &#x27;ol/layer/Tile.js&#x27;;</span><br><span class="line">import OSM from &#x27;ol/source/OSM.js&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defaults as defaultControls &#125; from &#x27;ol/control.js&#x27;;</span><br><span class="line">import * as sphere from &#x27;ol/sphere&#x27;;</span><br><span class="line">import &#123; Circle, Geometry, LineString, Polygon &#125; from &#x27;ol/geom&#x27;;</span><br><span class="line">import Feature from &#x27;ol/Feature&#x27;;</span><br><span class="line">import &#123; MapBrowserEvent, Overlay &#125; from &#x27;ol&#x27;;</span><br><span class="line">import VectorLayer from &#x27;ol/layer/Vector&#x27;;</span><br><span class="line">import VectorSource from &#x27;ol/source/Vector&#x27;;</span><br><span class="line">import Style from &#x27;ol/style/Style&#x27;;</span><br><span class="line">import Fill from &#x27;ol/style/Fill&#x27;;</span><br><span class="line">import Stroke from &#x27;ol/style/Stroke&#x27;;</span><br><span class="line">import CircleStyle from &#x27;ol/style/Circle.js&#x27;;</span><br><span class="line">import Draw, &#123; DrawEvent &#125; from &#x27;ol/interaction/Draw.js&#x27;;</span><br><span class="line">import type &#123; Type &#125; from &#x27;ol/geom/Geometry&#x27;;</span><br><span class="line">import type &#123; EventsKey &#125; from &#x27;ol/events&#x27;;</span><br><span class="line">import &#123; unByKey &#125; from &#x27;ol/Observable&#x27;;</span><br><span class="line">import type &#123; Interaction &#125; from &#x27;ol/interaction&#x27;;</span><br><span class="line"></span><br><span class="line">let map: Map;</span><br><span class="line"></span><br><span class="line">let sketch: Feature | null; // 当前绘制的要素（Currently drawn feature.）</span><br><span class="line">let helpTooltipElement: HTMLElement; // 帮助提示框对象（The help tooltip element.）</span><br><span class="line">let helpTooltip: Overlay; // 帮助提示框显示的信息（Overlay to show the help messages.）</span><br><span class="line">let measureTooltipElement: HTMLElement | null; // 测量工具提示框对象（The measure tooltip element. ）</span><br><span class="line">let measureTooltip: Overlay; // 测量工具中显示的测量值（Overlay to show the measurement.）</span><br><span class="line">let continuePolygonMsg: string = &#x27;Click to continue drawing the polygon&#x27;; // 当用户正在绘制多边形时的提示信息文本</span><br><span class="line">let continueLineMsg: string = &#x27;Click to continue drawing the line&#x27;; // 当用户正在绘制线时的提示信息文本</span><br><span class="line">let listener: EventsKey | undefined; // 事件监听</span><br><span class="line">let draw: Draw; // 绘制交互</span><br><span class="line"></span><br><span class="line">// 测量长度输出</span><br><span class="line">const formatLength = (line: LineString) =&gt; &#123;</span><br><span class="line">  //使用测地学方法测量</span><br><span class="line">  const sourceProj = map.getView().getProjection(); //地图数据源投影坐标系</span><br><span class="line">  let length = sphere.getLength(line, &#123;</span><br><span class="line">    projection: sourceProj,</span><br><span class="line">    radius: 6378137, // 地球半径</span><br><span class="line">  &#125;);</span><br><span class="line">  let output;</span><br><span class="line">  if (length &gt; 100) &#123;</span><br><span class="line">    output = Math.round((length / 1000) * 100) / 100 + &#x27; &#x27; + &#x27;km&#x27;; //换算成 KM 单位</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    output = Math.round(length * 100) / 100 + &#x27; &#x27; + &#x27;m&#x27;; //m 为单位</span><br><span class="line">  &#125;</span><br><span class="line">  return output; //返回线的长度</span><br><span class="line">&#125;;</span><br><span class="line">// 测量面积输出</span><br><span class="line">const formatArea = (polygon: Polygon) =&gt; &#123;</span><br><span class="line">  //使用测地学方法测量</span><br><span class="line">  const sourceProj = map.getView().getProjection(); //地图数据源投影坐标系</span><br><span class="line">  let geom = polygon.clone().transform(sourceProj, &#x27;EPSG:4326&#x27;); //将多边形要素坐标系投影为 EPSG:4326</span><br><span class="line">  let area = Math.abs(sphere.getArea(geom, &#123; projection: sourceProj, radius: 6378137 &#125;)); //获取面积</span><br><span class="line">  let output;</span><br><span class="line">  if (area &gt; 10000) &#123;</span><br><span class="line">    output = Math.round((area / 1000000) * 100) / 100 + &#x27; &#x27; + &#x27;km&lt;sup&gt;2&lt;/sup&gt;&#x27;; //换算成 KM 单位</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    output = Math.round(area * 100) / 100 + &#x27; &#x27; + &#x27;m&lt;sup&gt;2&lt;/sup&gt;&#x27;; //m 为单位</span><br><span class="line">  &#125;</span><br><span class="line">  return output; //返回多边形的面积</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 创建一个新的帮助提示框（tooltip）- 未画之前的提示框</span><br><span class="line">const createHelpTooltip = () =&gt; &#123;</span><br><span class="line">  // 移除已有元素</span><br><span class="line">  if (helpTooltipElement) &#123;</span><br><span class="line">    helpTooltipElement.parentNode?.removeChild(helpTooltipElement);</span><br><span class="line">  &#125;</span><br><span class="line">  helpTooltipElement = document.createElement(&#x27;div&#x27;);</span><br><span class="line">  helpTooltipElement.className = &#x27;tooltip hidden&#x27;;</span><br><span class="line"></span><br><span class="line">  //提示框的覆盖层</span><br><span class="line">  helpTooltip = new Overlay(&#123;</span><br><span class="line">    element: helpTooltipElement,</span><br><span class="line">    offset: [15, 0],</span><br><span class="line">    positioning: &#x27;center-left&#x27;,</span><br><span class="line">  &#125;);</span><br><span class="line">  // 只是添加 Overlay 但是还没设置坐标 所以不会显示</span><br><span class="line">  map.addOverlay(helpTooltip);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 创建一个新的测量工具提示框（tooltip）- 画时的提示框</span><br><span class="line">const createMeasureTooltip = () =&gt; &#123;</span><br><span class="line">  // 移除已有元素</span><br><span class="line">  if (measureTooltipElement) &#123;</span><br><span class="line">    measureTooltipElement.parentNode?.removeChild(measureTooltipElement);</span><br><span class="line">  &#125;</span><br><span class="line">  measureTooltipElement = document.createElement(&#x27;div&#x27;);</span><br><span class="line">  measureTooltipElement.className = &#x27;tooltip tooltip-measure&#x27;;</span><br><span class="line">  //提示框的覆盖层</span><br><span class="line">  measureTooltip = new Overlay(&#123;</span><br><span class="line">    element: measureTooltipElement,</span><br><span class="line">    offset: [0, -15],</span><br><span class="line">    positioning: &#x27;bottom-center&#x27;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 只是添加 Overlay 但是还没设置坐标 所以不会显示</span><br><span class="line">  map.addOverlay(measureTooltip);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 动态显示帮助提示框内容</span><br><span class="line">const pointerMoveHandler = (event: MapBrowserEvent&lt;any&gt;) =&gt; &#123;</span><br><span class="line">  // 指示地图当前是否正在被拖动 dragging&#123;boolean&#125;</span><br><span class="line">  if (event.dragging) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  //当前默认提示信息</span><br><span class="line">  let helpMsg = &#x27;Click to start drawing&#x27;;</span><br><span class="line">  //判断绘制几何类型设置相应的帮助提示信息</span><br><span class="line">  let geom = sketch?.getGeometry();</span><br><span class="line">  if (geom instanceof Polygon) &#123;</span><br><span class="line">    helpMsg = continuePolygonMsg; //绘制多边形时提示相应内容</span><br><span class="line">  &#125; else if (geom instanceof LineString) &#123;</span><br><span class="line">    helpMsg = continueLineMsg; //绘制线时提示相应内容</span><br><span class="line">  &#125;</span><br><span class="line">  helpTooltipElement.innerHTML = helpMsg; //将提示信息设置到对话框中显示</span><br><span class="line">  // helpTooltip 为 Overlay 对象</span><br><span class="line">  helpTooltip.setPosition(event.coordinate); //设置帮助提示框的位置</span><br><span class="line">  //$(helpTooltipElement).removeClass(&#x27;hidden&#x27;);//移除帮助提示框的隐藏样式进行显示</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 加载交互绘制控件函数</span><br><span class="line">const addMeasure = (measureType: Type, source: VectorSource&lt;Feature&lt;Geometry&gt;&gt;) =&gt; &#123;</span><br><span class="line">  draw = new Draw(&#123;</span><br><span class="line">    source: source, //测量绘制层数据源</span><br><span class="line">    type: measureType, //几何图形类型</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      //绘制几何图形的样式</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(255, 255, 255, 0.8)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">        lineDash: [10, 10],</span><br><span class="line">        width: 2,</span><br><span class="line">      &#125;),</span><br><span class="line">      image: new CircleStyle(&#123;</span><br><span class="line">        radius: 7,</span><br><span class="line">        fill: new Fill(&#123;</span><br><span class="line">          color: &#x27; #ffcc33 &#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  //将绘制交互事件添加到地图中</span><br><span class="line">  map.addInteraction(draw);</span><br><span class="line">  //创建测量工具提示框</span><br><span class="line">  createMeasureTooltip();</span><br><span class="line">  //创建帮助提示框</span><br><span class="line">  createHelpTooltip();</span><br><span class="line"></span><br><span class="line">  //绑定交互绘制工具开始绘制的事件</span><br><span class="line">  draw.on(&#x27;drawstart&#x27;, (event: DrawEvent) =&gt; &#123;</span><br><span class="line">    sketch = event.feature; //绘制的要素</span><br><span class="line">    let tooltipCoord = event.target.coordinate; // 绘制的坐标</span><br><span class="line">    //绑定 change 事件，根据绘制几何类型得到测量长度值或面积值，并将其设置到测量工具提示框中显示</span><br><span class="line">    listener = sketch?.getGeometry()?.on(&#x27;change&#x27;, (event) =&gt; &#123;</span><br><span class="line">      let geom = event.target; //绘制几何要素</span><br><span class="line">      let output;</span><br><span class="line">      if (geom instanceof Polygon) &#123;</span><br><span class="line">        output = formatArea(geom); // 面积值</span><br><span class="line">        //获取一个在几何体中内部的坐标点</span><br><span class="line">        tooltipCoord = geom.getInteriorPoint().getCoordinates(); //坐标</span><br><span class="line">      &#125; else if (geom instanceof LineString) &#123;</span><br><span class="line">        output = formatLength(geom); //长度值</span><br><span class="line">        //测量长度获取到线的最后一个坐标</span><br><span class="line">        tooltipCoord = geom.getLastCoordinate(); //坐标</span><br><span class="line">      &#125;</span><br><span class="line">      if (measureTooltipElement &amp;&amp; output) measureTooltipElement.innerHTML = output; //将测量值设置到测量工具提示框中显示</span><br><span class="line">      measureTooltip.setPosition(tooltipCoord); //设置测量工具提示框的显示位置</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  //绑定交互绘制工具结束绘制的事件</span><br><span class="line">  draw.on(&#x27;drawend&#x27;, (event: DrawEvent) =&gt; &#123;</span><br><span class="line">    if (measureTooltipElement) measureTooltipElement.className = &#x27;tooltip tooltip-static&#x27;; //设置测量提示框的样式</span><br><span class="line">    measureTooltip.setOffset([0, -7]);</span><br><span class="line">    sketch = null; // 置空当前绘制的要素对象</span><br><span class="line">    measureTooltipElement = null; // 置空测量工具提示框对象 - 画图时的提示框 然后在重新创建一个</span><br><span class="line">    createMeasureTooltip(); //重新创建一个测试工具提示框显示结果</span><br><span class="line">    if (listener) &#123;</span><br><span class="line">      unByKey(listener); // 解除监听事件 Removes an event listener using the key returned by on() or once().</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 按钮点击事件</span><br><span class="line">const measureCtl = (measureType: Type) =&gt; &#123;</span><br><span class="line">  if (draw) &#123;</span><br><span class="line">    map.removeInteraction(draw);</span><br><span class="line">  &#125;</span><br><span class="line">  //定义一个数据源 用来画线和面元素</span><br><span class="line">  const source = new VectorSource();</span><br><span class="line">  const vectorLayer = new VectorLayer(&#123;</span><br><span class="line">    source: source,</span><br><span class="line">    style: new Style(&#123;</span><br><span class="line">      fill: new Fill(&#123;</span><br><span class="line">        color: &#x27;rgba(255, 255, 255, 0.2)&#x27;,</span><br><span class="line">      &#125;),</span><br><span class="line">      stroke: new Stroke(&#123;</span><br><span class="line">        color: &#x27; #ffcc33 &#x27;,</span><br><span class="line">        width: 2,</span><br><span class="line">      &#125;),</span><br><span class="line">      image: new CircleStyle(&#123;</span><br><span class="line">        radius: 5,</span><br><span class="line">        stroke: new Stroke(&#123;</span><br><span class="line">          color: &#x27;rgba(0, 0, 0, 0.7)&#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">        fill: new Fill(&#123;</span><br><span class="line">          color: &#x27;rgba(255, 255, 255, 0.5)&#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(vectorLayer);</span><br><span class="line"></span><br><span class="line">  //地图容器绑定鼠标移动事件，动态显示帮助提示框内容</span><br><span class="line">  map.on(&#x27;pointermove&#x27;, pointerMoveHandler);</span><br><span class="line"></span><br><span class="line">  //根据不同类型添加绘制的交互</span><br><span class="line">  addMeasure(measureType, source);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  map = new Map(&#123;</span><br><span class="line">    target: &#x27;map&#x27;, //指定挂载 dom，注意必须是 id</span><br><span class="line">    layers: [</span><br><span class="line">      new TileLayer(&#123;</span><br><span class="line">        source: new OSM(), //加载 OpenStreetMap</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    //配置视图</span><br><span class="line">    view: new View(&#123;</span><br><span class="line">      center: [113.24981689453125, 23.126468438108688], //视图中心位置</span><br><span class="line">      projection: &#x27;EPSG:4326&#x27;, //指定投影</span><br><span class="line">      zoom: 12, //缩放到的级别</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#map &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MapTool &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0.5em;</span><br><span class="line">  right: 0.5em;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 提示框的样式信息</span><br><span class="line">*/</span><br><span class="line">#map :deep(.tooltip) &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  background: rgba(0, 0, 0, 0.5);</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 4px 8px;</span><br><span class="line">  opacity: 0.7;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 正在测的数字 */</span><br><span class="line">#map :deep(.tooltip-measure) &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 已经测的结果 */</span><br><span class="line">#map :deep(.tooltip-static) &#123;</span><br><span class="line">  background-color: #ffcc33 ;</span><br><span class="line">  color: black;</span><br><span class="line">  border: 1px solid white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#map :deep(.tooltip-measure:before) #map :deep(.tooltip-static:before) &#123;</span><br><span class="line">  border-top: 6px solid rgba(0, 0, 0, 0.5);</span><br><span class="line">  border-right: 6px solid transparent;</span><br><span class="line">  border-left: 6px solid transparent;</span><br><span class="line">  content: &#x27;&#x27;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: -6px;</span><br><span class="line">  margin-left: -7px;</span><br><span class="line">  left: 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#map :deep(.tooltip-static:before) &#123;</span><br><span class="line">  border-top-color: #ffcc33 ;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-动画控件"><a href="#9-动画控件" class="headerlink" title="9 动画控件"></a>9 动画控件</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721786658806.png" alt="QQ_1721786658806.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MapTool&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;rotateLocation&quot;</span>&gt;</span>旋转定位<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;elasticLocation&quot;</span>&gt;</span>弹性定位<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;reboundLocation&quot;</span>&gt;</span>反弹定位<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;flyLocation&quot;</span>&gt;</span>飞行定位<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;aroundRotate&quot;</span>&gt;</span>围绕旋转<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Zoom, ZoomSlider, ZoomToExtent &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/control&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; defaults <span class="keyword">as</span> defaultControls &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/control.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type MapEvent <span class="keyword">from</span> <span class="string">&#x27;ol/MapEvent&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; fromLonLat &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/proj&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; easeIn, easeOut &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/easing&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//注意参考系</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> beijing = fromLonLat([<span class="number">116.3898468017578</span>, <span class="number">39.91026292816486</span>], <span class="string">&#x27;EPSG:4326&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> guangzhou = fromLonLat([<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>], <span class="string">&#x27;EPSG:4326&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 旋转定位</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> rotateLocation = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> view = map.getView();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> center = view.getCenter();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (center) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    view.animate(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//动画结束时的视图中心,即当前视图中心同目标视图中心连线的中心点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">center</span>: [center[<span class="number">0</span>], center[<span class="number">1</span>]],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">rotation</span>: <span class="built_in">Math</span>.PI, <span class="comment">//动画结束时的旋转角度，即180度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">easing</span>: easeIn, <span class="comment">//按每一帧动画控制的动画速度，即开始缓慢并逐渐加快速度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">center</span>: beijing, <span class="comment">//动画结束时的视图中心</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">rotation</span>: <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="comment">//动画结束时的旋转角度，即360度回正</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">easing</span>: easeOut, <span class="comment">//按每一帧动画控制的动画速度，即开始快速并逐渐减速</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 弹性定位</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> elasticLocation = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 弹性伸缩值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="keyword">function</span> <span class="title">elastic</span>(<span class="params">t: number</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//函数-10*sin(t-0.075)**t*t+1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">2</span>, -<span class="number">10</span> * t) * <span class="built_in">Math</span>.sin(((t - <span class="number">0.075</span>) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI)) / <span class="number">0.3</span>) + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> view = map.getView();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> center = view.getCenter();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (center) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    view.animate(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: beijing, <span class="comment">///动画结束时的视图中心</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">duration</span>: <span class="number">3000</span>, <span class="comment">//动画的持续时间（以毫秒为单位）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">easing</span>: elastic, <span class="comment">//按每一帧动画控制的动画持续时间函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 反弹定位</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> reboundLocation = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 反弹值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="keyword">function</span> <span class="title">bounce</span>(<span class="params">t: number</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> s = <span class="number">7.5625</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      p = <span class="number">2.75</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      l;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (t &lt; <span class="number">1</span> / p) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      l = s * t * t;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (t &lt; <span class="number">2</span> / p) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        t -= <span class="number">1.5</span> / p;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        l = s * t * t + <span class="number">0.75</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (t &lt; <span class="number">2.5</span> / p) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          t -= <span class="number">2.25</span> / p;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          l = s * t * t + <span class="number">0.9375</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          t -= <span class="number">2.625</span> / p;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          l = s * t * t + <span class="number">0.984375</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> l;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> view = map.getView();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  view.animate(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">center</span>: guangzhou, <span class="comment">///动画结束时的视图中心</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">duration</span>: <span class="number">3000</span>, <span class="comment">//动画的持续时间（以毫秒为单位）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">easing</span>: bounce, <span class="comment">//按每一帧动画控制的动画持续时间函数)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 飞行定位</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> flyLocation = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> view = map.getView();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> zoom = view.getZoom();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> duration = <span class="number">3000</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//动画完成的回调函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">complete: boolean</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (complete) <span class="built_in">console</span>.log(<span class="string">&#x27;动画完成&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (zoom) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//第一个动画</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    view.animate(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">center</span>: guangzhou,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">duration</span>: duration,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      callback,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//第二个动画</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    view.animate(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">zoom</span>: zoom - <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">duration</span>: duration / <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">zoom</span>: zoom,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">duration</span>: duration / <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      callback,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 围绕旋转</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> aroundRotate = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> view = map.getView();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">var</span> rotation = view.getRotation();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  view.animate(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//第一个过程</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">rotation</span>: rotation + <span class="built_in">Math</span>.PI, <span class="comment">//第一次动画旋转角度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">anchor</span>: guangzhou, <span class="comment">//自旋的中心点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">easing</span>: easeIn, <span class="comment">////按每一帧动画控制的动画速度，即开始缓慢并逐渐加快速度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//第二个过程</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">rotation</span>: rotation + <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="comment">//动画结束时的旋转角度，即360度回正</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">anchor</span>: guangzhou, <span class="comment">// 旋转中心点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">easing</span>: easeOut, <span class="comment">///按每一帧动画控制的动画速度，即开始快速并逐渐减速</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>], <span class="comment">//视图中心位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.MapTool</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">top</span>: <span class="number">0.5em</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">right</span>: <span class="number">0.5em</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-ScaleLine-比例尺控件"><a href="#10-ScaleLine-比例尺控件" class="headerlink" title="10 ScaleLine - 比例尺控件"></a>10 ScaleLine - 比例尺控件</h2><blockquote><p> By default the scale line will show in the bottom left portion of the map, but this can be changed by using the css selector <code>.ol-scale-line</code>. When specifying <code>bar</code> as <code>true</code>, a scalebar will be rendered instead of a scaleline. For cartesian measurements of the scaleline, you need to set the <code>getPointResolution</code> method of your projection to simply return the input value, e.g. <code>projection.setGetPointResolution(r =&gt; r);</code></p></blockquote><h3 id="10-1-Extends"><a href="#10-1-Extends" class="headerlink" title="10.1 Extends"></a>10.1 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">Control</a></li></ul><h3 id="10-2-Observable-Properties"><a href="#10-2-Observable-Properties" class="headerlink" title="10.2 Observable Properties"></a>10.2 Observable Properties</h3><table><thead><tr><th>Name</th><th>Type</th><th>Settable</th><th><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a> type</th><th>Description</th></tr></thead><tbody><tr><td><code>units</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ScaleLine.html#~Units">Units</a></td><td>yes</td><td><code>change:units</code></td><td>The units to use in the scale line.</td></tr></tbody></table><h3 id="10-3-new-ScaleLine-options"><a href="#10-3-new-ScaleLine-options" class="headerlink" title="10.3 new ScaleLine(options)"></a>10.3 new ScaleLine(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string | undefined</td><td>CSS class name. The default is <code>ol-scale-bar</code> when configured with <code>bar: true</code>. Otherwise the default is <code>ol-scale-line</code>.</td></tr><tr><td><code>minWidth</code></td><td>number (defaults to 64)</td><td>Minimum width in pixels at the OGC default dpi. The width will be adjusted to match the dpi used.</td></tr><tr><td><code>maxWidth</code></td><td>number | undefined</td><td>Maximum width in pixels at the OGC default dpi. The width will be adjusted to match the dpi used.</td></tr><tr><td><code>render</code></td><td>function | undefined</td><td>Function called when the control should be re-rendered. This is called in a <code>requestAnimationFrame</code> callback.</td></tr><tr><td><code>target</code></td><td>HTMLElement | string | undefined</td><td>Specify a target if you want the control to be rendered outside of the map’s viewport.</td></tr><tr><td><code>units</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ScaleLine.html#~Units">Units</a> (defaults to ‘metric’)</td><td>Units.</td></tr><tr><td><code>bar</code></td><td>boolean (defaults to false)</td><td>Render scalebars instead of a line.</td></tr><tr><td><code>steps</code></td><td>number (defaults to 4)</td><td>Number of steps the scalebar should use. Use even numbers for best results. Only applies when <code>bar</code> is <code>true</code>.</td></tr><tr><td><code>text</code></td><td>boolean (defaults to false)</td><td>Render the text scale above of the scalebar. Only applies when <code>bar</code> is <code>true</code>.</td></tr><tr><td><code>dpi</code></td><td>number | undefined</td><td>dpi of output device such as printer. Only applies when <code>bar</code> is <code>true</code>. If undefined the OGC default screen pixel size of 0.28mm will be assumed.</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="10-4-Fires"><a href="#10-4-Fires" class="headerlink" title="10.4 Fires"></a>10.4 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724091945.png" alt="image.png"></p><p><code>bar:true</code>时</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721786686345.png" alt="QQ_1721786686345.png"></p><p><code>bar:false</code>时</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721786717387.png" alt="QQ_1721786717387.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加比例尺控件</span></span><br><span class="line"><span class="keyword">const</span> addScaleLineCtl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> scaleLineControl = <span class="keyword">new</span> ScaleLine(&#123;</span><br><span class="line">    <span class="comment">//设置比例尺单位，degrees、imperial、us、nautical、metric（度量单位）</span></span><br><span class="line">    <span class="attr">units</span>: <span class="string">&#x27;metric&#x27;</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="literal">true</span>, <span class="comment">// 渲染比例尺而不是一条线</span></span><br><span class="line">    <span class="attr">text</span>: <span class="literal">true</span>, <span class="comment">// 渲染比例尺上方的文本比例。仅适用于 bar is true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  map.addControl(scaleLineControl);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="11-图层探索"><a href="#11-图层探索" class="headerlink" title="11 图层探索"></a>11 图层探索</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721786327484.png" alt="QQ_1721786327484.png"></p><p><code>let ctx = event.context;</code>是获取 canvas 画布</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mapDom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; Zoom, ZoomSlider, ZoomToExtent &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/control&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; defaults <span class="keyword">as</span> defaultControls &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/control.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type MapEvent <span class="keyword">from</span> <span class="string">&#x27;ol/MapEvent&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; XYZ &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/source&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type Layer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Layer&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type &#123; Pixel &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/pixel&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> type RenderEvent <span class="keyword">from</span> <span class="string">&#x27;ol/render/Event&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> map: <span class="built_in">Map</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> mapDom = ref&lt;HTMLElement | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> addLayerSearch = <span class="function">(<span class="params">layer: Layer</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 探查半径</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> radius = <span class="number">75</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 添加键盘按下事件监听，用来控制探查范围的大小</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">event: KeyboardEvent</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (event.keyCode === <span class="number">38</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      radius = <span class="built_in">Math</span>.min(radius + <span class="number">5</span>, <span class="number">150</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.render();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 不会触发点击事件 - click, singleclick, doubleclick</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      event.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.keyCode == <span class="number">40</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      radius = <span class="built_in">Math</span>.max(radius - <span class="number">5</span>, <span class="number">25</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.render();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      event.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 实时得到鼠标的像素位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> mousePosition: Pixel;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  mapDom.value?.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取到地图鼠标的位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    mousePosition = map.getEventPixel(event);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 鼠标移动时强制渲染地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    map.render();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  mapDom.value?.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取到地图鼠标的位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    mousePosition = map.getEventPixel(event);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 鼠标移出 map 就强制渲染</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    map.render();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 在渲染层之前,做剪裁</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  layer.on(<span class="string">&#x27;prerender&#x27;</span>, <span class="function">(<span class="params">event: RenderEvent</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取 canvas 画布</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> ctx = event.context;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取屏幕的像素比</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> pixelRatio = event?.frameState?.pixelRatio;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (ctx <span class="keyword">instanceof</span> CanvasRenderingContext2D &amp;&amp; pixelRatio) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      ctx.save();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      ctx.beginPath();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (mousePosition) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//只显示一个围绕着鼠标的圆圈</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ctx.arc(mousePosition[<span class="number">0</span>] * pixelRatio, mousePosition[<span class="number">1</span>] * pixelRatio, radius * pixelRatio, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ctx.lineWidth = <span class="number">5</span> * pixelRatio;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ctx.strokeStyle = <span class="string">&#x27;rgba(0,0,0,0.5)&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ctx.stroke();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//图层的其他地方通过 canvas 的上下文对象裁剪掉，只保留绘制的圆形的部分</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      ctx.clip();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 呈现层后,恢复画布的背景</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  layer.on(<span class="string">&#x27;postrender&#x27;</span>, <span class="function">(<span class="params">event: RenderEvent</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> ctx = event.context;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (ctx <span class="keyword">instanceof</span> CanvasRenderingContext2D) ctx.restore();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 加载 OSM</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> osmLayer = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 加载天地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> tileLayer = <span class="keyword">new</span> TileLayer(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">visible</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">source</span>: <span class="keyword">new</span> XYZ(&#123; <span class="attr">url</span>: <span class="string">&#x27; http://wprd0 &#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span> &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">zoom</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">layers</span>: [tileLayer, osmLayer],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  addLayerSearch(osmLayer);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 openLayer_入门</title>
      <link href="/2024/07/26/01%20openLayer_%E5%85%A5%E9%97%A8/"/>
      <url>/2024/07/26/01%20openLayer_%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-综述"><a href="#1-综述" class="headerlink" title="1 综述"></a>1 综述</h2><p>关注三点：</p><ul><li>每个类构建时的 <strong>option</strong>，以及该类的可触发的<strong>事件</strong>，和可调用的<strong>属性</strong></li><li>类与类之间的继承关系，子类可以继承父类的方法</li><li>openLayer 对 JS 标准库中数组、事件等进行了一些封装，从而形成的类</li></ul><h2 id="2-Observable-抽象基类-可观察类"><a href="#2-Observable-抽象基类-可观察类" class="headerlink" title="2 Observable - 抽象基类 - 可观察类"></a>2 Observable - 抽象基类 - 可观察类</h2><blockquote><p>Abstract base class; normally only used for creating subclasses and not instantiated in apps. An event target providing convenient methods for listener registration and unregistration. A generic <code>change</code> event is always available through <a href="https://openlayers.org/en/latest/apidoc/module-ol_Observable-Observable.html#changed"><code>changed</code></a>.</p></blockquote><p><strong>可以实现 chang : 属性</strong></p><h3 id="2-1-Subclasses"><a href="#2-1-Subclasses" class="headerlink" title="2.1 Subclasses"></a>2.1 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h3 id="2-2-Fires-事件"><a href="#2-2-Fires-事件" class="headerlink" title="2.2 Fires(事件)"></a>2.2 Fires(事件)</h3><h4 id="2-2-1-chang-BaseEvent"><a href="#2-2-1-chang-BaseEvent" class="headerlink" title="2.2.1 chang(BaseEvent)"></a>2.2.1 chang(<a href="https://openlayers.org/en/latest/apidoc/module-ol_events_Event-BaseEvent.html">BaseEvent</a>)</h4><p>Triggered when the revision counter is increased</p><p>这个 revision 即由 getRevision 获取的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用更改事件。当修订计数器增加时触发。</span></span><br><span class="line">  map.on(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">    <span class="comment">//map对象的属性只要有改变，就会修改此对象的版本号，版本号变化了，此事件就会触发</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// change:size事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;change:size&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;size改变&#x27;</span>);</span><br><span class="line">    <span class="comment">//屏幕尺寸变化的回调</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// change:view事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;change:view&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;view改变&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// change:target事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;change:target&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;target改变&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// change:layerGroup事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;change:layergroup&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;target改变&#x27;</span>);</span><br><span class="line">    <span class="comment">//图层动态变化，图例动态变化</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-2-2-error-BaseEvent"><a href="#2-2-2-error-BaseEvent" class="headerlink" title="2.2.2 error(BaseEvent)"></a>2.2.2 error(<a href="https://openlayers.org/en/latest/apidoc/module-ol_events_Event-BaseEvent.html">BaseEvent</a>)</h4><p>Triggered when an error occurs.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地图发生错误触发</span></span><br><span class="line">  map.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-Methods-方法"><a href="#2-3-Methods-方法" class="headerlink" title="2.3 Methods(方法)"></a>2.3 Methods(方法)</h3><h4 id="2-3-1-changed"><a href="#2-3-1-changed" class="headerlink" title="2.3.1 changed()"></a>2.3.1 changed()</h4><p>获取此对象的版本号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取此对象的版本号。每次修改对象时，其版本号都会增加。</span></span><br><span class="line"><span class="keyword">let</span> revision = map.getRevision();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getRevision1&#x27;</span>, revision);</span><br><span class="line">map.changed();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getRevision12&#x27;</span>, map.getRevision());</span><br></pre></td></tr></table></figure><h4 id="2-3-2-dispatchEvent-event-gt-boolean-undefined"><a href="#2-3-2-dispatchEvent-event-gt-boolean-undefined" class="headerlink" title="2.3.2 dispatchEvent(event)=&gt; {boolean | undefined}"></a>2.3.2 dispatchEvent(event)=&gt; {boolean | undefined}</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> map.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// dispatchEvent即执行一下dblclick事件</span></span><br><span class="line">    map.dispatchEvent(<span class="string">&#x27;dblclick&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-3-3-getRevision-gt-number"><a href="#2-3-3-getRevision-gt-number" class="headerlink" title="2.3.3 getRevision()=&gt;{number}"></a>2.3.3 getRevision()=&gt;{number}</h4><p>获取版本号</p><h4 id="2-3-4-on-type-listener-、once-type-listener-、-un-type-listener"><a href="#2-3-4-on-type-listener-、once-type-listener-、-un-type-listener" class="headerlink" title="2.3.4 on(type, listener)、once(type, listener)、 un(type, listener)"></a>2.3.4 on(type, listener)、once(type, listener)、 un(type, listener)</h4><p>监听事件</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240722213956.png" alt="image.png"></p><h2 id="3-BaseObject-抽象基类"><a href="#3-BaseObject-抽象基类" class="headerlink" title="3 BaseObject - 抽象基类"></a>3 BaseObject - 抽象基类</h2><blockquote><p>Abstract base class; normally only used for creating subclasses and not instantiated in apps. Most non-trivial classes inherit from this.</p><p>它扩展了 <a href="https://openlayers.org/en/latest/apidoc/module-ol_Observable-Observable.html"><code>Observable</code></a> 可观察的属性，其中每个属性以及整个对象都是可观察的。</p><p>从此继承的类具有预定义属性，您可以向其中添加自己的属性。预定义属性在本文档中列为“可观察属性”，并具有自己的访问器；例如， <a href="https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html"><code>Map</code></a> 具有<code>target</code>属性，可使用 访问 <code>getTarget()</code>并使用 更改<code>setTarget()</code>。但是，并非所有属性都是可设置的。还有通用访问器<code>get()</code>和<code>set()</code>。例如，<code>get(&#39;target&#39;)</code>相当于<code>getTarget()</code>。</p><p>访问<code>set</code>器会触发更改事件，您可以通过注册侦听器来监控此事件。例如，<a href="https://openlayers.org/en/latest/apidoc/module-ol_View-View.html"><code>View</code></a> 具有 <code>center</code>属性，因此<code>view.on(&#39;change:center&#39;, function(evt) &#123;...&#125;);</code>每当 center 属性的值发生变化时都会调用该函数。在函数内，<code>evt.target</code>将是视图，因此<code>evt.target.getCenter()</code> 将返回新的中心。</p><p>您可以使用 添加您自己的可观察属性 <code>object.set(&#39;prop&#39;, &#39;value&#39;)</code>，并使用 检索该属性<code>object.get(&#39;prop&#39;)</code>。您可以使用 监听该属性值的更改 <code>object.on(&#39;change:prop&#39;, listener)</code>。您可以使用 获取所有属性的列表 <a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html#getProperties"><code>getProperties</code></a>。</p><p>Note that the observable properties are separate from standard JS properties. You can, for example, give your map object a title with <code>map.title=&#39;New title&#39;</code> and with <code>map.set(&#39;title&#39;, &#39;Another title&#39;)</code>. The first will be a <code>hasOwnProperty</code>; the second will appear in <code>getProperties()</code>. Only the second is observable.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseObject <span class="keyword">from</span> <span class="string">&#x27;ol/Object.js&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-1-Subclasses"><a href="#3-1-Subclasses" class="headerlink" title="3.1 Subclasses"></a>3.1 Subclasses</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html">Feature</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Geolocation-Geolocation.html">Geolocation</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html">Map</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Overlay-Overlay.html">Overlay</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_View-View.html">View</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">Control</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Attribution-Attribution.html">Attribution</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_FullScreen-FullScreen.html">FullScreen</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_MousePosition-MousePosition.html">MousePosition</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_OverviewMap-OverviewMap.html">OverviewMap</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Rotate-Rotate.html">Rotate</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ScaleLine-ScaleLine.html">ScaleLine</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ZoomSlider-ZoomSlider.html">ZoomSlider</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_ZoomToExtent-ZoomToExtent.html">ZoomToExtent</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Zoom-Zoom.html">Zoom</a></li></ul></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_Geometry-Geometry.html">Geometry</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_GeometryCollection-GeometryCollection.html">GeometryCollection</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_SimpleGeometry-SimpleGeometry.html">SimpleGeometry</a></li></ul></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Interaction-Interaction.html">Interaction</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DblClickDragZoom-DblClickDragZoom.html">DblClickDragZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DoubleClickZoom-DoubleClickZoom.html">DoubleClickZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_DragAndDrop-DragAndDrop.html">DragAndDrop</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardPan-KeyboardPan.html">KeyboardPan</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_KeyboardZoom-KeyboardZoom.html">KeyboardZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Link-Link.html">Link</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_MouseWheelZoom-MouseWheelZoom.html">MouseWheelZoom</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Pointer-PointerInteraction.html">PointerInteraction</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Select-Select.html">Select</a></li></ul></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html">BaseLayer</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Group-LayerGroup.html">LayerGroup</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html">Layer</a></li></ul></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Source-Source.html">Source</a><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Image-ImageSource.html">ImageSource</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Tile-TileSource.html">TileSource</a></li><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector-VectorSource.html">VectorSource</a></li></ul></li></ul><h3 id="3-2-Extends"><a href="#3-2-Extends" class="headerlink" title="3.2 Extends"></a>3.2 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Observable-Observable.html">Observable</a></li></ul><h3 id="3-3-Fires-事件"><a href="#3-3-Fires-事件" class="headerlink" title="3.3 Fires(事件)"></a>3.3 Fires(事件)</h3><h4 id="3-3-1-chang-BaseEvent-inherit"><a href="#3-3-1-chang-BaseEvent-inherit" class="headerlink" title="3.3.1 chang(BaseEvent)[inherit]"></a>3.3.1 chang(<a href="https://openlayers.org/en/latest/apidoc/module-ol_events_Event-BaseEvent.html">BaseEvent</a>)[inherit]</h4><h4 id="3-3-2-error-BaseEvent-inherit"><a href="#3-3-2-error-BaseEvent-inherit" class="headerlink" title="3.3.2 error(BaseEvent)[inherit]"></a>3.3.2 error(<a href="https://openlayers.org/en/latest/apidoc/module-ol_events_Event-BaseEvent.html">BaseEvent</a>)[inherit]</h4><h4 id="3-3-3-propertychange-ObjectEvent"><a href="#3-3-3-propertychange-ObjectEvent" class="headerlink" title="3.3.3 propertychange(ObjectEvent)"></a>3.3.3 propertychange(<a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a>)</h4><p>Triggered when a property is changed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当属性改变时触发</span></span><br><span class="line">  map.on(<span class="string">&#x27;propertychange&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;propertychange&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="3-4-Methods-方法"><a href="#3-4-Methods-方法" class="headerlink" title="3.4 Methods(方法)"></a>3.4 Methods(方法)</h3><h4 id="3-4-1-changed-inherit"><a href="#3-4-1-changed-inherit" class="headerlink" title="3.4.1 changed() [inherit]"></a>3.4.1 changed() [inherit]</h4><h4 id="3-4-2-on-type-listener-、once-type-listener-、-un-type-listener-inherit"><a href="#3-4-2-on-type-listener-、once-type-listener-、-un-type-listener-inherit" class="headerlink" title="3.4.2 on(type, listener)、once(type, listener)、 un(type, listener)[inherit]"></a>3.4.2 on(type, listener)、once(type, listener)、 un(type, listener)[inherit]</h4><h4 id="3-4-3-getRevision-gt-number-inherit"><a href="#3-4-3-getRevision-gt-number-inherit" class="headerlink" title="3.4.3 getRevision()=&gt;{number}[inherit]"></a>3.4.3 getRevision()=&gt;{number}[inherit]</h4><h4 id="3-4-4-get-key"><a href="#3-4-4-get-key" class="headerlink" title="3.4.4 get(key)"></a>3.4.4 get(key)</h4><p>Gets a value.</p><h4 id="3-4-5-getKeys-gt-Array-lt-string-gt"><a href="#3-4-5-getKeys-gt-Array-lt-string-gt" class="headerlink" title="3.4.5 getKeys()=&gt; {Array.&lt;string&gt;}"></a>3.4.5 getKeys()=&gt; {Array.&lt;string&gt;}</h4><p>Get a list of object property names.</p><h4 id="3-4-6-getProperties-gt-Object-lt-string-gt"><a href="#3-4-6-getProperties-gt-Object-lt-string-gt" class="headerlink" title="3.4.6 getProperties()=&gt;{Object.&lt;string, * &gt; }"></a>3.4.6 getProperties()=&gt;{Object.&lt;string, * &gt; }</h4><p>Get an object of all property names and values.</p><h4 id="3-4-7-set-key-value-silent"><a href="#3-4-7-set-key-value-silent" class="headerlink" title="3.4.7 set(key, value, silent)"></a>3.4.7 set(key, value, silent)</h4><p>Sets a value.</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240722221042.png" alt="image.png"></p><p><strong>silent 设置为 true 指 在不触发事件的情况下更新</strong></p><h4 id="3-4-8-setProperties-values-silent"><a href="#3-4-8-setProperties-values-silent" class="headerlink" title="3.4.8 setProperties(values, silent)"></a>3.4.8 setProperties(values, silent)</h4><p>Sets a collection of key-value pairs. Note that this changes any existing properties and adds new ones (it does not remove any existing properties).</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240722221223.png" alt="image.png"></p><h4 id="3-4-9-unset-key-silent"><a href="#3-4-9-unset-key-silent" class="headerlink" title="3.4.9 unset(key, silent)"></a>3.4.9 unset(key, silent)</h4><p>Unsets a property.</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240722221253.png" alt="image.png"></p><h2 id="4-Collection-JS-数组的扩展"><a href="#4-Collection-JS-数组的扩展" class="headerlink" title="4 Collection - JS 数组的扩展"></a>4 Collection - JS 数组的扩展</h2><blockquote><p>标准 JS 数组的扩展版本，添加了方便的操作方法。添加和删除对 Collection 的更改会触发 Collection 事件。请注意，这不包括对 Collection_内_对象的更改；它们会触发相应对象的事件，而不是整个 Collection 的事件。</p></blockquote><h3 id="4-1-new-Collection-array-options"><a href="#4-1-new-Collection-array-options" class="headerlink" title="4.1 new Collection(array, options)"></a>4.1 new Collection(array, options)</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721809982425.png" alt="QQ_1721809982425.png"></p><h3 id="4-2-Fires"><a href="#4-2-Fires" class="headerlink" title="4.2 Fires"></a>4.2 Fires</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721810023693.png"></p><h3 id="4-3-Extends"><a href="#4-3-Extends" class="headerlink" title="4.3 Extends"></a>4.3 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h3 id="4-4-Observable-Properties"><a href="#4-4-Observable-Properties" class="headerlink" title="4.4 Observable Properties"></a>4.4 Observable Properties</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724163416.png" alt="image.png"></p><h3 id="4-5-Methods"><a href="#4-5-Methods" class="headerlink" title="4.5 Methods"></a>4.5 Methods</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724163432.png" alt="image.png"></p><p><strong>注意几个方法：</strong></p><ul><li><code>insertAt(index, elem)</code> ：Insert an element at the provided index.<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721810153600.png" alt="QQ_1721810153600.png"></li><li><code>item(index)=&gt;&#123;T&#125;</code> : Get the element at the provided index.</li><li><code>remove(elem)=&gt;&#123;T | undefined&#125;</code> : Remove the first occurrence of an element from the collection.</li><li><code>removeAt(index)&#123;T | undefined&#125;</code> : Remove the element at the provided index and return it. Return <code>undefined</code> if the collection does not contain this index.</li><li><code>setAt(index, elem)</code> : Set the element at the provided index.</li></ul><h2 id="5-Map-地图"><a href="#5-Map-地图" class="headerlink" title="5 Map - 地图"></a>5 Map - 地图</h2><blockquote><p>The map is the core component of OpenLayers. For a map to render, a view, one or more layers, and a target container are needed:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;ol/Map.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">&#x27;ol/View.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">&#x27;ol/layer/Tile.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">&#x27;ol/source/OSM.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  <span class="attr">view</span>: <span class="keyword">new</span> View(&#123;</span><br><span class="line">    <span class="attr">center</span>: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">layers</span>: [</span><br><span class="line">    <span class="keyword">new</span> TileLayer(&#123;</span><br><span class="line">      <span class="attr">source</span>: <span class="keyword">new</span> OSM(),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The above snippet creates a map using a <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Tile-TileLayer.html"><code>TileLayer</code></a> to display <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_OSM-OSM.html"><code>OSM</code></a> OSM data and render it to a DOM element with the id <code>map</code>.</p><p>The constructor places a viewport container (with CSS class name <code>ol-viewport</code>) in the target element (see <code>getViewport()</code>), and then two further elements within the viewport: one with CSS class name <code>ol-overlaycontainer-stopevent</code> for controls and some overlays, and one with CSS class name <code>ol-overlaycontainer</code> for other overlays (see the <code>stopEvent</code> option of <a href="https://openlayers.org/en/latest/apidoc/module-ol_Overlay-Overlay.html"><code>Overlay</code></a> for the difference). The map itself is placed in a further element within the viewport.</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721694433855.png" alt="QQ_1721694433855.png"></p><p>Layers are stored as a <a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html"><code>Collection</code></a> in layerGroups. A top-level group is provided by the library. This is what is accessed by <code>getLayerGroup</code> and <code>setLayerGroup</code>. Layers entered in the options are added to this group, and <code>addLayer</code> and <code>removeLayer</code> change the layer collection in the group. <code>getLayers</code> is a convenience function for <code>getLayerGroup().getLayers()</code>. Note that <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Group-LayerGroup.html"><code>LayerGroup</code></a> is a subclass of <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html"><code>BaseLayer</code></a>, so layers entered in the options or added with <code>addLayer</code> can be groups, which can contain further groups, and so on.</p><h3 id="5-1-Extends"><a href="#5-1-Extends" class="headerlink" title="5.1 Extends"></a>5.1 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h3 id="5-2-new-Map-options"><a href="#5-2-new-Map-options" class="headerlink" title="5.2 new Map(options)"></a>5.2 new Map(options)</h3><ul><li><code>target</code><br>地图的容器，元素本身或 id 元素的 。如果在构建时未指定，则 module:ol/Map~Map # setTarget 必须调用以渲染地图 。如果通过元素传递，则容器可以位于辅助文档中。</li><li><code>Layers </code><br>如果未定义，将渲染没有图层的地图。请注意，图层按提供的顺序呈现，因此，例如，如果您希望矢量图层出现在切片图层的顶部，则它必须位于切片图层之后。</li><li><code>view</code><br>地图视图。除非在构造时或通过 指定，否则将不会获取图层源 module:ol/Map~Map #setView 。</li><li><code>overlays</code><br>最初添加到地图的叠加层。默认情况下，不添加叠加层。</li><li><code>interactions</code><br>最初添加到地图的交互。如果未指定， module:ol/interaction.defaults 则使用。</li><li><code>controls</code><br>最初添加到地图的控件。如果未指定， module:ol/control.defaults 则使用。</li><li><code>pixelRatio</code><br>设备上物理像素与设备无关像素（下降）之间的比率。（默认为 window.devicePixelRatio）Window 接口的 devicePixelRatio 返回当前显示设备的物理像素分辨率与 CSS 像素分辨率之比。此值也可以解释为像素大小的比率：一个 CSS 像素的大小与一个物理像素的大小。 简单来说，它告诉浏览器应使用多少屏幕实际像素来绘制单个 CSS 像素。</li><li><code>keyboardEventTarget</code><br>监听键盘事件的元素。这确定何时触发 KeyboardPan 和 KeyboardZoom 交互。例如，如果此选项设置为 document 键盘交互将始终触发。如果未指定此选项，则监听键盘事件的元素是地图目标（即用户提供的地图 div）。如果不是 document，则需要聚焦目标元素才能发出关键事件，要求目标元素具有 tabindex 属性。</li><li><code>maxTilesLoading</code><br>同时加载的最大数量的瓦片。（默认为 16）moveTolerance 光标必须移动的最小距离（以像素为单位）才能被检测为地图移动事件而不是单击。增加此值可以更轻松地单击地图。（默认为 1）</li></ul><h3 id="5-3-Fires-事件"><a href="#5-3-Fires-事件" class="headerlink" title="5.3 Fires(事件)"></a>5.3 Fires(事件)</h3><h4 id="5-3-1-BaseEvent"><a href="#5-3-1-BaseEvent" class="headerlink" title="5.3.1 BaseEvent"></a>5.3.1 <a href="https://openlayers.org/en/latest/apidoc/module-ol_events_Event-BaseEvent.html">BaseEvent</a></h4><ul><li><code>change</code></li><li><code>error</code></li></ul><h4 id="5-3-2-ObjectEvent"><a href="#5-3-2-ObjectEvent" class="headerlink" title="5.3.2 ObjectEvent"></a>5.3.2 <a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a></h4><ul><li>`change:layerGroup </li><li><code>change:size</code> </li><li><code>change:target</code> </li><li><code>change:view</code> </li><li><code>propertychang</code></li></ul><h4 id="5-3-3-MapBrowserEvent"><a href="#5-3-3-MapBrowserEvent" class="headerlink" title="5.3.3 MapBrowserEvent"></a>5.3.3 <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapBrowserEvent-MapBrowserEvent.html">MapBrowserEvent</a></h4><ul><li><code>click</code></li><li>`dblclick</li><li><code>singleclick</code></li><li><code>pointerdrag</code> : Triggered when a pointer is dragged.</li><li><code>pointermove</code> : Triggered when a pointer is moved. Note that on touch devices this is triggered when the map is panned, so is not the same as mousemove.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// click事件,双击触发两次,点多少次都会触发</span></span><br><span class="line">  map.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//双击事件，没有拖动</span></span><br><span class="line">  map.on(<span class="string">&#x27;dblclick&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dblclick&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//真正的单击，没有拖动和双击。请注意，此事件会延迟 250 毫秒，以确保它不是双击。</span></span><br><span class="line">  map.on(<span class="string">&#x27;singleclick&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;singleclick &#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 触摸设备事件 */</span></span><br><span class="line"><span class="comment">// 地图触摸拖拽事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;pointerdrag&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;pointerdrag&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 地图触摸移动事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;pointermove&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;pointermove&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-3-4-MapEvent"><a href="#5-3-4-MapEvent" class="headerlink" title="5.3.4 MapEvent"></a>5.3.4 <a href="https://openlayers.org/en/latest/apidoc/module-ol_MapEvent-MapEvent.html">MapEvent</a></h4><ul><li><code>loadstart</code> : Triggered when loading of additional map data has completed.</li><li><code>loadend</code> : Triggered when loading of additional map data (tiles, images, features) starts.</li><li><code>movestart</code> : Triggered when the map starts moving.</li><li><code>moveend</code> : Triggered after the map is moved.</li><li><code>postrender</code> : Triggered after a map frame is rendered.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地图开始移动事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;movestart&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;movestart &#x27;</span>, event);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 地图移动结束事件</span></span><br><span class="line">  map.on(<span class="string">&#x27;moveend&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;moveend&#x27;</span>, event);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//地图渲染完成触发</span></span><br><span class="line">  map.on(<span class="string">&#x27;postrender&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;postrender&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-3-5-RenderEvent"><a href="#5-3-5-RenderEvent" class="headerlink" title="5.3.5 RenderEvent"></a>5.3.5 <a href="https://openlayers.org/en/latest/apidoc/module-ol_render_Event-RenderEvent.html">RenderEvent</a></h4><ul><li><code>precompose</code><br> Triggered before layers are composed. When dispatched by the map, the event object will not have a context set. When dispatched by a layer, the event object will have a context set. Only WebGL layers currently dispatch this event.</li><li><code>postcompose</code><br>Triggered after layers are composed. When dispatched by the map, the event object will not have a context set. When dispatched by a layer, the event object will have a context set. Only WebGL layers currently dispatch this event.</li><li><code>rendercomplete</code><br> Triggered when rendering is complete, i.e. all sources and tiles have finished loading for the current viewport, and all tiles are faded in. The event object will not have a context set.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在渲染图层之前触发，没有设置上下文context</span></span><br><span class="line">  <span class="comment">//监听的是渲染的图层layer</span></span><br><span class="line">  map.on(<span class="string">&#x27;precompose&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;precompose&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//所有图层渲染完后触发，没有设置上下文context</span></span><br><span class="line">  <span class="comment">//监听的是渲染的图层layer</span></span><br><span class="line">  map.on(<span class="string">&#x27;postcompose&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;postcompose&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="5-4-Observable-Properties"><a href="#5-4-Observable-Properties" class="headerlink" title="5.4 Observable Properties"></a>5.4 Observable Properties</h3><table><thead><tr><th>Name</th><th>Type</th><th>Settable</th><th><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object.ObjectEvent.html">ObjectEvent</a> type</th><th>Description</th></tr></thead><tbody><tr><td><code>layerGroup</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Group-LayerGroup.html">LayerGroup</a></td><td>yes</td><td><code>change:layergroup</code></td><td>A layer group containing the layers in this map.</td></tr><tr><td><code>size</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a> | undefined</td><td>yes</td><td><code>change:size</code></td><td>The size in pixels of the map in the DOM.</td></tr><tr><td><code>target</code></td><td>HTMLElement | string | undefined</td><td>yes</td><td><code>change:target</code></td><td>The Element or id of the Element that the map is rendered in.</td></tr><tr><td><code>view</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_View-View.html">View</a></td><td>yes</td><td><code>change:view</code></td><td>The view that controls this map.</td></tr></tbody></table><h3 id="5-5-Methods-方法"><a href="#5-5-Methods-方法" class="headerlink" title="5.5 Methods(方法)"></a>5.5 Methods(方法)</h3><h4 id="5-5-1-add"><a href="#5-5-1-add" class="headerlink" title="5.5.1 add"></a>5.5.1 add</h4><ul><li><code>addControl(control)</code></li><li><code>addInteraction(interaction)</code></li><li><code>addLayer(layer)</code></li><li><code>addOverlay(overlay)</code></li></ul><h4 id="5-5-2-get"><a href="#5-5-2-get" class="headerlink" title="5.5.2 get"></a>5.5.2 get</h4><ul><li>getControls() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">Control</a> &gt;}</li><li>getInteractions() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Interaction-Interaction.html">Interaction</a> &gt;}</li><li>getLayers() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html">BaseLayer</a> &gt;}</li><li>getLayerGroup() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Group-LayerGroup.html">LayerGroup</a>}</li><li>getAllLayers() =&gt; {Array&lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html">Layer</a> &gt;}</li><li>getOverlays() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Collection-Collection.html">Collection</a> &lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Overlay-Overlay.html">Overlay</a> &gt;}</li><li>getOverlayById(id) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Overlay-Overlay.html">Overlay</a> | null}</li><li>getSize() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_size.html#~Size">Size</a> | undefined}</li><li>getTarget() =&gt; {HTMLElement | string | undefined}</li><li>getTargetElement() =&gt; {HTMLElement}</li><li>getView() =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_View-View.html">View</a>}</li><li>getViewport() =&gt; {HTMLElement}</li></ul><h4 id="5-5-3-set"><a href="#5-5-3-set" class="headerlink" title="5.5.3 set"></a>5.5.3 set</h4><ul><li>setLayers(layers)</li><li>setLayerGroup(layerGroup)</li><li>setSize(size)</li><li>setTarget(target)</li><li>setView(view)</li></ul><h4 id="5-5-4-remove"><a href="#5-5-4-remove" class="headerlink" title="5.5.4 remove"></a>5.5.4 remove</h4><ul><li>removeControl(control) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_control_Control-Control.html">Control</a> | undefined}</li><li>removeInteraction(interaction) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Interaction-Interaction.html">Interaction</a> | undefined}</li><li>removeLayer(layer) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html">BaseLayer</a> | undefined}</li><li>removeOverlay(overlay) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_Overlay-Overlay.html">Overlay</a> | undefined}</li></ul><h4 id="5-5-5-像素与坐标"><a href="#5-5-5-像素与坐标" class="headerlink" title="5.5.5 像素与坐标"></a>5.5.5 像素与坐标</h4><ul><li><p>getEventPixel(event) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_pixel.html#~Pixel">Pixel</a>}</p><blockquote><p>Returns the map pixel position for a browser event relative to the viewport.</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mapDom.value?.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取到地图鼠标的位置</span></span><br><span class="line">  mousePosition = map.getEventPixel(event);</span><br><span class="line">  <span class="comment">// 鼠标移动时强制渲染地图</span></span><br><span class="line">  map.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>getEventCoordinate(event) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~Coordinate">Coordinate</a>}</p><blockquote><p>Returns the coordinate in user projection for a browser event.</p></blockquote></li><li><p>getCoordinateFromPixel(pixel) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~Coordinate">Coordinate</a>}</p><blockquote><p>Get the coordinate for a given pixel. This returns a coordinate in the user projection.</p></blockquote></li><li><p>getPixelFromCoordinate(coordinate) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_pixel.html#~Pixel">Pixel</a>}</p><blockquote><p>Get the pixel for a coordinate. This takes a coordinate in the user projection and returns the corresponding pixel.</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到当前视口的像素</span></span><br><span class="line">    <span class="keyword">let</span> eventPixel = map.getEventPixel(event.originalEvent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getEventPixel&#x27;</span>, eventPixel);</span><br><span class="line">    <span class="comment">//获取指定事件的投影坐标</span></span><br><span class="line">    <span class="keyword">let</span> eventCoordinate = map.getEventCoordinate(event.originalEvent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getEventCoordinate&#x27;</span>, eventCoordinate);</span><br><span class="line">    <span class="comment">//获取给定像素的投影坐标</span></span><br><span class="line">    <span class="keyword">let</span> coordinateFromPixel = map.getCoordinateFromPixel(event.pixel);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getCoordinateFromPixel&#x27;</span>, coordinateFromPixel);</span><br><span class="line">    <span class="comment">//获取指定坐标的像素。这需要用户投影中的坐标并返回相应的像素</span></span><br><span class="line">    <span class="keyword">let</span> pixelFromCoordinate = map.getPixelFromCoordinate([<span class="number">113.35275651421398</span>, <span class="number">23.12185264976067</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getPixelFromCoordinate&#x27;</span>, pixelFromCoordinate);</span><br></pre></td></tr></table></figure><ul><li><p>getFeaturesAtPixel(pixel, options) =&gt; {Array&lt; <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature.html#~FeatureLike">FeatureLike</a> &gt;}</p><blockquote><p>Get all features that intersect a pixel on the viewport.</p></blockquote></li><li><p>hasFeatureAtPixel(pixel, options) =&gt; {boolean}</p><blockquote><p>Detect if features intersect a pixel on the viewport. Layers included in the detection can be configured through the <code>layerFilter</code> option.</p></blockquote></li><li><p>forEachFeatureAtPixel(pixel, callback, opt_options) =&gt; {T | undefined}<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723091146.png" alt="image.png"></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取与视口上的像素相交的所有要素。</span></span><br><span class="line">    <span class="keyword">let</span> feature = map.getFeaturesAtPixel(event.pixel);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getFeaturesAtPixel&#x27;</span>, feature);</span><br><span class="line">    map.on(<span class="string">&#x27;singleclick&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//检测与视口上的像素相交的featrue</span></span><br><span class="line">      <span class="keyword">let</span> features: FeatureLike[] = [];</span><br><span class="line">      map.forEachFeatureAtPixel(</span><br><span class="line">        event.pixel,</span><br><span class="line">        <span class="function">(<span class="params">feature, layer</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(event, feature, layer);</span><br><span class="line">          features.push(feature);</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">layerFilter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">layer</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//图层过滤</span></span><br><span class="line">            <span class="keyword">return</span> layer.get(<span class="string">&#x27;name&#x27;</span>) === <span class="string">&#x27;gz&#x27;</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">hitTolerance</span>: <span class="number">0</span>, <span class="comment">//以 css 像素为单位的命中检测容差。将检查给定位置周围半径内的像素的featrue。</span></span><br><span class="line">          <span class="attr">checkWrapped</span>: <span class="literal">true</span>, <span class="comment">//将检查 +/- 1 世界宽度范围内的包裹几何图形</span></span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-5-6-其他"><a href="#5-5-6-其他" class="headerlink" title="5.5.6 其他"></a>5.5.6 其他</h4><ul><li><p>render()</p><blockquote><p>Request a map rendering (at the next animation frame).</p></blockquote></li><li><p>renderSync()</p><blockquote><p>Requests an immediate render in a synchronous manner.</p></blockquote></li><li><p>updateSize()</p><blockquote><p>Force a recalculation of the map viewport size. This should be called when third-party code changes the size of the map viewport.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制重新计算地图视口大小</span></span><br><span class="line"></span><br><span class="line">  map.updateSize();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在下一个动画帧请求地图渲染</span></span><br><span class="line"></span><br><span class="line">  map.render();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//以同步方式请求立即渲染</span></span><br><span class="line"></span><br><span class="line">  map.renderSync();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-View-视图"><a href="#5-View-视图" class="headerlink" title="5 View - 视图"></a>5 View - 视图</h2><h3 id="5-1-概览"><a href="#5-1-概览" class="headerlink" title="5.1 概览"></a>5.1 概览</h3><blockquote><p>A View object represents a simple 2D view of the map.<br>This is the object to act upon to change the center, resolution, and rotation of the map.<br>A View has a <code>projection</code>. The projection determines the coordinate system of the center, and its units determine the units of the resolution (projection units per pixel). The default projection is Web Mercator (EPSG:3857).</p></blockquote><h3 id="5-2-new-View-options"><a href="#5-2-new-View-options" class="headerlink" title="5.2 new View(options)"></a>5.2 new View(options)</h3><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>center</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_coordinate.html#~Coordinate">Coordinate</a> | undefined</td><td>The initial center for the view. If a user projection is not set, the coordinate system for the center is specified with the <code>projection</code> option. Layer sources will not be fetched if this is not set, but the center can be set later with <code>#setCenter</code>.</td></tr><tr><td><code>constrainRotation</code></td><td>boolean | number (defaults to true)</td><td>Rotation constraint. <code>false</code> means no constraint. <code>true</code> means no constraint, but snap to zero near zero. A number constrains the rotation to that number of values. For example, <code>4</code> will constrain the rotation to 0, 90, 180, and 270 degrees.</td></tr><tr><td><code>enableRotation</code></td><td>boolean (defaults to true)</td><td>Enable rotation. If <code>false</code>, a rotation constraint that always sets the rotation to zero is used. The <code>constrainRotation</code> option has no effect if <code>enableRotation</code> is <code>false</code>.</td></tr><tr><td><code>extent</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a> | undefined</td><td>The extent that constrains the view, in other words, nothing outside of this extent can be visible on the map.</td></tr><tr><td><code>constrainOnlyCenter</code></td><td>boolean (defaults to false)</td><td>If true, the extent constraint will only apply to the view center and not the whole extent.</td></tr><tr><td><code>smoothExtentConstraint</code></td><td>boolean (defaults to true)</td><td>If true, the extent constraint will be applied smoothly, i.e. allow the view to go slightly outside of the given <code>extent</code>.</td></tr><tr><td><code>maxResolution</code></td><td>number | undefined</td><td>The maximum resolution used to determine the resolution constraint. It is used together with <code>minResolution</code> (or <code>maxZoom</code>) and <code>zoomFactor</code>. If unspecified it is calculated in such a way that the projection’s validity extent fits in a 256x256 px tile. If the projection is Spherical Mercator (the default) then <code>maxResolution</code> defaults to <code>40075016.68557849 / 256 = 156543.03392804097</code>.</td></tr><tr><td><code>minResolution</code></td><td>number | undefined</td><td>The minimum resolution used to determine the resolution constraint. It is used together with <code>maxResolution</code> (or <code>minZoom</code>) and <code>zoomFactor</code>. If unspecified it is calculated assuming 29 zoom levels (with a factor of 2). If the projection is Spherical Mercator (the default) then <code>minResolution</code> defaults to <code>40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253</code>.</td></tr><tr><td><code>maxZoom</code></td><td>number (defaults to 28)</td><td>The maximum zoom level used to determine the resolution constraint. It is used together with <code>minZoom</code> (or <code>maxResolution</code>) and <code>zoomFactor</code>. Note that if <code>minResolution</code> is also provided, it is given precedence over <code>maxZoom</code>.</td></tr><tr><td><code>minZoom</code></td><td>number (defaults to 0)</td><td>The minimum zoom level used to determine the resolution constraint. It is used together with <code>maxZoom</code> (or <code>minResolution</code>) and <code>zoomFactor</code>. Note that if <code>maxResolution</code> is also provided, it is given precedence over <code>minZoom</code>.</td></tr><tr><td><code>multiWorld</code></td><td>boolean (defaults to false)</td><td>If <code>false</code> the view is constrained so only one world is visible, and you cannot pan off the edge. If <code>true</code> the map may show multiple worlds at low zoom levels. Only used if the <code>projection</code> is global. Note that if <code>extent</code> is also provided it is given precedence.</td></tr><tr><td><code>constrainResolution</code></td><td>boolean (defaults to false)</td><td>If true, the view will always animate to the closest zoom level after an interaction; false means intermediary zoom levels are allowed.</td></tr><tr><td><code>smoothResolutionConstraint</code></td><td>boolean (defaults to true)</td><td>If true, the resolution min/max values will be applied smoothly, i. e. allow the view to exceed slightly the given resolution or zoom bounds.</td></tr><tr><td><code>showFullExtent</code></td><td>boolean (defaults to false)</td><td>Allow the view to be zoomed out to show the full configured extent. By default, when a view is configured with an extent, users will not be able to zoom out so the viewport exceeds the extent in either dimension. This means the full extent may not be visible if the viewport is taller or wider than the aspect ratio of the configured extent. If showFullExtent is true, the user will be able to zoom out so that the viewport exceeds the height or width of the configured extent, but not both, allowing the full extent to be shown.</td></tr><tr><td><code>projection</code></td><td><a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#~ProjectionLike">ProjectionLike</a> (defaults to ‘EPSG:3857’)</td><td>The projection. The default is Spherical Mercator.</td></tr><tr><td><code>resolution</code></td><td>number | undefined</td><td>The initial resolution for the view. The units are <code>projection</code> units per pixel (e.g. meters per pixel). An alternative to setting this is to set <code>zoom</code>. Layer sources will not be fetched if neither this nor <code>zoom</code> are defined, but they can be set later with <code>#setZoom</code> or <code>#setResolution</code>.</td></tr><tr><td><code>resolutions</code></td><td>Array.<number> | undefined</td><td>Resolutions that determine the zoom levels if specified. The index in the array corresponds to the zoom level, therefore the resolution values have to be in descending order. It also constrains the resolution by the minimum and maximum value. If set the <code>maxResolution</code>, <code>minResolution</code>, <code>minZoom</code>, <code>maxZoom</code>, and <code>zoomFactor</code> options are ignored.</td></tr><tr><td><code>rotation</code></td><td>number (defaults to 0)</td><td>The initial rotation for the view in radians (positive rotation clockwise, 0 means North).</td></tr><tr><td><code>zoom</code></td><td>number | undefined</td><td>Only used if <code>resolution</code> is not defined. Zoom level used to calculate the initial resolution for the view.</td></tr><tr><td><code>zoomFactor</code></td><td>number (defaults to 2)</td><td>The zoom factor used to compute the corresponding resolution.</td></tr><tr><td><code>padding</code></td><td>Array.<number> (defaults to [0, 0, 0, 0])</td><td>Padding (in css pixels). If the map viewport is partially covered with other content (overlays) along its edges, this setting allows to shift the center of the viewport away from that content. The order of the values is top, right, bottom, left.</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> View(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">center</span>: [<span class="number">113.24981689453125</span>, <span class="number">23.126468438108688</span>], <span class="comment">//视图中心位置</span></span><br><span class="line">    <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">//指定投影,84参考系投影</span></span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">12</span>, <span class="comment">//缩放到的级别</span></span><br><span class="line">    <span class="attr">constrainRotation</span>: <span class="literal">false</span>, <span class="comment">//true/false 没有约束，4将旋转限制为 0、90、180 和 270 度</span></span><br><span class="line">    <span class="attr">enableRotation</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">constrainOnlyCenter</span>: <span class="literal">false</span>, <span class="comment">// 如果为 true，则范围约束将仅适用于视图中心而不是整个范围</span></span><br><span class="line">    <span class="attr">extent</span>: [-<span class="number">180.0</span>, <span class="number">0.0</span>, <span class="number">180.0</span>, <span class="number">90.0</span>], <span class="comment">// 限制视图的范围 [左下角经度，左下角纬度，右上角经度，右上角纬度]</span></span><br><span class="line">    <span class="attr">smoothExtentConstraint</span>: <span class="literal">true</span>, <span class="comment">// 如果为 true，范围约束将被平滑地应用，即允许视图稍微超出给定的 extent</span></span><br><span class="line">    <span class="attr">maxResolution</span>: <span class="number">256</span>, <span class="comment">// 如果未指定，则以投影的有效范围适合 256x256 像素图块的方式计算</span></span><br><span class="line">    <span class="attr">minResolution</span>: <span class="number">256</span>, <span class="comment">// 如果未指定，则以投影的有效范围适合 256x256 像素图块的方式计算</span></span><br><span class="line">    <span class="attr">maxZoom</span>: <span class="number">5</span>, <span class="comment">//用于确定分辨率约束的最大缩放级别</span></span><br><span class="line">    <span class="attr">minZoom</span>: <span class="number">0</span>, <span class="comment">//用于确定分辨率约束的最小缩放级别</span></span><br><span class="line">    <span class="attr">multiWorld</span>: <span class="literal">false</span>, <span class="comment">//如果 false 视图受到约束，因此只有一个世界可见，并且您无法平移边缘。如果 true 地图可能以低缩放级别显示多个世界</span></span><br><span class="line">    <span class="attr">constrainResolution</span>: <span class="literal">false</span>, <span class="comment">//如果为 true，则视图将始终在交互后以最接近的缩放级别进行动画处理；false 表示允许中间缩放级别。</span></span><br><span class="line">    <span class="attr">smoothResolutionConstraint</span>: <span class="literal">true</span>, <span class="comment">//如果为 true，则视图将始终在交互后以最接近的缩放级别进行动画处理；false 表示允许中间缩放级别。</span></span><br><span class="line">    <span class="attr">showFullExtent</span>: <span class="literal">true</span>, <span class="comment">//允许缩小视图以显示完整的配置范围</span></span><br><span class="line">    <span class="attr">resolution</span>: <span class="number">2</span>, <span class="comment">//视图的初始分辨率。单位是 projection 每像素的单位（例如每像素米</span></span><br><span class="line">    <span class="attr">resolutions</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>], <span class="comment">//指定缩放级别的分辨率,数组中的索引对应于缩放级别，因此分辨率值必须按降序排列。</span></span><br><span class="line">    <span class="attr">rotation</span>: <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="comment">//以弧度为单位的视图初始旋转（顺时针旋转，0 表示北）</span></span><br><span class="line">    <span class="attr">zoomFactor</span>: <span class="number">2</span>, <span class="comment">//用于计算相应分辨率的缩放因子</span></span><br><span class="line">    <span class="attr">padding</span>: [<span class="number">350</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>], <span class="comment">//填充（以 css 像素为单位）顺序是上、右、下、左,如果地图视口沿其边缘部分被其他内容（覆盖）覆盖，则此设置允许将视口的中心从该内容移开</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="5-6-Extends"><a href="#5-6-Extends" class="headerlink" title="5.6 Extends"></a>5.6 Extends</h3><ul><li><a href="https://openlayers.org/en/latest/apidoc/module-ol_Object-BaseObject.html">BaseObject</a></li></ul><h3 id="5-7-Observable-Properties"><a href="#5-7-Observable-Properties" class="headerlink" title="5.7 Observable Properties"></a>5.7 Observable Properties</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723101140.png" alt="image.png"></p><h3 id="5-8-Fire"><a href="#5-8-Fire" class="headerlink" title="5.8 Fire"></a>5.8 Fire</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723101103.png" alt="image.png"></p><h3 id="5-9-Methods"><a href="#5-9-Methods" class="headerlink" title="5.9 Methods"></a>5.9 Methods</h3><h4 id="5-9-1-adjust"><a href="#5-9-1-adjust" class="headerlink" title="5.9.1 adjust"></a>5.9.1 adjust</h4><blockquote><p>opt_anchor 为锚点(可选值)<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723101436.png" alt="image.png"></p></blockquote><ul><li>adjustCenter(deltaCoordinates)</li><li>adjustResolution(ratio, opt_anchor)</li><li>adjustRotation(delta, opt_anchor)</li><li>adjustZoom(delta, opt_anchor)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    view.adjustCenter([-<span class="number">10</span>, <span class="number">3</span>]); <span class="comment">// 将相对坐标添加到视图的中心</span></span><br><span class="line">    view.adjustResolution(<span class="number">3</span>) <span class="comment">//将视图分辨率乘以一个比率</span></span><br><span class="line">    view.adjustRotation(<span class="built_in">Math</span>.PI/<span class="number">2</span>,[<span class="number">130</span>,<span class="number">25</span>])<span class="comment">//向视图旋转添加一个值, [130,25]为锚点</span></span><br><span class="line">    view.adjustZoom(<span class="number">3</span>,[<span class="number">100</span>,<span class="number">25</span>])<span class="comment">// 将值添加到视图缩放级别</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="5-9-2-animate-var-args"><a href="#5-9-2-animate-var-args" class="headerlink" title="5.9.2 animate(var_args)"></a>5.9.2 animate(var_args)</h4><p>Animate the view. The view’s center, zoom (or resolution), and rotation can be animated for smooth transitions between view states. For example, to animate the view to a new zoom level:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.animate(&#123;<span class="attr">zoom</span>: view.getZoom() + <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><p>By default, the animation lasts one second and uses in-and-out easing. You can customize this behavior by including <code>duration</code> (in milliseconds) and <code>easing</code> options (see <a href="https://openlayers.org/en/latest/apidoc/module-ol_easing.html"><code>ol/easing</code></a>).</p><p>To chain together multiple animations, call the method with multiple animation objects. For example, to first zoom and then pan:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.animate(&#123;<span class="attr">zoom</span>: <span class="number">10</span>&#125;, &#123;<span class="attr">center</span>: [<span class="number">0</span>, <span class="number">0</span>]&#125;);</span><br></pre></td></tr></table></figure><p>If you provide a function as the last argument to the animate method, it will get called at the end of an animation series. The callback will be called with <code>true</code> if the animation series completed on its own or <code>false</code> if it was cancelled.</p><p>Animations are cancelled by user interactions (e.g. dragging the map) or by calling <code>view.setCenter()</code>, <code>view.setResolution()</code>, or <code>view.setRotation()</code> (or another method that calls one of these).</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723101912.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; easeIn, easeOut &#125; <span class="keyword">from</span> <span class="string">&#x27;ol/easing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    view.animate(</span><br><span class="line">      &#123; <span class="attr">zoom</span>: <span class="number">10</span>, <span class="attr">rotation</span>: <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="attr">duration</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">center</span>: [<span class="number">116.36564254760744</span>, <span class="number">39.90486412650293</span>],</span><br><span class="line">        <span class="attr">easing</span>: easeOut,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">10000</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">flag</span>) =&gt;</span> &#123; <span class="comment">// 回调函数</span></span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">console</span>.log(<span class="string">&#x27;动画完成&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">&#x27;动画取消&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//取消动画</span></span><br><span class="line">      view.cancelAnimations();</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="5-9-3-fit-geometryOrExtent-options"><a href="#5-9-3-fit-geometryOrExtent-options" class="headerlink" title="5.9.3 fit(geometryOrExtent, options)"></a>5.9.3 fit(geometryOrExtent, options)</h4><blockquote><p>Fit the given geometry or extent based on the given map size and border. The size is pixel dimensions of the box to fit the extent into. In most cases you will want to use the map size, that is <code>map.getSize()</code>. Takes care of the map angle.</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723103252.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = map.getView();</span><br><span class="line">  <span class="keyword">let</span> extent = [<span class="number">106.36564254760744</span>, <span class="number">30.90486412650293</span>, <span class="number">116.36564254760744</span>, <span class="number">39.90486412650293</span>];</span><br><span class="line">  <span class="keyword">if</span> (view) &#123;</span><br><span class="line">    view.fit(extent, &#123;</span><br><span class="line">      <span class="comment">//根据给定的地图大小和边界拟合给定的几何图形或范围</span></span><br><span class="line">      <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">      <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fit 函数执行完毕&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="5-9-4-get、set"><a href="#5-9-4-get、set" class="headerlink" title="5.9.4 get、set"></a>5.9.4 get、set</h4><ul><li><p>get/set 属性名</p></li><li><p>getAnimating() =&gt; {boolean}</p><blockquote><p>Determine if the view is being animated.</p></blockquote></li><li><p>getZoomForResolution(resolution) =&gt; {number | undefined}</p><blockquote><p>Get the zoom level for a resolution.</p></blockquote></li><li><p>getResolutionForZoom(zoom) =&gt; {number}</p><blockquote><p>Get the resolution for a zoom level.</p></blockquote></li><li><p>getResolutionForExtent(extent, size) =&gt; {number}</p><blockquote><p>Get the resolution for a provided extent (in map units) and size (in pixels).</p></blockquote></li></ul><h4 id="5-9-5-其他"><a href="#5-9-5-其他" class="headerlink" title="5.9.5 其他"></a>5.9.5 其他</h4><ul><li><p>beginInteraction()</p><blockquote><p>Notify the View that an interaction has started. The view state will be resolved to a stable one if needed (depending on its constraints).</p></blockquote></li><li><p>endInteraction(duration, resolutionDirection, anchor)</p><blockquote><p>Notify the View that an interaction has ended. The view state will be resolved to a stable one if needed (depending on its constraints).<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723103547.png" alt="image.png"></p></blockquote></li><li><p>calculateExtent(size) =&gt; {<a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#~Extent">Extent</a>}</p><blockquote><p>Calculate the extent for the current view state and the passed box size.</p></blockquote></li><li><p>centerOn(coordinate, size, position)</p><blockquote><p>Center on coordinate and view position.<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240723103700.png" alt="image.png"></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> openLayer </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非暴力沟通_update</title>
      <link href="/2024/07/25/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_update/"/>
      <url>/2024/07/25/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_update/</url>
      
        <content type="html"><![CDATA[<h2 id="非暴力沟通"><a href="#非暴力沟通" class="headerlink" title="非暴力沟通"></a>非暴力沟通</h2><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li>带着尊重和同理心对待他人，并且发自内心地相互给予</li><li>关注自己和他人的需求</li></ul><h3 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h3><ul><li><p>观察：不带评论的观察；<strong>区分观察与评论</strong></p></li><li><p>感受：表达出我们看到这些行为时的感受；<strong>区分感受与想法</strong>；建立感受词汇表</p><blockquote><p>在使用“<strong>觉得／感到／感觉</strong>”这类词时，我们实际上并没有在表达感受。例如，在“我觉得没有得到公平对待”这句话中，将“我觉得”换成“<strong>我认为</strong>”也许更恰当</p></blockquote></li><li><p>需要：看见感受背后的需要；他人的言行也许会刺激我们的感受，但并不是感受的根源，需求才是。</p><blockquote><p>听到不中听的话时，我们可以有四种选择来接收：（1）指责自己；（2）指责他人；（3）体会自己的感受与需要；（4）体会他人在消极的话语下隐藏着什么感受与需要。</p></blockquote></li><li><p>请求：使用<strong>正向</strong>、<strong>具体</strong>的语言；不要只表达请求；<strong>区分请求与要求</strong>；不是为了改变他人来满足自己</p><blockquote><p>如果我们只是表达自己的感受，别人可能并不清楚我们想要他们做什么；如果一个人只提出请求，却没有首先表达感受与需要，也有可能导致交流的困难，尤其是在人们以问话的形式提出请求时；我们需要清楚自己希望对方给予什么样的回应，并且清晰地提出相应的请求；<strong>最重要的沟通方式是即便在他人拒绝时我们也能同理他们的感受和需要</strong></p></blockquote></li></ul><h3 id="对别人"><a href="#对别人" class="headerlink" title="对别人"></a>对别人</h3><h4 id="听到不中听的话有四种选择"><a href="#听到不中听的话有四种选择" class="headerlink" title="听到不中听的话有四种选择"></a>听到不中听的话有四种选择</h4><ol><li>指责自己；</li><li>指责他人；</li><li>体会自己的感受与需要；</li><li>体会他人在消极的话语下隐藏着什么感受与需要</li></ol><p>当面对别人的评判或指责时，我们通常报之以防卫、回避或攻击。而一旦我们将注意力聚焦在彼此的观察、感受和需要，而不是去诊断和评判，我们就能发现内心深处的善意。</p><h4 id="不要评判"><a href="#不要评判" class="headerlink" title="不要评判"></a>不要评判</h4><p>指责、侮辱、贴标签、批评、比较、分析都是评判的形式。表达出自己的需要和价值观，而非进行评判。</p><p>每个人都有自己的需要和价值观，切勿认为那些不符合我们价值观的人是不对的、不好的。</p><h4 id="不要推卸责任"><a href="#不要推卸责任" class="headerlink" title="不要推卸责任"></a>不要推卸责任</h4><p>每一个人都对自己的思想、情感与行为负有责任，不要使用类似</p><ul><li>“不得不” ：“有些事不管你喜不喜欢，都不得不做”</li><li>“让人感到”：“你让我感到内疚”</li></ul><p>来回避自己的感受和想法所负的责任。</p><p>当我们将行动的原因归咎于外部因素时，我们便在试图推卸自己的责任。</p><h4 id="同理他人"><a href="#同理他人" class="headerlink" title="同理他人"></a>同理他人</h4><p>我们常常有强烈的冲动想给他人建议或安慰，或是解释自己的立场和感受。同理则邀请我们<strong>清空先入为主的想法</strong>，全身心地聆听他人。</p><p>不论他人用什么样的言辞来表达自己，我们都只是聆听他们的观察、感受、需要和请求。</p><p>如果我们只是关心别人的话是否符合我们的理论，我们是在审视他们，而没有与他们同在。同理的核心是“临在”——全然地与他人以及他们当下的体验同在。</p><p>在聆听他人的观察、感受、需要和请求后，通过复述对方的话，将我们的理解反馈给对方。非暴力沟通建议我们用提问的形式来复述我们的理解，便于对方做出必要的更正。我们的提问可以专注于以下几个方面：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240720193151.png" alt="image.png|467"></p><p>在复述时，要特别注意语气。一个人在听别人反馈自己的话时，哪怕听到一点点批评或嘲讽，都会格外敏感。如果我们的语气像是在下判断，仿佛认定对方心里在想什么，这通常会让他人感到不舒服。因而，带着觉知聆听他人的感受和需要时，我们的语气是探询式的，是为了确认我们的理解是否到位，而不是在下结论。</p><p>此外，持续地同理让他人有机会充分表达自己，当他人感到被充分理解后，我们再来关注解决方案或提出请求。我们自己也需要获得同理才能更好地同理他人。当意识到自己处于辩解防卫的状态或痛苦得无法同理他人时，我们可以选择（1）停顿，深呼吸，同理自己；（2）“非暴力呐喊”；（3）离开现场</p><h4 id="使乏味的对话变有趣"><a href="#使乏味的对话变有趣" class="headerlink" title="使乏味的对话变有趣"></a>使乏味的对话变有趣</h4><p>我们都经历过乏味的谈话，也许是在某个社交场合中：我们无法从说话的内容中感受到和讲述者的连结；还有些人一旦开始讲话便喋喋不休，让听的人害怕对话会没完没了。当我们无法与讲述者的感受、需要、请求建立连结时，对话便会失去生机。当讲述者不清楚自己的感受、需要和请求时，说出来的话就会乏味。这时，我们非但无法与对方建立连结，反而成了承接对方讲话的垃圾桶。</p><p><strong>做法便是去体会对方心中可能会有的感受和需要</strong><br>使谈话变得生动有趣的另一种方法是，直接告诉对方我们想和他们建立更多连结，并请求对方的支持。</p><h4 id="了解“不”和沉默所传达的感受和需要"><a href="#了解“不”和沉默所传达的感受和需要" class="headerlink" title="了解“不”和沉默所传达的感受和需要"></a>了解“不”和沉默所传达的感受和需要</h4><h3 id="对自己"><a href="#对自己" class="headerlink" title="对自己"></a>对自己</h3><h4 id="远离自我评判，感受内在需要"><a href="#远离自我评判，感受内在需要" class="headerlink" title="远离自我评判，感受内在需要"></a>远离自我评判，感受内在需要</h4><h4 id="做出改变的驱动力"><a href="#做出改变的驱动力" class="headerlink" title="做出改变的驱动力"></a>做出改变的驱动力</h4><p>即使我们有时能从错误中“得到教训”并做出改变，但在我看来，那背后的驱动力也不是正向的。我希望，<strong>我们的改变是出于想为自己和他人创造更美好的生活</strong>，而并不是因为羞愧、内疚这样一些具有破坏性的驱动力。</p><p>充满暴力，并且根深蒂固地烙印在我们的意识中，以致于许多人无法想象如果没有它要怎么生活。这个词便是“应该”。</p><p>人类在听到任何形式的要求时，都会不由自主地抗拒，因为要求威胁着我们作为人的自主性——我们有强烈的需要为自己做选择。不管是外在的强权还是内在的暴君对我们说“应该”，我们都会心生抵抗。</p><p>人天生就不想成为奴隶，不愿意服从于“应该”和“不得不”的支配——不论来自外部世界还是我们自身。即使对要求屈服或让步，但我们的行动却无法为生命带来喜悦。</p><h4 id="哀悼"><a href="#哀悼" class="headerlink" title="哀悼"></a>哀悼</h4><p>在非暴力沟通中，所谓“哀悼”（mourning）是充分连结未被满足的需要以及因为自认为做得不够完美而引发的感受。哀悼，让我们不再以指责或怨恨自己的方式来经验后悔，而是帮助我们从中学习。<strong>我们会看见自己的行为如何与我们的需要和价值观产生冲突，并且接纳在这个过程中浮现的感受。当我们将注意力放在需要上，自然就能激发出充满创造力的可能性来满足需要</strong>。相反，如果以道德评判来谴责自己，我们不仅难以看到这些可能性，而且容易陷入自我惩罚的状态。</p><h4 id="自我宽恕"><a href="#自我宽恕" class="headerlink" title="自我宽恕"></a>自我宽恕</h4><p>哀悼过后，我们可以尝试“自我宽恕”这一过程。想一想自己为何要采取那个行动，问自己：“<strong>我当时那样做，是要满足什么需要呢？</strong>”我相信，人的行为都是为了满足需要所做的尝试，不论它是否能够实现目的，也不论我们事后感到庆幸还是遗憾。</p><p>以同理心倾听自己，我们就能听见行为背后那内心深处的需要。一旦和自己建立了充满同理心的连结，我们就能宽恕自己。我们发现，尽管过去的选择并不理想，需要为之哀悼，但那也是想让自己的生命更加美好。要善意地对待自己，关键在于带着同理心拥抱两个“自己”：<strong>对过去的行为感到懊恼的自己以及当初做了那件事的自己</strong>。</p><h4 id="“不得不”转化为“我选择”"><a href="#“不得不”转化为“我选择”" class="headerlink" title="“不得不”转化为“我选择”"></a>“不得不”转化为“我选择”</h4><p><strong>第一步</strong>：在你的生活中，哪些事情让你觉得无趣，却又不得不去做？你不想做它们，但还是去做了，因为你认为自己没有选择。请将这些事情列在一张纸上。<br><strong>第二步</strong>：写完清单后，清楚地告诉自己：你之所以做这些事情，是因为你选择了它们，而非你不得不做。在你所列出的每一件事情前加上“我选择做……”。<br><strong>第三步</strong>：一旦你认同了之所以做某件事是出于自己的选择，请试着体会选择背后的意图是什么，然后以“我选择做……因为我想要……”来表述。</p><h3 id="面对愤怒"><a href="#面对愤怒" class="headerlink" title="面对愤怒"></a>面对愤怒</h3><p>生气时，指责和惩罚他人都无法真正传达我们的心声。如果想充分表达愤怒，首先要认识到他人并不需要对我们的愤怒负责。取而代之的是，<strong>把注意力放在自己的感受和需要上</strong>。相较于评判、指责或惩罚他人，我们若能把自己的需要表达出来，将更有可能让这些需要得到满足。<strong>表达愤怒的 4 个步骤</strong>是：（1）停下来，深吸一口气；（2）辨识脑海中评判性的想法；（3）与自己的需要连结；（4）表达自己的感受和未满足的需要。有时，<strong>在第 3 和第 4 步之间，我们也许需要先同理对方</strong>。这样，当我们在第 4 步表达自己时，对方才能更好地听见我们。我们需要给自己充分的时间来学习和实践非暴力沟通。</p><h3 id="面对冲突"><a href="#面对冲突" class="headerlink" title="面对冲突"></a>面对冲突</h3><p>使用非暴力沟通来化解冲突与传统的调解方法不同。我们不去讨论事件本身、策略和妥协之道，而是首先集中注意力找到双方的需要，然后再寻求策略满足那些需要。一开始，我们会先让冲突中的双方建立连结；然后确保双方都有机会充分表达自己的需要并且也能仔细聆听对方的需要；一旦人们听见彼此的需要，就让他们清楚地提出可行的步骤来满足那些需要。我们要避免对冲突做出判断或分析，而始终关注在需要上。当有一方太过痛苦以至于无法聆听另一方的需要时，我们要花足够的时间同理他们，直到他们确认了自己的痛苦已经被听到。此外，当别人对我们的请求说“不”时，我们听到的不是对我们的拒绝，而是对方正在告诉我们——因为某个需要阻碍了他们对我们的请求说“是”。只有当双方充分聆听了彼此所有的需要后，我们才能进入解决方案阶段，引导双方使用正向的“行动语言”来提出可行的请求。当我们为两个冲突的人群化解纠纷时，以上这些原则同样适用。此外，我们还要格外密切地追踪进程，在必要的时候给予同理，让对话聚焦于当下，推动对话的进程而不在原地打转，并适时打断讲述者的发言，以让人们回到调解的轨道上来。有了这些方法和观念，我们就可以协助他人用非暴力沟通来化解冲突，即使是经年累月的冲突也能得以解决，直至皆大欢喜。</p><h3 id="没有机会沟通时"><a href="#没有机会沟通时" class="headerlink" title="没有机会沟通时"></a>没有机会沟通时</h3><p>在有些没有机会沟通（例如危险迫在眉睫）的情况下，我们需要采取保护性强制力。这样做的目的是防止人们受到伤害或不公待遇，而不是为了惩罚他人或让他人难受、忏悔或改变。惩罚性强制力会让人产生敌意和抵触心理。惩罚还会伤害他人的善意和自尊，也会让我们只注意行为的外在后果，而忽视行为本身的价值。惩罚和指责也无法让他人按照我们所期望的理由来行动。</p><h3 id="学会表达感觉与赞赏"><a href="#学会表达感觉与赞赏" class="headerlink" title="学会表达感觉与赞赏"></a>学会表达感觉与赞赏</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724194033.png" alt="image.png"></p><p>在我看来，以上这些我们常常用来表达赞赏和感激的话却是一种疏离生命的沟通方式。你也许会感到惊讶，我竟然将夸奖与恭维视为疏离生命的沟通！请注意，说话人以这样的形式表达赞赏时，并未传递其内心，而是<strong>以裁判者自居</strong>。也就是说，我将<strong>所有评判——无论是正向的还是负向的——都定义为疏离生命的沟通</strong>。</p><p>我们惯常的赞美方式往往带有评判，哪怕是正向的，有时甚至被用来操纵他人的行为。</p><p>非暴力沟通所鼓励的是，向他人表达感激时，庆祝是我们唯一的意图。</p><h4 id="表达感激的三个要素"><a href="#表达感激的三个要素" class="headerlink" title="表达感激的三个要素"></a>表达感激的三个要素</h4><ul><li>他人做了什么增进了我们的福祉。</li><li>我们有哪些需要因此得到了满足。</li><li>因为这些需要得到了满足，引起了我们什么样的愉悦感受。</li></ul><p>eg：“马歇尔，当你说这两点时（向我展示她的笔记），我感到充满了希望并且释然，因为我一直在寻找方法和儿子连结，你的这些话给了我方向。”</p><p>表达这三个要素时，并不一定要遵照以上的顺序。有时哪怕是一个微笑或一句简单的“谢谢你”就足以传递这一切。</p><h4 id="接收来自他人的感激"><a href="#接收来自他人的感激" class="headerlink" title="接收来自他人的感激"></a>接收来自他人的感激</h4><p>对于许多人来说，得体地接收别人的赞赏和感激并非易事。我们会担心自己是否值得他人的感激；也会担心感激背后的期待，特别当我们的老师或上司用感激作为激励我们的手段时；我们还会因为不想辜负感激而感到焦虑。<strong>在当今的文化中，人们已经习惯了基于买卖、有偿或者估值来运作的关系，以至于对于纯粹的施与受，我们多半会感到不适。</strong></p><p>非暴力沟通鼓励我们带着同理心来接收感激，就像我们同理他人那样。我们聆听自己做了什么增进了他人的福祉，由此满足了他人什么样的需要以及引发的感受。因为能为彼此的生命做出贡献，我们从心底为之喜悦。</p><p>通常，人们在听见对自己的赞赏时会有两种极端的反应——一种是自负，因为得到了赞美而认为自己高人一等；另一种是故作谦虚，满不在乎地否认赞赏：“哦，那没什么。”</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p><strong>若你能跳舞就别走路</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240724195710.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3项目搭建规范</title>
      <link href="/2024/07/20/vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E8%A7%84%E8%8C%83/"/>
      <url>/2024/07/20/vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3项目搭建规范"><a href="#vue3项目搭建规范" class="headerlink" title="vue3项目搭建规范"></a>vue3项目搭建规范</h1><h2 id="一-代码规范"><a href="#一-代码规范" class="headerlink" title="一. 代码规范"></a>一. 代码规范</h2><h3 id="1-1-集成-editorconfig-配置"><a href="#1-1-集成-editorconfig-配置" class="headerlink" title="1.1. 集成 editorconfig 配置"></a>1.1. 集成 editorconfig 配置</h3><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># http://editorconfig.org</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">[<span class="string">*</span>] <span class="comment"># 表示所有文件适用</span></span><br><span class="line"></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span> <span class="comment"># 设置文件字符集为 utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span> <span class="comment"># 缩进风格（tab | space）</span></span><br><span class="line"></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span> <span class="comment"># 缩进大小</span></span><br><span class="line"></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span> <span class="comment"># 控制换行类型(lf | cr | crlf)</span></span><br><span class="line"></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 去除行首的任意空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 始终在文件末尾插入一个新行</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">[<span class="string">*.md</span>] <span class="comment"># 表示仅 md 文件适用以下规则</span></span><br><span class="line"></span><br><span class="line"><span class="string">max_line_length</span> <span class="string">=</span> <span class="string">off</span></span><br><span class="line"></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>VSCode 需要安装一个插件：EditorConfig for VS Code</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2gh989yj30pj05ggmb.jpg" alt="image-20210722215138665"></p><h3 id="1-2-使用-prettier-工具"><a href="#1-2-使用-prettier-工具" class="headerlink" title="1.2. 使用 prettier 工具"></a>1.2. 使用 prettier 工具</h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p><p>1.安装 prettier</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install prettier -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.配置.prettierrc 文件：</p><ul><li><p>useTabs：使用 tab 缩进还是空格缩进，选择 false；</p></li><li><p>tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；</p></li><li><p>printWidth：当行字符的长度，推荐 80，也有人喜欢 100 或者 120；</p></li><li><p>singleQuote：使用单引号还是双引号，选择 true，使用单引号；</p></li><li><p>trailingComma：在多行输入的尾逗号是否添加，设置为 <code>none</code>；</p></li><li><p>semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">80</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.创建.prettierignore 忽略文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/dist/*</span><br><span class="line"></span><br><span class="line">.local</span><br><span class="line"></span><br><span class="line">.output.js</span><br><span class="line"></span><br><span class="line">/node_modules/**</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**/*.svg</span><br><span class="line"></span><br><span class="line">**/*.sh</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">/public/*</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.VSCode 需要安装 prettier 的插件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2acx21rj30ow057mxp.jpg" alt="image-20210722214543454"></p><p>5.测试 prettier 是否生效</p><ul><li><p>测试一：在代码中保存代码；一次保存格式化一个文件</p></li><li><p>测试二：配置一次性修改的命令；运行该命令 会格式化所有的文件</p></li></ul><p>在 package.json 中配置一个 scripts：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="string">&quot;prettier&quot;</span>: <span class="string">&quot;prettier --write .&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-使用-ESLint-检测"><a href="#1-3-使用-ESLint-检测" class="headerlink" title="1.3. 使用 ESLint 检测"></a>1.3. 使用 ESLint 检测</h3><p>1.在前面创建项目的时候，我们就选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。</p><p>2.VSCode 需要安装 ESLint 插件：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2oq26odj30pw05faaq.jpg" alt="image-20210722215933360"></p><p>3.解决 eslint 和 prettier 冲突的问题：</p><p>安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm i eslint-plugin-prettier eslint-config-prettier -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加 prettier 插件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  extends: [</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;@vue/typescript/recommended&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;@vue/prettier&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;@vue/prettier/@typescript-eslint&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#x27;plugin:prettier/recommended&#x27;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-git-Husky-和-eslint"><a href="#1-4-git-Husky-和-eslint" class="headerlink" title="1.4. git Husky 和 eslint"></a>1.4. git Husky 和 eslint</h3><p>虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉了：</p><ul><li><p>也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；</p></li><li><p>那么我们需要在组员执行 <code>git commit </code> 命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；</p></li></ul><p>那么如何做到这一点呢？可以通过 Husky 工具：</p><ul><li>husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push</li></ul><p>如何使用 husky 呢？</p><p>这里我们可以使用自动配置命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npx husky-init&amp;&amp;npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里会做三件事：</p><p>1.安装 husky 相关的依赖：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq0o5jxmj30bb04qwen.jpg" alt="image-20210723112648927"></p><p>2.在项目目录下创建 <code>.husky</code> 文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npx huksy install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq16zo75j307703mt8m.jpg" alt="image-20210723112719634"></p><p>3.在 package.json 中添加一个脚本：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq26phpxj30dj06fgm3.jpg" alt="image-20210723112817691"></p><p>接下来，我们需要去完成一个操作：在进行 commit 时，执行 lint 脚本：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq3hn229j30nf04z74q.jpg" alt="image-20210723112932943"></p><p>这个时候我们执行 git commit 的时候会自动对代码进行 lint 校验。</p><h3 id="1-5-git-commit-规范"><a href="#1-5-git-commit-规范" class="headerlink" title="1.5. git commit 规范"></a>1.5. git commit 规范</h3><h4 id="1-5-1-代码提交风格"><a href="#1-5-1-代码提交风格" class="headerlink" title="1.5.1. 代码提交风格"></a>1.5.1. 代码提交风格</h4><p>通常我们的 git commit 会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw17gaqjj30to0cj3zp.jpg"></p><p>但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</p><ul><li>Commitizen 是一个帮助我们编写规范 commit message 的工具；</li></ul><p>  1.安装 Commitizen</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install commitizen -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.安装 cz-conventional-changelog，并且初始化 cz-conventional-changelog：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npx commitizen init cz-conventional-changelog --save-dev --save-exact</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个命令会帮助我们安装 cz-conventional-changelog：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvz2odi4j30ek00zmx2.jpg" alt="image-20210723145249096"></p><p>并且在 package.json 中进行配置：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvzftay5j30iu04k74d.jpg"></p><p>这个时候我们提交代码需要使用 <code>npx cz</code>：</p><ul><li>第一步是选择 type，本次更新的类型</li></ul><p>| Type     | 作用                                                                                   |</p><p>| ——– | ————————————————————————————– |</p><p>| feat     | 新增特性 (feature)                                                                     |</p><p>| fix      | 修复 Bug(bug fix)                                                                      |</p><p>| docs     | 修改文档 (documentation)                                                               |</p><p>| style    | 代码格式修改(white-space, formatting, missing semi colons, etc)                        |</p><p>| refactor | 代码重构(refactor)                                                                     |</p><p>| perf     | 改善性能(A code change that improves performance)                                      |</p><p>| test     | 测试(when adding missing tests)                                                        |</p><p>| build    | 变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）                           |</p><p>| ci       | 更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等 |</p><p>| chore    | 变更构建流程或辅助工具(比如更改测试环境)                                               |</p><p>| revert   | 代码回退                                                                               |</p><ul><li>第二步选择本次修改的范围（作用域）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8ca15oj30r600wmx4.jpg" alt="image-20210723150147510"></p><ul><li>第三步选择提交的信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8mq3zlj60ni01hmx402.jpg" alt="image-20210723150204780"></p><ul><li>第四步提交详细的描述信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8y05bjj30kt01fjrb.jpg" alt="image-20210723150223287"></p><ul><li>第五步是否是一次重大的更改</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw9z5vbij30bm00q744.jpg" alt="image-20210723150322122"></p><ul><li>第六步是否影响某个 open issue</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwar8xp1j30fq00ya9x.jpg" alt="image-20210723150407822"></p><p>我们也可以在 scripts 中构建一个命令来执行 cz：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwc4gtkxj30e207174t.jpg" alt="image-20210723150526211"></p><h4 id="1-5-2-代码提交验证"><a href="#1-5-2-代码提交验证" class="headerlink" title="1.5.2. 代码提交验证"></a>1.5.2. 代码提交验证</h4><p>如果我们按照 cz 来规范了提交风格，但是依然有同事通过 <code>git commit</code> 按照不规范的格式提交应该怎么办呢？</p><ul><li>我们可以通过 commitlint 来限制提交；</li></ul><p>  1.安装 @commitlint/config-conventional 和 @commitlint/cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm i @commitlint/config-conventional @commitlint/cli -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在根目录创建 commitlint.config.js 文件，配置 commitlint</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;@commitlint/config-conventional&quot;</span>],</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.使用 husky 生成 commit-msg 文件，验证提交信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npx husky add .husky/commit-msg &quot;npx --no-install commitlint --edit $1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-第三方库集成"><a href="#二-第三方库集成" class="headerlink" title="二. 第三方库集成"></a>二. 第三方库集成</h2><h3 id="2-1-vue-config-js-配置"><a href="#2-1-vue-config-js-配置" class="headerlink" title="2.1. vue.config.js 配置"></a>2.1. vue.config.js 配置</h3><p>vue.config.js 有三种配置方式：</p><ul><li>方式一：直接通过 CLI 提供给我们的选项来配置：</li></ul><p>  - 比如 publicPath：配置应用程序部署的子目录（默认是 <code>/</code>，相当于部署在 <code>https://www.my-app.com/</code>）；</p><p>  - 比如 outputDir：修改输出的文件夹；</p><ul><li>方式二：通过 configureWebpack 修改 webpack 的配置：</li></ul><p>  - 可以是一个对象，直接会被合并；</p><p>  - 可以是一个函数，会接收一个 config，可以通过 config 来修改配置；</p><ul><li>方式三：通过 chainWebpack 修改 webpack 的配置：</li></ul><p>  - 是一个函数，会接收一个基于 <a href="https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 的 config 对象，可以对配置进行修改；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;./build&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// configureWebpack: &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   resolve: &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     alias: &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//       views: &#x27;@/views&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// configureWebpack: (config) =&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   config.resolve.alias = &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     &#x27;@&#x27;: path.resolve(__dirname, &#x27;src&#x27;),</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     views: &#x27;@/views&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    config.resolve.alias</span><br><span class="line"></span><br><span class="line">      .set(<span class="string">&quot;@&quot;</span>, path.resolve(__dirname, <span class="string">&quot;src&quot;</span>))</span><br><span class="line"></span><br><span class="line">      .set(<span class="string">&quot;views&quot;</span>, <span class="string">&quot;@/views&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-vue-router-集成"><a href="#2-2-vue-router-集成" class="headerlink" title="2.2. vue-router 集成"></a>2.2. vue-router 集成</h3><p>安装 vue-router 的最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install vue-router@next</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建 router 对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: RouteRecordRaw[] = [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/main/main.vue&quot;</span>),</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/login/login.vue&quot;</span>),</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes,</span><br><span class="line"></span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装 router：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 App.vue 中配置跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-vuex-集成"><a href="#2-3-vuex-集成" class="headerlink" title="2.3. vuex 集成"></a>2.3. vuex 集成</h3><p>安装 vuex：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install vuex@next</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建 store 对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;coderwhy&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装 store：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">createApp(App).use(router).use(store).mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 App.vue 中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $store.state.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-element-plus-集成"><a href="#2-4-element-plus-集成" class="headerlink" title="2.4. element-plus 集成"></a>2.4. element-plus 集成</h3><p>Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库：</p><ul><li><p>相信很多同学在 Vue2 中都使用过 element-ui，而 element-plus 正是 element-ui 针对于 vue3 开发的一个 UI 组件库；</p></li><li><p>它的使用方式和很多其他的组件库是一样的，所以学会 element-plus，其他类似于 ant-design-vue、NaiveUI、VantUI 都是差不多的；</p></li></ul><p>安装 element-plus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install element-plus</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-4-1-全局引入"><a href="#2-4-1-全局引入" class="headerlink" title="2.4.1. 全局引入"></a>2.4.1. 全局引入</h4><p>一种引入 element-plus 的方式是全局引入，代表的含义是所有的组件和插件都会被自动注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/lib/theme-chalk/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">createApp(App).use(router).use(store).use(ElementPlus).mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-4-2-局部引入"><a href="#2-4-2-局部引入" class="headerlink" title="2.4.2. 局部引入"></a>2.4.2. 局部引入</h4><p>也就是在开发中用到某个组件对某个组件进行引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-link to=&quot;/main&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">import &#123; defineComponent &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">import &#123; ElButton &#125; from &quot;element-plus&quot;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line"></span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">    ElButton,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我们会发现是没有对应的样式的，引入样式有两种方式：</p><ul><li><p>全局引用样式（像之前做的那样）；</p></li><li><p>局部引用样式（通过 babel 的插件）；</p></li></ul><p>  1.安装 babel 的插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install babel-plugin-import -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.配置 babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;import&quot;</span>,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&quot;element-plus&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">customStyleName</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="string">`element-plus/lib/theme-chalk/<span class="subst">$&#123;name&#125;</span>.css`</span>;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这里依然有个弊端：</p><ul><li><p>这些组件我们在多个页面或者组件中使用的时候，都需要导入并且在 components 中进行注册；</p></li><li><p>所以我们可以将它们在全局注册一次；</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line"></span><br><span class="line">  ElButton,</span><br><span class="line"></span><br><span class="line">  ElTable,</span><br><span class="line"></span><br><span class="line">  ElAlert,</span><br><span class="line"></span><br><span class="line">  ElAside,</span><br><span class="line"></span><br><span class="line">  ElAutocomplete,</span><br><span class="line"></span><br><span class="line">  ElAvatar,</span><br><span class="line"></span><br><span class="line">  ElBacktop,</span><br><span class="line"></span><br><span class="line">  ElBadge,</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line"></span><br><span class="line">  ElButton,</span><br><span class="line"></span><br><span class="line">  ElTable,</span><br><span class="line"></span><br><span class="line">  ElAlert,</span><br><span class="line"></span><br><span class="line">  ElAside,</span><br><span class="line"></span><br><span class="line">  ElAutocomplete,</span><br><span class="line"></span><br><span class="line">  ElAvatar,</span><br><span class="line"></span><br><span class="line">  ElBacktop,</span><br><span class="line"></span><br><span class="line">  ElBadge,</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> cpn <span class="keyword">of</span> components) &#123;</span><br><span class="line"></span><br><span class="line">  app.component(cpn.name, cpn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-axios-集成"><a href="#2-5-axios-集成" class="headerlink" title="2.5. axios 集成"></a>2.5. axios 集成</h3><p>安装 axios：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install axios</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装 axios：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosInstance, AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Result &#125; <span class="keyword">from</span> <span class="string">&quot;./types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&quot;/@/store/modules/user&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> instance: AxiosInstance;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> options: AxiosRequestConfig;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options: AxiosRequestConfig</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.options = options;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance = axios.create(options);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance.interceptors.request.use(</span><br><span class="line"></span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = useUserStore().getToken;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line"></span><br><span class="line">          config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance.interceptors.response.use(</span><br><span class="line"></span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截响应的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res.data.code === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> res.data.data;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.data;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  request&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.instance</span><br><span class="line"></span><br><span class="line">        .request&lt;<span class="built_in">any</span>, AxiosResponse&lt;Result&lt;T&gt;&gt;&gt;(config)</span><br><span class="line"></span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          resolve(res <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="built_in">Promise</span>&lt;T&gt;);</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          reject(err);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  get&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  post&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  patch&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;PATCH&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HYRequest;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 语法</title>
      <link href="/2024/07/20/Java%20%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/07/20/Java%20%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-语法"><a href="#Java-语法" class="headerlink" title="Java 语法"></a>Java 语法</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>JDK、JRE、JVM 的关系：<ul><li>JDK：Java Development Kit，Java 开发工具包</li><li>JRE: Java Runtime Environment，Java 运行环境</li><li>JVM：Java Virtual Machine，Java 虚拟机</li><li>JDK 包含 JRE，JRE 包含 JVM</li></ul></li><li>JDK 版本选择<ul><li>目前 JDK1.8（也叫 JDK8，注意不是 JDK18）用得最多</li><li>Java 代码的编译运行流程</li><li>将 Java 源码编译成 Java 字节码。</li><li>使用 JVM 将 Java 字节码转化成机器码。</li><li>JVM 作用：跨平台、内存管理、安全。</li></ul></li><li>JSE、JEE、JME 的区别<ul><li>JSE: Java Standard Edition，标准版</li><li>JEE：Java Enterprise Edition，企业版</li><li>JME: Java Mirco Edition，移动版</li><li>Spring 是 JEE 的轻量级替代品</li><li>SpringBoot 是 Spring + 自动化配置</li></ul></li></ol><h2 id="变量、运算符、输入与输出"><a href="#变量、运算符、输入与输出" class="headerlink" title="变量、运算符、输入与输出"></a>变量、运算符、输入与输出</h2><p>类似于 <code>C#</code>，<code>Java</code> 的所有变量和函数都要定义在 <code>class</code> 中。</p><h3 id="1-1-内置数据类型"><a href="#1-1-内置数据类型" class="headerlink" title="1.1 内置数据类型"></a>1.1 内置数据类型</h3><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230220081436300.png" alt="image-20230220081436300" style="zoom: 67%;" /> <h3 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2 常量"></a>1.2 常量</h3><p>使用 <code>final</code> 修饰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-类型转化"><a href="#1-3-类型转化" class="headerlink" title="1.3 类型转化"></a>1.3 类型转化</h3><ul><li><p>显示转化：<code>int x = (int)&#39;A&#39;</code></p></li><li><p>隐式转化：<code>double x = 12, y = 4 * 3.3</code></p><blockquote><p>隐式转化只能从低精度到高精度 显示转化则都可以</p></blockquote></li></ul><h3 id="1-4-表达式"><a href="#1-4-表达式" class="headerlink" title="1.4 表达式"></a>1.4 表达式</h3><p>与 <code>C++</code>、<code>Python3</code> 类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x = (a + b) * c;</span><br><span class="line">x ++;</span><br></pre></td></tr></table></figure><h3 id="1-5-输入"><a href="#1-5-输入" class="headerlink" title="1.5 输入"></a>1.5 输入</h3><ol><li><p>方式一：效率较低，输入规模较小时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String str = sc.next();  <span class="comment">// 读入下一个字符串 </span></span><br><span class="line">String line = sc.nextLine();  <span class="comment">// 读入下一行(多个字符串)</span></span><br><span class="line"><span class="keyword">int</span> x = sc.nextInt();  <span class="comment">// 读入下一个整数</span></span><br><span class="line"><span class="keyword">float</span> y = sc.nextFloat();  <span class="comment">// 读入下一个单精度浮点数</span></span><br><span class="line"><span class="keyword">double</span> z = sc.nextDouble();  <span class="comment">// 读入下一个双精度浮点数</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：效率较高，输入规模较大时使用。注意需要抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-6-输出"><a href="#1-6-输出" class="headerlink" title="1.6 输出"></a>1.6 输出</h3><ol><li><p>方式一：效率较低，输出规模较小时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入结尾补一个回车</span></span><br><span class="line">System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line"><span class="comment">// 输入结尾不补回车</span></span><br><span class="line">System.out.print(<span class="number">123</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">System.out.print(<span class="string">&quot;yxc\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line"><span class="comment">// 格式化输出  04d代表不足4位 前面会补0</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">//  0004 123.46</span></span><br></pre></td></tr></table></figure><blockquote><p>编辑器快捷：<code>sout</code></p></blockquote></li><li><p>方式二：效率较高，输出规模较大时使用。注意需要抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">// throws Exception 抛出异常</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要手动刷新缓冲区 才会显示输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="1-if-else-语句"><a href="#1-if-else-语句" class="headerlink" title="1. if-else 语句"></a>1. if-else 语句</h3><p>与 <code>C++</code>、<code>Python</code> 中类似。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-switch-语句"><a href="#2-switch-语句" class="headerlink" title="2. switch 语句"></a>2. switch 语句</h3><p>与 <code>C++</code> 中类似。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> day = sc.nextInt();</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                name = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                name = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                name = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                name = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                name = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                name = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                name = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                name = <span class="string">&quot;not valid&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-逻辑运算符与条件表达式"><a href="#3-逻辑运算符与条件表达式" class="headerlink" title="3. 逻辑运算符与条件表达式"></a>3. 逻辑运算符与条件表达式</h3><p>与 <code>C++</code>、<code>Python</code> 类似。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) </span><br><span class="line">            System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：java 里逻辑表达式只能说 bool 值，不能是 int 值</p></blockquote><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1. while 循环"></a>1. while 循环</h3><p>与 <code>C++</code>、<code>Python</code> 类似，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-do-while-循环"><a href="#2-do-while-循环" class="headerlink" title="2. do while 循环"></a>2. do while 循环</h3><p>与 <code>C++</code>、<code>Python</code> 类似，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i ++ ;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>do while</code> 语句与 <code>while</code> 语句非常相似。唯一的区别是，<code>do while</code> 语句限制性循环体后检查条件。不管条件的值如何，我们都要至少执行一次循环。</p></blockquote><h3 id="3-for-循环"><a href="#3-for-循环" class="headerlink" title="3. for 循环"></a>3. for 循环</h3><p>与 <code>C++</code>、<code>Python</code> 类似，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) &#123;  <span class="comment">// 普通循环</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x: a) &#123;  <span class="comment">// forEach循环</span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编辑器快捷：<code>fori</code></p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>Java</code> 中的数组与 <code>C++</code> 中的数组类似。<strong>数组不可变长</strong></p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><p>与 <code>C++</code> 类似。</p><p>初始化定长数组，长度可以是变量，可以在初始化时赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];  <span class="comment">// 初始化长度为5的int数组，初始值为0</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">float</span>[] b = <span class="keyword">new</span> <span class="keyword">float</span>[n];  <span class="comment">// 初始化长度为n的float数组，初始值为0.0F</span></span><br><span class="line"><span class="keyword">char</span>[] c = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;  <span class="comment">// 初始化长度为3的char数组，初始值为：&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">char</span>[] d = c;  <span class="comment">// d与c地址相同，更改c中的元素，d中的元素也会改变</span></span><br></pre></td></tr></table></figure><blockquote><p>java 里面字符数组就是字符数组，字符串就是 string，二者是相互独立的</p></blockquote><h3 id="2-数组元素的读取与写入"><a href="#2-数组元素的读取与写入" class="headerlink" title="2. 数组元素的读取与写入"></a>2. 数组元素的读取与写入</h3><p>与 <code>C++</code> 类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) &#123;</span><br><span class="line">    System.out.println(a[i] * a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多维数组"><a href="#3-多维数组" class="headerlink" title="3. 多维数组"></a>3. 多维数组</h3><p>与 <code>C++</code> 类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[][] b = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(a[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">System.out.println(b[<span class="number">0</span>][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="4-常用-API"><a href="#4-常用-API" class="headerlink" title="4. 常用 API"></a>4. 常用 <code>API</code></h3><ul><li><p>属性 <code>length</code>：返回数组长度，注意不加小括号</p></li><li><p><code>Arrays.sort()</code>：数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.sort(a);</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.fill(int[] a, int val)</code>：填充数组</p></li><li><p><code>Arrays.toString()</code>：将数组转化为字符串</p></li><li><p><code>Arrays.deepToString()</code>：将多维数组转化为字符串</p></li></ul><h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><h3 id="1-初始化-1"><a href="#1-初始化-1" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;My name is&quot;</span>; </span><br><span class="line">String x = b;  <span class="comment">// 存储到了相同地址  b.hashCode()与x.hashCode()是一样的</span></span><br><span class="line">String c = b + <span class="string">&quot;yxc&quot;</span>;  <span class="comment">// String可以通过加号拼接</span></span><br><span class="line">String d = <span class="string">&quot;My age is &quot;</span> + <span class="number">18</span>;  <span class="comment">// int会被隐式转化成字符串&quot;18&quot;</span></span><br><span class="line">String str = String.format(<span class="string">&quot;My age is %d&quot;</span>, <span class="number">18</span>);  <span class="comment">// 格式化字符串，类似于C++中的sprintf</span></span><br><span class="line">String money_str = <span class="string">&quot;123.45&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> money_dou = Double.parseDouble(money_str);  <span class="comment">// String转double</span></span><br><span class="line"><span class="keyword">int</span> money_int = Interger.parseInt(money_str) <span class="comment">// String转int</span></span><br></pre></td></tr></table></figure><p><strong>访问 String 中的字符：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++ ) &#123;</span><br><span class="line">    System.out.print(str.charAt(i));  <span class="comment">// 等价于str[i] 只能读取，不能写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只读变量，不能修改，例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;Hello &quot;</span>;</span><br><span class="line">System.out.println(a.hashCode())  <span class="comment">// 输出-2137068114</span></span><br><span class="line">a += <span class="string">&quot;World&quot;</span>;  <span class="comment">// 会构造一个新的字符串   </span></span><br><span class="line">System.out.println(a.hashCode())  <span class="comment">// 输出-862545276</span></span><br></pre></td></tr></table></figure><h3 id="2-StringBuilder、StringBuffer"><a href="#2-StringBuilder、StringBuffer" class="headerlink" title="2. StringBuilder、StringBuffer"></a>2. StringBuilder、StringBuffer</h3><ul><li><p><code>String</code> 不能被修改，如果打算修改字符串，可以使用 <code>StringBuilder</code> 和 <code>StringBuffer</code>。</p></li><li><p><code>StringBuffer</code> 线程安全，速度较慢；<code>StringBuilder</code> 线程不安全，速度较快。</p><blockquote><p>所以单线程用 <code>StringBuilder</code>，多线程用 <code>StringBuffer</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Hello &quot;</span>);  <span class="comment">// 初始化 该类无String类所继承的方法</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 拼接字符串</span></span><br><span class="line">sb.reverse() <span class="comment">// 翻转字符串，不会返回新的</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); i ++ ) &#123;</span><br><span class="line">    sb.setCharAt(i, (<span class="keyword">char</span>)(sb.charAt(i) + <span class="number">1</span>));  <span class="comment">// 读取和写入字符 将第i位设置为...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-常用-API："><a href="#3-常用-API：" class="headerlink" title="3. 常用 API："></a>3. 常用 API：</h4><ul><li><p><code>length()</code>：返回长度</p></li><li><p><code>split(String regex)</code>：分割字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;HeLlo World&quot;</span>;</span><br><span class="line">String[] strs = a.split(<span class="string">&quot; &quot;</span>) <span class="comment">// 以空格分割</span></span><br><span class="line"><span class="keyword">for</span>(String str : strs)&#123;  <span class="comment">// forEach遍历</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>indexOf(char c)</code>、<code>indexOf(String str)</code>：查找字符或字符串，找不到返回 <code>-1</code></p></li><li><p><code>equals()</code>：判断两个字符串是否相等，注意不能直接用 <code>==</code></p></li><li><p><code>compareTo()</code>：判断两个字符串的字典序大小，负数表示小于，<code>0</code> 表示相等，正数表示大于</p></li><li><p><code>startsWith()</code>：判断是否以某个前缀开头</p></li><li><p><code>endsWith()</code>：判断是否以某个后缀结尾</p></li><li><p><code>trim()</code>：去掉首尾的空白字符</p></li><li><p><code>toLowerCase()</code>：全部用小写字符</p></li><li><p><code>toUpperCase()</code>：全部用大写字符</p></li><li><p><code>replace(char oldChar, char newChar)</code>：替换字符</p><blockquote><p><code>replace(String oldRegex, String newRegex)</code>：替换字符串</p></blockquote></li><li><p><code>substring(int beginIndex, int endIndex)</code>：返回 <code>[beginIndex, endIndex)</code> 中的子串（前开后闭）</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>Java 的所有变量和函数都要定义在类中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(max(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">        fill(a, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(a));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] b = getArray2d(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 返回值可以为一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getArray2d(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态变量和静态方法"><a href="#静态变量和静态方法" class="headerlink" title="静态变量和静态方法"></a>静态变量和静态方法</h2><h3 id="1-成员变量与成员方法"><a href="#1-成员变量与成员方法" class="headerlink" title="1. 成员变量与成员方法"></a>1. 成员变量与成员方法</h3><p><code>Java</code> 的所有变量和函数都要定义在类中。</p><p>在类中，使用 <code>static</code> 修饰符修饰的属性（成员变量）称为静态变量，也可以称为类变量，常量称为静态常量，方法称为静态方法或类方法，它们统称为静态成员，归整个类所有。</p><p>静态成员不依赖于类的特定实例，被类的所有实例共享，就是说 <code>static</code> 修饰的方法或者变量不需要依赖于对象来进行访问，只要这个类被加载，<code>java</code> 虚拟机就可以根据类名找到它们。</p><p>调用静态成员的语法形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.静态成员(变量or函数)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>static 修饰的成员变量和方法，从属于类。</li><li>普通变量和方法从属于对象。</li><li><strong>静态方法不能调用非静态成员，只能调用静态函数和静态变量，否则编译会报错</strong></li></ul><h3 id="2-静态变量与实例变量"><a href="#2-静态变量与实例变量" class="headerlink" title="2. 静态变量与实例变量"></a>2. 静态变量与实例变量</h3><p>类的成员变量可以分为以下两种：</p><ol><li>静态变量（或称为类变量），指被 static 修饰的成员变量。</li><li>实例变量，指没有被 static 修饰的成员变量。</li></ol><p>静态变量与实例变量的区别如下：</p><p>1）静态变量</p><ul><li>运行时，Java 虚拟机只为静态变量分配一次内存，在加载类的过程中完成静态变量的内存分配。</li><li>在类的内部，可以在任何方法内直接访问静态变量。</li><li>在其他类中，可以通过类名访问该类中的静态变量。</li></ul><p>2）实例变量</p><ul><li>每创建一个实例，Java 虚拟机就会为实例变量分配一次内存。</li><li>在类的内部，可以在非静态方法中直接访问实例变量。</li><li>在本类的静态方法或其他类中则需要通过类的实例对象进行访问。</li></ul><p>静态变量在类中的作用如下：</p><ul><li><p>静态变量可以被类的所有实例共享，因此静态变量可以作为实例之间的共享数据，增加实例之间的交互性。</p></li><li><p>如果类的所有实例都包含一个相同的常量属性，则可以把这个属性定义为静态常量类型，从而节省内存空间。例如，在类中定义一个静态常量 PI。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = <span class="number">3.14159256</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>eg：</strong>创建一个带静态变量的类，然后在 main() 方法中访问该变量并输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticVar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str2 = <span class="string">&quot;World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 直接访问str1</span></span><br><span class="line">        String accessVar1 = str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 1 次访问静态变量，结果为：&quot;</span>+accessVar1);</span><br><span class="line">        <span class="comment">// 通过类名访问 str1</span></span><br><span class="line">        String accessVar2 = StaticVar.str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 2 次访问静态变量，结果为：&quot;</span>+accessVar2);</span><br><span class="line">        <span class="comment">// 通过对象 svt1访问 str1</span></span><br><span class="line">        StaticVar svt1 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">        svt1.str1 = svt1.str1+str2;</span><br><span class="line">        String accessVar3 = svt1.str1;</span><br><span class="line">        System.out.println(<span class="string">&quot;第3次访向静态变量，结果为：&quot;</span>+accessVar3);</span><br><span class="line">        <span class="comment">// 通过对象 svt2访问 str1</span></span><br><span class="line">        StaticVar svt2 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">        String accessVar4 = svt2.str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 4 次访问静态变量，结果为：&quot;</span>+accessVar4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序后的结果如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第 <span class="number">1</span> 次访问静态变量，结果为：HelloWorld!</span><br><span class="line">第 <span class="number">2</span> 次访问静态变量，结果为：HelloWorld!</span><br><span class="line">第 <span class="number">3</span> 次访向静态变量，结果为：HelloWorld!</span><br><span class="line">第 <span class="number">4</span> 次访问静态变量，结果为：HelloWorld!World!</span><br></pre></td></tr></table></figure><p>从运行结果可以看出，在类中定义静态的属性（成员变量），在 main() 方法中可以直接访问，也可以通过类名访问，还可以通过类的实例对象来访问。</p><blockquote><p>注意：静态变量是被多个实例所共享的。</p></blockquote><h3 id="3-静态方法与实例方法"><a href="#3-静态方法与实例方法" class="headerlink" title="3. 静态方法与实例方法"></a>3. 静态方法与实例方法</h3><p>与成员变量类似，成员方法也可以分为以下两种：</p><ol><li>静态方法（或称为类方法），指被 static 修饰的成员方法。</li><li>实例方法，指没有被 static 修饰的成员方法。</li></ol><p>静态方法与实例方法的区别如下：</p><ul><li>静态方法不需要通过它所属的类的任何实例就可以被调用，因此在静态方法中不能使用 this 关键字，也不能直接访问所属类的实例变量和实例方法，但是可以直接访问所属类的静态变量和静态方法。另外，和 this 关键字一样，super 关键字也与类的特定实例相关，所以在静态方法中也不能使用 super 关键字。</li><li>在实例方法中可以直接访问所属类的静态变量、静态方法、实例变量和实例方法。</li></ul><p><strong>eg：</strong>创建一个带静态变量的类，添加几个静态方法对静态变量的值进行修改，然后在 main( ) 方法中调用静态方法并输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;    <span class="comment">// 定义静态变量 count</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 实例方法 method1</span></span><br><span class="line">        count++;    <span class="comment">// 访问静态变量 count 并赋值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在静态方法 method1()中的 count=&quot;</span>+count);    <span class="comment">// 打印 count</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 静态方法 method2</span></span><br><span class="line">        count += count;    <span class="comment">// 访问静态变量 count 并赋值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在静态方法 method2()中的 count=&quot;</span>+count);    <span class="comment">// 打印 count</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintCount</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 静态方法 PrintCount</span></span><br><span class="line">        count += <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;在静态方法 PrintCount()中的 count=&quot;</span>+count);    <span class="comment">// 打印 count</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticMethod sft = <span class="keyword">new</span> StaticMethod();</span><br><span class="line">        <span class="comment">// 通过实例对象调用实例方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method1() 方法返回值 intro1=&quot;</span>+sft.method1());</span><br><span class="line">        <span class="comment">// 直接调用静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method2() 方法返回值 intro1=&quot;</span>+method2());</span><br><span class="line">        <span class="comment">// 通过类名调用静态方法，打印 count</span></span><br><span class="line">        StaticMethod.PrintCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序后的结果如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在静态方法 method1()中的 count=<span class="number">2</span></span><br><span class="line">method1() 方法返回值 intro1=<span class="number">2</span></span><br><span class="line">在静态方法 method2()中的 count=<span class="number">4</span></span><br><span class="line">method2() 方法返回值 intro1=<span class="number">4</span></span><br><span class="line">在静态方法 PrintCount()中的 count=<span class="number">6</span></span><br></pre></td></tr></table></figure><p>在该程序中，静态变量 count 作为实例之间的共享数据，因此在不同的方法中调用 count，值是不一样的。从该程序中可以看出，在静态方法 method2() 和 PrintCount() 中是不可以调用非静态方法 method1() 的，而在 method1() 方法中可以调用静态方法 method2() 和 PrintCount()。</p><p>在访问非静态方法时，需要通过实例对象来访问，而在访问静态方法时，可以直接访问，也可以通过类名来访问，还可以通过实例化对象来访问。</p><h3 id="3-静态代码块与非静态代码块"><a href="#3-静态代码块与非静态代码块" class="headerlink" title="3. 静态代码块与非静态代码块"></a>3. 静态代码块与非静态代码块</h3><p>静态代码块指 Java 类中的 static{ } 代码块，主要用于初始化类，为类的静态变量赋初始值，提升程序性能。</p><p>静态代码块的特点如下：</p><ul><li>静态代码块类似于一个方法，但它不可以存在于任何方法体中。</li><li>静态代码块可以置于类中的任何地方，类中可以有多个静态初始化块。 </li><li>Java 虚拟机在加载类时执行静态代码块，所以很多时候会将一些只需要进行一次的初始化操作都放在 static 代码块中进行。</li><li>如果类中包含多个静态代码块，则 Java 虚拟机将按它们在类中出现的顺序依次执行它们，每个静态代码块只会被执行一次。</li><li>静态代码块与静态方法一样，不能直接访问类的实例变量和实例方法，而需要通过类的实例对象来访问。</li></ul><p><strong>eg：</strong>编写一个 Java 类，在类中定义一个静态变量，然后使用静态代码块修改静态变量的值。最后在 main() 方法中进行测试和输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    &#123; <span class="comment">// “&#123;” 前没加 static -&gt; 非静态代码块</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;非静态代码块 count=&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">// “&#123;” 前加 static -&gt; 静态代码块</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块1 count=&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">// “&#123;” 前加 static -&gt; 静态代码块</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块2 count=&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************** StaticCode1 执行 ***************&quot;</span>);</span><br><span class="line">        StaticCode sct1 = <span class="keyword">new</span> StaticCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;*************** StaticCode2 执行 ***************&quot;</span>);</span><br><span class="line">        StaticCode sct2 = <span class="keyword">new</span> StaticCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述示例，为了说明静态代码块只被执行一次，特地添加了非静态代码块作为对比，并在主方法中创建了两个类的实例对象。上述示例的执行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">静态代码块<span class="number">1</span> count=<span class="number">1</span></span><br><span class="line">静态代码块<span class="number">2</span> count=<span class="number">2</span></span><br><span class="line">*************** StaticCode1 执行 ***************</span><br><span class="line">非静态代码块 count=<span class="number">3</span></span><br><span class="line">*************** StaticCode2 执行 ***************</span><br><span class="line">非静态代码块 count=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>上述代码中 { } 代码块为非静态代码块，非静态代码块是在创建对象时自动执行的代码，不创建对象不执行该类的非静态代码块。代码域中定义的变量都是局部的，只有域中的代码可以调用。 </p><h3 id="4-利用-static-创建全局变量的一种方式"><a href="#4-利用-static-创建全局变量的一种方式" class="headerlink" title="4. 利用 static 创建全局变量的一种方式"></a>4. 利用 static 创建全局变量的一种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Argument</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">1</span>; <span class="comment">// 常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Argument.x); <span class="comment">// 调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h2><h3 id="1-源文件声明规则"><a href="#1-源文件声明规则" class="headerlink" title="1.源文件声明规则"></a>1.源文件声明规则</h3><ul><li>一个源文件中<strong>只能有一个</strong><code>public</code>类。</li><li>一个源文件可以有多个非<code>public</code>类。</li><li>源文件的名称应该和<code>public</code>类的类名保持一致。</li><li>每个源文件中，先写<code>package</code>语句，再写<code>import</code>语句，最后定义类。</li><li>同一个目录下不需要<code>import 类名</code></li></ul><h3 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h3><h4 id="2-1-不同修饰符的区别"><a href="#2-1-不同修饰符的区别" class="headerlink" title="2.1 不同修饰符的区别"></a>2.1 不同修饰符的区别</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307142819546.png" alt="image-20230307142819546"></p><h5 id="修饰类和接口时"><a href="#修饰类和接口时" class="headerlink" title="修饰类和接口时"></a>修饰类和接口时</h5><p><strong>public</strong></p><blockquote><p>当一个类被 public 修饰时，该类可以被所有其他类访问。当被访问的公共类与访问类不在同一个包的时候，需要通过 import 语句加载被访问的类。</p></blockquote><p><strong>default（class 前啥也不写）</strong></p><blockquote><p>当一个类被 default 修饰时，该类可以被所有其他类访问。当被访问的公共类与访问类不在同一个包的时候，不能访问。</p></blockquote><hr><h5 id="修饰变量时"><a href="#修饰变量时" class="headerlink" title="修饰变量时"></a>修饰变量时</h5><p><strong>public</strong></p><blockquote><p>使用 public 修饰的字段，new 的对象可以直接操作该字段。如赋值：<code>person.name = &quot;ldx&quot;</code></p></blockquote><p><strong>private</strong></p><blockquote><p>1.使用 private 修饰的字段，new 的对象只能通过对象内部的方法间接的操作该字段。如：<code>person.setName(&quot;ldx&quot;)</code>，这时该方法可检查传入的参数，这样外部代码就没有任何机会把<code>name</code>设置为不合理的值。</p><p>2.只能在类的内部访问，无法被其他类访问。如果一个类内部还定义了嵌套类，那么，嵌套类拥有访问<code>private</code>的权限</p><p>注意：嵌套类和子孙类有明显区别，子孙类是继承关系</p></blockquote><p><strong>protected</strong> </p><blockquote><p>使用<code>protected</code>修饰的字段可以被子类访问，以及子类的子类。作用于继承关系。</p></blockquote><hr><h5 id="修饰方法时"><a href="#修饰方法时" class="headerlink" title="修饰方法时"></a>修饰方法时</h5><p><strong>public</strong></p><blockquote><p>使用 public 修饰的方法，new 的对象可以调用。</p></blockquote><p><strong>private</strong></p><blockquote><p>使用 private 修饰的方法，new 的对象不能调用，只能在类内部调用，子类也无法调用。</p></blockquote><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// new 的对象可调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2019</span>); <span class="comment">// 调用 private 方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new 的对象不能调用，只能在类内部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>protected</strong> </p><blockquote><p>使用<code>protected</code>修饰的方法可以被子类调用，以及子类的子类。作用于继承关系。</p></blockquote><hr><h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><p>Java 还提供了一个<code>final</code>修饰符。<code>final</code>与访问权限不冲突，它有很多作用。</p><p>用<code>final</code>修饰<code>class</code>可以阻止被继承：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">// 无法被继承:</span><br><span class="line">public final class Hello &#123;</span><br><span class="line">    private int n = 0;</span><br><span class="line">    protected void hi(int t) &#123;</span><br><span class="line">        long i = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>final</code>修饰<code>method</code>可以阻止被子类覆写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    // 无法被覆写:</span><br><span class="line">    protected final void hi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>final</code>修饰<code>field</code>可以阻止被重新赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    private final int n = 0;</span><br><span class="line">    protected void hi() &#123;</span><br><span class="line">        this.n = 1; // error!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>final</code>修饰局部变量可以阻止被重新赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        t = <span class="number">1</span>; <span class="comment">// error!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-方法相关"><a href="#2-2-方法相关" class="headerlink" title="2.2 方法相关"></a>2.2 方法相关</h4><h5 id="this-变量"><a href="#this-变量" class="headerlink" title="this 变量"></a>this 变量</h5><p>在方法内部，可以使用一个隐含的变量<code>this</code>，它始终指向当前实例。因此，通过<code>this.field</code>就可以访问当前实例的字段。</p><p>如果没有命名冲突，可以省略<code>this</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name; <span class="comment">// 相当于 this.name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上<code>this</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 前面的 this 不可少，少了就变成局部变量 name 了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h5><ul><li><p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">15</span>; <span class="comment">// n 的值为15</span></span><br><span class="line">        p.setAge(n); <span class="comment">// 传入 n 的值</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15</span></span><br><span class="line">        n = <span class="number">20</span>; <span class="comment">// n 的值改为20</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15还是20?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方（因为指向同一个对象嘛）</p><p>eg1：思考下面的例子为什么输出一次<code>Homer Simpson</code>，一次<code>Bart Simpson</code>?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String[] fullname = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;Homer&quot;</span>, <span class="string">&quot;Simpson&quot;</span> &#125;;</span><br><span class="line">        p.setName(fullname); <span class="comment">// 传入 fullname 数组</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Homer Simpson&quot;</span></span><br><span class="line">        fullname[<span class="number">0</span>] = <span class="string">&quot;Bart&quot;</span>; <span class="comment">// fullname 数组的第一个元素修改为&quot;Bart&quot;</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// 输出 &quot;Bart Simpson&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.name[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String[] name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>eg2：思考下面的例子为什么输出两次<code>Bob</code>?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String bob = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">        p.setName(bob); <span class="comment">// 传入 bob 变量</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Bob&quot;</span></span><br><span class="line">        bob = <span class="string">&quot;Alice&quot;</span>; <span class="comment">// bob 改名为 Alice</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Bob&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因为 String 是不可变的，当修改实参时是 new 一个新的 String 对象，故修改新的值与原来的 String 没有关系</strong></p></li></ul><hr><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>可变参数用<code>类型...</code>定义，可变参数相当于数组类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String... names)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>setNames()</code>就定义了一个可变参数。调用时，可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Group g = <span class="keyword">new</span> Group();</span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="string">&quot;Xiao Hong&quot;</span>, <span class="string">&quot;Xiao Jun&quot;</span>); <span class="comment">// 传入3个 String</span></span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="string">&quot;Xiao Hong&quot;</span>); <span class="comment">// 传入2个 String</span></span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>); <span class="comment">// 传入1个 String</span></span><br><span class="line">g.setNames(); <span class="comment">// 传入0个 String</span></span><br></pre></td></tr></table></figure><p>完全可以把可变参数改写为<code>String[]</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String[] names)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，调用方需要自己先构造<code>String[]</code>，比较麻烦。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Group g = <span class="keyword">new</span> Group();</span><br><span class="line">g.setNames(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;Xiao Ming&quot;</span>, <span class="string">&quot;Xiao Hong&quot;</span>, <span class="string">&quot;Xiao Jun&quot;</span>&#125;); <span class="comment">// 传入1个 String[]</span></span><br></pre></td></tr></table></figure><p>另一个问题是，调用方可以传入<code>null</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Group g = <span class="keyword">new</span> Group();</span><br><span class="line">g.setNames(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>而可变参数可以保证无法传入<code>null</code>，因为传入0个参数时，接收到的实际值是一个空数组而不是<code>null</code>。</p><h4 id="2-3-类的继承"><a href="#2-3-类的继承" class="headerlink" title="2.3 类的继承"></a>2.3 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260454548196032">类的继承</a></h4><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让<code>Student</code>从<code>Person</code>继承时，<code>Student</code>就获得了<code>Person</code>的所有功能，我们只需要为<code>Student</code>编写新增的功能。</p><p>Java 使用<code>extends</code>关键字来实现继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不要重复 name 和 age 字段/方法,</span></span><br><span class="line">    <span class="comment">// 只需要定义新增 score 字段/方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，通过继承，<code>Student</code>只需要编写额外的功能，不再需要重复代码。</p><blockquote><p>注意：子类自动获得了父类的所有字段，严禁定义与父类重名的字段！</p></blockquote><h5 id="继承树"><a href="#继承树" class="headerlink" title="继承树"></a>继承树</h5><ul><li><p>注意到我们在定义<code>Person</code>的时候，没有写<code>extends</code>。在 Java 中，没有明确写<code>extends</code>的类，编译器会自动加上<code>extends Object</code>。所以，任何类，除了<code>Object</code>，都会继承自某个类。下图是<code>Person</code>、<code>Student</code>的继承树：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230221082015181.png" alt="image-20230221082015181"></p></li><li><p>Java 只允许一个 class 继承自一个类，因此，一个类有且仅有一个父类。只有<code>Object</code>特殊，它没有父类。</p><p>类似的，如果我们定义一个继承自<code>Person</code>的<code>Teacher</code>，它们的继承树关系如下：</p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230221082028215.png" alt="image-20230221082028215"></p></li></ul><h5 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h5><ul><li><p>继承有个特点，就是子类无法访问父类的<code>private</code>字段或者<code>private</code>方法。例如，<code>Student</code>类就无法访问<code>Person</code>类的<code>name</code>和<code>age</code>字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name; <span class="comment">// 编译错误：无法访问 name 字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这使得继承的作用被削弱了。为了让子类可以访问父类的字段，我们需要把<code>private</code>改为<code>protected</code>。用<code>protected</code>修饰的字段可以被子类访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name; <span class="comment">// OK!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因此，<code>protected</code>关键字可以把字段和方法的访问权限控制在继承树内部，一个<code>protected</code>字段和方法可以被其子类，以及子类的子类所访问。</p></li></ul><h5 id="super"><a href="#super" class="headerlink" title="super"></a>super</h5><p><code>super</code>关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="keyword">super</span>.name; <span class="comment">// name 为 protected 修饰的字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若父类中的<code>protected</code>修饰的<code>name</code>字段，可在子类中通过<code>super.name</code>直接访问</p><p>若父类中的<code>private</code>修饰的<code>name</code>字段，可在子类中通过<code>super.getName()</code>间接访问</p></blockquote><p>实际上，这里使用<code>super.name</code>，或者<code>this.name</code>，或者<code>name</code>，效果都是一样的。编译器会自动定位到父类的<code>name</code>字段。</p><p>但是，在某些时候，就必须使用<code>super</code>。我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// Person 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"><span class="comment">// Student 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为在 Java 中，任何<code>class</code>的构造方法，第一行语句必须是调用父类的构造方法。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code>，所以，<code>Student</code>类的构造方法实际上是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">// 自动调用父类的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>Person</code>类并没有无参数的构造方法，因此，编译失败。</p><p>解决方法是调用<code>Person</code>类存在的某个构造方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age); <span class="comment">// 调用父类的构造方法 Person(String, int)</span></span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以正常编译了！</p><p>因此我们得出结论：如果父类没有默认的构造方法，子类就必须显式调用<code>super()</code>并给出参数以便让编译器定位到父类的一个合适的构造方法。</p><p>这里还顺带引出了另一个问题：即<strong>子类不会继承造方法</strong>。子类默认的构造方法是编译器自动生成的，不是继承的。</p><h5 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h5><p>一个引用类型为<code>Person</code>的变量，可以指向<code>Student</code>类型的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student(); </span><br></pre></td></tr></table></figure><p>因为<code>Student</code>继承自<code>Person</code>，因此，它拥有<code>Person</code>的全部功能。<code>Person</code>类型的变量，如果指向<code>Student</code>类型的实例，对它进行操作，是没有问题的！</p><p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。</p><p>向上转型实际上是把一个子类型安全地变为更加抽象的父类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">Person p = s; <span class="comment">// upcasting, ok</span></span><br><span class="line">Object o1 = p; <span class="comment">// upcasting, ok</span></span><br><span class="line">Object o2 = s; <span class="comment">// upcasting, ok</span></span><br></pre></td></tr></table></figure><p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code>。</p><h4 id="2-4-类的多态"><a href="#2-4-类的多态" class="headerlink" title="2.4 类的多态"></a>2.4 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260455778791232">类的多态</a></h4><h5 id="覆写（Override）"><a href="#覆写（Override）" class="headerlink" title="覆写（Override）"></a>覆写（Override）</h5><p>在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。</p><p><code>Override</code>和<code>Overload</code>不同：</p><ul><li>如果方法签名不同，就是<code>Overload</code>，<code>Overload</code>方法是一个新方法；</li><li>如果方法签名相同，并且返回值也相同，就是<code>Override</code>。</li></ul><blockquote><p>注意：方法名相同，方法参数相同，但方法返回值不同，也是不同的方法。在 Java 程序中，出现这种情况，编译器会报错。</p></blockquote><p>在上一节中，我们已经知道，引用变量的声明类型可能与其实际类型不符，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>现在，我们考虑一种情况，如果子类覆写了父类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">// 子类覆写父类的 run()函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Person.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run(); <span class="comment">// 应该打印 Person.run 还是 Student.run?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，一个实际类型为<code>Student</code>，引用类型为<code>Person</code>的变量，调用其<code>run()</code>方法，调用的是<code>Person</code>还是<code>Student</code>的<code>run()</code>方法？</p><p>运行一下上面的代码就可以知道，实际上调用的方法是<code>Student</code>的<code>run()</code>方法。因此可得出结论：</p><p><strong>Java 的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。</strong></p><p>这个非常重要的特性在面向对象编程中称之为多态。它的英文拼写非常复杂：Polymorphic。</p><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">p.run(); <span class="comment">// 无法确定运行时究竟调用哪个 run()方法</span></span><br></pre></td></tr></table></figure><p>有童鞋会问，从上面的代码一看就明白，肯定调用的是<code>Student</code>的<code>run()</code>方法啊。</p><p>但是，假设我们编写这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTwice</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">    p.run();</span><br><span class="line">    p.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它传入的参数类型是<code>Person</code>，我们是无法知道传入的参数实际类型究竟是<code>Person</code>，还是<code>Student</code>，还是<code>Person</code>的其他子类，因此，也无法确定调用的是不是<code>Person</code>类定义的<code>run()</code>方法。</p><p>所以，多态的特性就是，运行期才能动态决定调用的子类方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。这种不确定性的方法调用，究竟有什么作用？</p><p>我们还是来举栗子。</p><p>假设我们定义一种收入，需要给它报税，那么先定义一个<code>Income</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于工资收入，可以减去一个基数，那么我们可以从<code>Income</code>派生出<code>SalaryIncome</code>，并覆写<code>getTax()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你享受国务院特殊津贴，那么按照规定，可以全部免税：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们要编写一个报税的财务软件，对于一个人的所有收入进行报税，可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">        total = total + income.getTax();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateCouncilSpecialAllowance</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 给一个有普通收入、工资收入和享受国务院特殊津贴的小伙伴算税:</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">            <span class="keyword">new</span> StateCouncilSpecialAllowance(<span class="number">15000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察<code>totalTax()</code>方法：利用多态，<code>totalTax()</code>方法只需要和<code>Income</code>打交道，它完全不需要知道<code>Salary</code>和<code>StateCouncilSpecialAllowance</code>的存在，就可以正确计算出总的税。如果我们要新增一种稿费收入，只需要从<code>Income</code>派生，然后正确覆写<code>getTax()</code>方法就可以。把新的类型传入<code>totalTax()</code>，不需要修改任何代码。</p><p>可见，多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。</p><h5 id="覆写-Object-方法"><a href="#覆写-Object-方法" class="headerlink" title="覆写 Object 方法"></a>覆写 Object 方法</h5><p>因为所有的<code>class</code>最终都继承自<code>Object</code>，而<code>Object</code>定义了几个重要的方法：</p><ul><li><code>toString()</code>：把 instance 输出为<code>String</code>；</li><li><code>equals()</code>：判断两个 instance 是否逻辑相等；</li><li><code>hashCode()</code>：计算一个 instance 的哈希值。</li></ul><p>在必要的情况下，我们可以覆写<code>Object</code>的这几个方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 显示更有意义的字符串:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person:name=&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较是否相等:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当且仅当 o 为 Person 类型:</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            Person p = (Person) o;</span><br><span class="line">            <span class="comment">// 并且 name 字段相同时，返回 true:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 hash:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用-super"><a href="#调用-super" class="headerlink" title="调用 super"></a>调用 super</h5><p>在子类的覆写方法中，如果<strong>要调用父类的被覆写的方法</strong>，可以通过<code>super</code>来调用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的 hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h5><p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为<code>final</code>。用<code>final</code>修饰的方法不能被<code>Override</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// compile error: 不允许覆写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类不希望任何其他类继承自它，那么可以把这个类本身标记为<code>final</code>。用<code>final</code>修饰的类不能被继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile error: 不允许继承自 Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一个类的实例字段，同样可以用<code>final</code>修饰。用<code>final</code>修饰的字段在初始化后不能被修改。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name = <span class="string">&quot;Unamed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>final</code>字段重新赋值会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;New Name&quot;</span>; <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure><p>可以在构造方法中初始化 final 字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法更为常用，因为可以保证实例一旦创建，其<code>final</code>字段就不可修改。</p><h4 id="2-5-抽象类"><a href="#2-5-抽象类" class="headerlink" title="2.5 抽象类"></a>2.5 抽象类</h4><h5 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个<code>class</code>定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用<code>abstract</code>修饰。</p><p>因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。</p><p>使用<code>abstract</code>修饰的类就是抽象类。我们无法实例化一个抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person(); <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>无法实例化的抽象类有什么用？</p><p>因为<strong>抽象类本身被设计成只能用于被继承</strong>，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，抽象方法实际上相当于定义了“规范”。</p><p>例如，<code>Person</code>类定义了抽象方法<code>run()</code>，那么，在实现子类<code>Student</code>的时候，就必须覆写<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="面向抽象编程"><a href="#面向抽象编程" class="headerlink" title="面向抽象编程"></a>面向抽象编程</h5><p>当我们定义了抽象类<code>Person</code>，以及具体的<code>Student</code>、<code>Teacher</code>子类的时候，我们可以通过抽象类<code>Person</code>类型去引用具体的子类的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person s = <span class="keyword">new</span> Student();</span><br><span class="line">Person t = <span class="keyword">new</span> Teacher();</span><br></pre></td></tr></table></figure><p>这种引用抽象类的好处在于，我们对其进行方法调用，并不关心<code>Person</code>类型变量的具体子类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不关心 Person 变量的具体子类型:</span></span><br><span class="line">s.run();</span><br><span class="line">t.run();</span><br></pre></td></tr></table></figure><p>同样的代码，如果引用的是一个新的子类，我们仍然不关心具体类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 同样不关心新的子类是如何实现 run()方法的：</span><br><span class="line">Person e = new Employee();</span><br><span class="line">e.run();</span><br></pre></td></tr></table></figure><p>这种尽量引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程。</p><p>面向抽象编程的本质就是：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心。</li></ul><h3 id="3-接口"><a href="#3-接口" class="headerlink" title="3. 接口"></a>3. 接口</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在抽象类中，抽象方法本质上是定义接口规范：即规定高层类的接口，从而保证所有子类都有相同的接口实现，这样，多态就能发挥出威力。</p><p>如果一个抽象类没有字段，<strong>所有方法全部都是抽象方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以把该抽象类改写为接口：<code>interface</code>。</p><p>在 Java 中，使用<code>interface</code>可以声明一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓<code>interface</code>，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有。因为接口定义的所有方法默认都是<code>public abstract</code>的，所以这两个修饰符不需要写出来（写不写效果都一样）。</p><p>当一个具体的<code>class</code>去实现一个<code>interface</code>时，需要使用<code>implements</code>关键字。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，在 Java 中，一个类只能继承自另一个类，不能从多个类继承。但是，**一个类可以实现多个<code>interface</code>**，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span>, <span class="title">Hello</span> </span>&#123; <span class="comment">// 实现了两个 interface</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>Person</code>接口继承自<code>Hello</code>接口，因此，<code>Person</code>接口现在实际上有3个抽象方法签名，其中一个来自继承的<code>Hello</code>接口。</p><h4 id="default-方法"><a href="#default-方法" class="headerlink" title="default 方法"></a>default 方法</h4><p>在接口中，可以定义<code>default</code>方法。例如，把<code>Person</code>接口的<code>run()</code>方法改为<code>default</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>);  <span class="comment">// new 一个继承 Person 接口的 student 实例</span></span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">// default 修饰符</span></span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类可以不必覆写<code>default</code>方法。**<code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。**</p><p><code>default</code>方法和抽象类的普通方法是有所不同的。因为<code>interface</code>没有字段，<code>default</code>方法无法访问字段，而抽象类的普通方法可以访问实例字段。</p><h4 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 Hero 的 Zeus</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zeus</span> <span class="keyword">implements</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">&quot;Zeus&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承 Hero 的 Athena</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Athena</span> <span class="keyword">implements</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">&quot;Athena&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner((System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择英雄：&quot;</span>);</span><br><span class="line">        String name =  sc.next();</span><br><span class="line">        Hero hero ;</span><br><span class="line">        <span class="comment">// 先判断是谁</span></span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;Zeus&quot;</span>))  </span><br><span class="line">            hero = <span class="keyword">new</span> Zeus(); <span class="comment">// 实例化的对象永远只能是某个具体的子类，但总是通过接口去引用它</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            hero = <span class="keyword">new</span> Athena();</span><br><span class="line">        <span class="comment">// 再执行操作</span></span><br><span class="line">        hero.move();   <span class="comment">// 不管子类是啥 这里都是 Hero 接口的方法</span></span><br><span class="line">        hero.getSpeed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有多态，那么 main 函数会如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner((System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择英雄：&quot;</span>);</span><br><span class="line">        String name =  sc.next();</span><br><span class="line">        <span class="comment">// 边判断是谁 边其执行操作</span></span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;Zeus&quot;</span>))&#123;</span><br><span class="line">            Zeus hero = <span class="keyword">new</span> Zeus(); </span><br><span class="line">            hero.move();   </span><br><span class="line">        hero.getSpeed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 边判断是谁 边其执行操作</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Athena hero = <span class="keyword">new</span> Athena();</span><br><span class="line">            hero.move();   </span><br><span class="line">        hero.getSpeed();  </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相比之下，多态可以通过接口去引用具体的子类，进而达到复用代码的目的。</strong></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>生成一个实例时，指定类中某个变量的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Double&gt; stk = <span class="keyword">new</span> Stack&lt;Double&gt;(); <span class="comment">// 这里指定栈 Stack 中存储的为 Double 类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 中栈 stack 实现的部分源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an empty Stack.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        addElement(item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E       obj;</span><br><span class="line">        <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">        obj = peek();</span><br><span class="line">        removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943629175808">集合</a></h2><p>Java 集合的设计有几个特点：</p><ol><li><p>实现了接口和实现类相分离，例如，有序表接口是<code>List</code>，具体的实现类有<code>ArrayList</code>，<code>LinkedList</code>等。</p></li><li><p>支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 只能放入 String 类型</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="List（有序列表的集合）"><a href="#List（有序列表的集合）" class="headerlink" title="List（有序列表的集合）"></a>List（有序列表的集合）</h3><h4 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.List&lt;&gt;</code></li></ul><h4 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h4><ul><li><code>java.util.ArrayList&lt;&gt;</code>：变长数组（比较适合读取操作）</li><li><code>java.util.LinkedList&lt;&gt;</code>：双链表 (比较适合添加、删除操作 )</li></ul><h4 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>add()</code>：在末尾添加一个元素</li><li><code>clear()</code>：清空</li><li><code>size()</code>：返回长度</li><li><code>isEmpty()</code>：是否为空</li><li><code>get(i)</code>：获取第 i 个元素</li><li><code>set(i, val)</code>：将第 i 个元素设置为 val</li></ul><h4 id="4-覆写-equals-方法"><a href="#4-覆写-equals-方法" class="headerlink" title="4. 覆写 equals 方法"></a>4. 覆写 equals 方法</h4><p><code>List</code>的<code>contains(Object o)</code>方法和<code>indexOf(Object o)</code>方法依赖于<code>equals</code>方法。</p><p>因此，要正确使用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，放入的实例必须正确覆写<code>equals()</code>方法，否则，放进去的实例，查</p><p>找不到。我们之所以能正常放入<code>String</code>、<code>Integer</code>这些对象，是因为 Java 标准库定义的这些类已经正确实现了<code>equals()</code>方法。</p><p>eg：以<code>Person</code>对象为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; list = List.of(</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Hong&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        System.out.println(list.contains(<span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>))); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>equals()</code>方法的正确编写方法：</strong></p><ol><li>先确定实例“相等”的逻辑，即哪些字段相等，就认为实例相等；</li><li>用<code>instanceof</code>判断传入的待比较的<code>Object</code>是不是当前类型，如果是，继续比较，否则，返回<code>false</code>；</li><li>对引用类型用<code>Objects.equals()</code>比较，对基本类型直接用<code>==</code>比较。</li></ol><p>使用<code>Objects.equals()</code>比较两个引用类型是否相等的目的是省去了判断<code>null</code>的麻烦。两个引用类型都是<code>null</code>时它们也是相等的。</p><p>如果不调用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，那么放入的元素就不需要实现<code>equals()</code>方法。 </p><p>eg：在 Person 中覆写<code>equals()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">        Person p = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.name, p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-遍历list"><a href="#5-遍历list" class="headerlink" title="5. 遍历list"></a>5. 遍历<code>list</code></h4><p>和数组类型，我们要遍历一个<code>List</code>，完全可以用<code>for</code>循环根据索引配合<code>get(int)</code>方法遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种方式并不推荐，一是代码复杂，二是因为<code>get(int)</code>方法只有<code>ArrayList</code>的实现是高效的，换成<code>LinkedList</code>后，索引越大，访问速度越慢。</p><p>所以我们要始终坚持使用迭代器<code>Iterator</code>来访问<code>List</code>。<code>Iterator</code>本身也是一个对象，但它是由<code>List</code>的实例调用<code>iterator()</code>方法的时候创建的。<code>Iterator</code>对象知道如何遍历一个<code>List</code>，并且不同的<code>List</code>类型，返回的<code>Iterator</code>对象实现也是不同的，但<strong>总是具有最高的访问效率</strong>。</p><p><code>Iterator</code>对象有两个方法：<code>boolean hasNext()</code>判断是否有下一个元素，<code>E next()</code>返回下一个元素。因此，使用<code>Iterator</code>遍历<code>List</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有童鞋可能觉得使用<code>Iterator</code>访问<code>List</code>的代码比使用索引更复杂。但是，要记住，<strong>通过<code>Iterator</code>遍历<code>List</code>永远是最高效的方式</strong>。并且，由于<code>Iterator</code>遍历是如此常用，所以，Java 的<code>for each</code>循环本身就可以帮我们使用<code>Iterator</code>遍历。把上面的代码再改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是我们编写遍历<code>List</code>的常见代码。</p><p>实际上，只要实现了<code>Iterable</code>接口的集合类都可以直接用<code>for each</code>循环来遍历，Java编译器本身并不知道如何遍历集合对象，但它会自动把<code>for each</code>循环变成<code>Iterator</code>的调用，原因就在于<code>Iterable</code>接口定义了一个<code>Iterator&lt;E&gt; iterator()</code>方法，强迫集合类必须返回一个<code>Iterator</code>实例。</p><h4 id="6-List-和-Array-转换"><a href="#6-List-和-Array-转换" class="headerlink" title="6. List 和 Array 转换"></a>6. List 和 Array 转换</h4><h6 id="List-转-Array"><a href="#List-转-Array" class="headerlink" title="List 转 Array"></a>List 转 Array</h6><ul><li><p>方法一：调用<code>toArray()</code>方法直接返回一个<code>Object[]</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">Object[] array = list.toArray(); <span class="comment">// 由 String 到 Object 类型</span></span><br></pre></td></tr></table></figure><p>这种方法会丢失类型信息，所以实际应用很少。</p></li><li><p>方法二：给<code>toArray(T[])</code>传入一个类型相同的<code>Array</code>，<code>List</code>内部自动把元素复制到传入的<code>Array</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> Integer[<span class="number">3</span>]); <span class="comment">// 由 Integer 到 Integer 类型</span></span><br></pre></td></tr></table></figure><p>如果传入的数组不够大，那么<code>List</code>内部会创建一个新的刚好够大的数组，填充后返回；如果传入的数组比<code>List</code>元素还要多，那么填充完元素后，剩下的数组元素一律填充<code>null</code>。</p></li><li><p>方法三：通过<code>List</code>接口定义的<code>T[] toArray(IntFunction&lt;T[]&gt; generator)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">Integer[] array = list.toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure></li></ul><h6 id="Array-转-List"><a href="#Array-转-List" class="headerlink" title="Array 转 List"></a>Array 转 List</h6><ul><li><p>通过<code>List.of(T...)</code>方法最简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);</span><br></pre></td></tr></table></figure><p>对于JDK 11之前的版本，可以使用<code>Arrays.asList(T...)</code>方法把数组转换成<code>List</code>。</p><p>要注意的是，返回的<code>List</code>不一定就是<code>ArrayList</code>或者<code>LinkedList</code>，因为<code>List</code>只是一个接口，如果我们调用<code>List.of()</code>，它返回的是一个只读<code>List</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">        list.add(<span class="number">999</span>); <span class="comment">// UnsupportedOperationException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="1-类"><a href="#1-类" class="headerlink" title="1. 类"></a>1. 类</h4><ul><li><code>java.util.Stack&lt;&gt;</code></li></ul><h4 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h4><ul><li><code>push()</code>：压入元素</li><li><code>pop()</code>：弹出栈顶元素，并返回栈顶元素</li><li><code>peek()</code>：返回栈顶元素</li><li><code>size()</code>：返回长度</li><li><code>empty()</code>：栈是否为空</li><li><code>clear()</code>：清空</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="1-接口-1"><a href="#1-接口-1" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.Queue&lt;&gt;</code></li></ul><h4 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2.实现"></a>2.实现</h4><ul><li><p><code>java.util.LinkedList&lt;&gt;</code>：双链表</p></li><li><p><code>java.util.PriorityQueue&lt;&gt;</code>：优先队列(<strong>堆</strong>)</p><blockquote><p>默认是小根堆，大根堆写法：<code>new PriorityQueue&lt;(Collections.reverseOrder())</code></p></blockquote></li></ul><h4 id="3-函数-1"><a href="#3-函数-1" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>add()</code>：在队尾添加元素</li><li><code>remove()</code>：删除并返回队头</li><li><code>isEmpty()</code>：是否为空</li><li><code>size()</code>：返回长度</li><li><code>peek()</code>：返回队头</li><li><code>clear()</code>：清空</li></ul><h3 id="Set（保证没有重复元素的集合）"><a href="#Set（保证没有重复元素的集合）" class="headerlink" title="Set（保证没有重复元素的集合）"></a>Set（保证没有重复元素的集合）</h3><h4 id="1-接口-2"><a href="#1-接口-2" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.Set&lt;K&gt;</code></li></ul><h5 id="2-实现-2"><a href="#2-实现-2" class="headerlink" title="2. 实现"></a>2. 实现</h5><ul><li><h4 id="java-util-HashSet-lt-K-gt-：哈希表（无序集合）"><a href="#java-util-HashSet-lt-K-gt-：哈希表（无序集合）" class="headerlink" title="java.util.HashSet&lt;K&gt;：哈希表（无序集合）"></a><code>java.util.HashSet&lt;K&gt;</code>：哈希表（无序集合）</h4></li><li><p><code>java.util.TreeSet&lt;K&gt;</code>：平衡树（有序集合，二叉排序树）</p></li></ul><h4 id="3-函数-2"><a href="#3-函数-2" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>add()</code>：添加元素</li><li><code>contains()</code>：是否包含某个元素</li><li><code>remove()</code>：删除元素</li><li><code>size()</code>：返回元素数</li><li><code>isEmpty()</code>：是否为空</li><li><code>clear()</code>：清空</li></ul><p><code>java.util.TreeSet</code>多的几个函数：</p><ul><li><code>ceiling(key)</code>：返回大于等于<code>key</code>的最小元素，不存在则返回<code>null</code></li><li><code>floor(key)</code>：返回小于等于<code>key</code>的最大元素，不存在则返回<code>null</code></li></ul><h3 id="Map（通过键值（key-value）查找的映射表集合）"><a href="#Map（通过键值（key-value）查找的映射表集合）" class="headerlink" title="Map（通过键值（key-value）查找的映射表集合）"></a>Map（通过键值（key-value）查找的映射表集合）</h3><blockquote><p>我们知道，<code>List</code>是一种顺序列表，如果有一个存储学生<code>Student</code>实例的<code>List</code>，要在<code>List</code>中根据<code>name</code>查找某个指定的<code>Student</code>的分数，应该怎么办？最简单的方法是遍历<code>List</code>并判断<code>name</code>是否相等，然后返回指定元素。这种需求其实非常常见，即通过一个键去查询对应的值。使用<code>List</code>来实现存在效率非常低的问题，因为平均需要扫描一半的元素才能确定，而<code>Map</code>这种键值（key-value）映射表的数据结构，作用就是能高效通过<code>key</code>快速查找<code>value</code>（元素）。</p></blockquote><h4 id="1-接口-3"><a href="#1-接口-3" class="headerlink" title="1. 接口"></a>1. 接口</h4><ul><li><code>java.util.Map&lt;K, V&gt;</code></li></ul><h4 id="2-实现-3"><a href="#2-实现-3" class="headerlink" title="2. 实现"></a>2. 实现</h4><ul><li><code>java.util.HashMap&lt;K, V&gt;</code>：哈希表（无序集合）</li><li><code>java.util.TreeMap&lt;K, V&gt;</code>：平衡树（有序集合，二叉排序树）</li></ul><h4 id="3-函数-3"><a href="#3-函数-3" class="headerlink" title="3. 函数"></a>3. 函数</h4><ul><li><code>put(key, value)</code>：添加关键字和其对应的值</li><li><code>get(key)</code>：返回关键字对应的值</li><li><code>containsKey(key)</code>：是否包含关键字</li><li><code>remove(key)</code>：删除关键字</li><li><code>size()</code>：返回元素数</li><li><code>isEmpty()</code>：是否为空</li><li><code>clear()</code>：清空</li><li><code>entrySet()</code>：获取<code>Map</code>中的所有对象的集合</li><li><code>Map.Entry&lt;K, V&gt;</code>：<code>Map</code>中的对象类型</li><li><code>getKey()</code>：获取关键字</li><li><code>getValue()</code>：获取值</li></ul><p><code>java.util.TreeMap&lt;K, V&gt;</code>多的函数：</p><ul><li><code>ceilingEntry(key)</code>：返回大于等于<code>key</code>的最小元素，不存在则返回<code>null</code></li><li><code>floorEntry(key)</code>：返回小于等于<code>key</code>的最大元素，不存在则返回<code>null</code></li></ul><h4 id="4-遍历Map"><a href="#4-遍历Map" class="headerlink" title="4. 遍历Map"></a>4. 遍历<code>Map</code></h4><p>对<code>Map</code>来说，要遍历<code>key</code>可以使用<code>for each</code>循环遍历<code>Map</code>实例的<code>keySet()</code>方法返回的<code>Set</code>集合，它包含不重复的<code>key</code>的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pear&quot;</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">&quot;banana&quot;</span>, <span class="number">789</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">banana = <span class="number">789</span></span><br><span class="line">apple = <span class="number">123</span></span><br><span class="line">pear = <span class="number">456</span></span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建一个新线程"><a href="#创建一个新线程" class="headerlink" title="创建一个新线程"></a>创建一个新线程</h3><p>Java 用<code>Thread</code>对象表示一个线程，通过<code>Thread</code>类<code>new</code>的实例对象调用<code>start()</code>启动一个新线程</p><p><code>Thread.sleep()</code>可以把<strong>当前线程</strong>暂停一段时间。</p><p>线程的执行代码写在<code>run()</code>方法中，一旦<code>run()</code>方法执行完毕，新线程就结束了</p><blockquote><p>一个线程实例对象只能调用一次<code>start()</code>方法；</p><p>线程调度由操作系统决定，程序本身无法决定调度顺序；</p></blockquote><p><strong>创建方法1</strong>：从<code>Thread</code>派生一个自定义类，然后覆写<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">// 新线程的执行代码</span></span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常;</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start();  <span class="comment">// 开启新线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常;</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  <span class="comment">// 防止等待的一秒内出现异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main thread&quot;</span>);   <span class="comment">// 不要写在 try 里面 写在 try 里面会立即打印</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main thread</span><br><span class="line">game thread</span><br></pre></td></tr></table></figure><p><code>mian</code>中通过<code>game</code>实例的<code>start</code>方法，启动了一个新的线程，并执行<code>Game</code>类中覆写父类<code>Thread</code>中的<code>run</code>方法，即新线程的执行代码。</p><p>然后<code>main</code>线程与<code>game</code>线程同时<code>sleep</code>，<code>sleep</code>完后再先后各自打印结果。</p><p><strong>创建方法2</strong>：创建<code>Thread</code>实例时，传入一个<code>Runnable</code>实例：</p><blockquote><p>这样<code>runnable</code>可以复用于多个<code>Thread</code>实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者或者用 Java8引入的 lambda 语法进一步简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>在 Java 程序中，一个线程对象只能调用一次<code>start()</code>方法启动新线程，并在新线程中执行<code>run()</code>方法。一旦<code>run()</code>方法执行完毕，线程就结束了。因此，Java 线程的状态有以下几种：</p><ul><li><code>New</code>：新创建的线程，尚未执行；</li><li><code>Runnable</code>：运行中的线程，正在执行<code>run()</code>方法的 Java 代码；</li><li><code>Blocked</code>：运行中的线程，因为某些操作被阻塞而挂起；</li><li><code>Waiting</code>：运行中的线程，因为某些操作在等待中；</li><li><code>Timed Waiting</code>：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；</li><li><code>Terminated</code>：线程已终止，因为<code>run()</code>方法执行完毕。</li></ul><p>用一个状态转移图表示如下：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306152329299.png" alt="image-20230306152329299" style="zoom: 80%;" /><p>线程终止的原因有：</p><ul><li>线程正常终止：<code>run()</code>方法执行到<code>return</code>语句返回；</li><li>线程意外终止：<code>run()</code>方法因为未捕获的异常导致线程终止；</li><li>对某个线程的<code>Thread</code>实例调用<code>stop()</code>方法强制终止（强烈不推荐使用）。</li></ul><p>一个线程还可以等待另一个线程直到其运行结束。例如，<code>main</code>线程在启动<code>game</code>线程后，可以通过<code>game.join()</code>等待<code>game</code>线程结束后再继续运行：</p><blockquote><p><code>game.join(1000)</code>也可以指定一个等待时间，超过等待时间后就不再继续等待</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">// 新线程的执行代码</span></span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常;</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常</span></span><br><span class="line">            game.join();  <span class="comment">// main 线程等待 game 线程结束后再继续运行：</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// try..catch 包裹 防止等待期间异常</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main thread&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">game thread</span><br><span class="line">main thread</span><br></pre></td></tr></table></figure><h3 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h3><p>如果线程需要执行一个长时间任务，就可能需要能中断线程。中断线程就是其他线程给该线程发一个信号，该线程收到信号后结束执行<code>run()</code>方法，使得自身线程能立刻结束运行。</p><p>我们举个栗子：假设从网络下载一个100M 的文件，如果网速很慢，用户等得不耐烦，就可能在下载过程中点“取消”，这时，程序就需要中断下载线程的执行。</p><p><strong>中断线程有两种常用方案：</strong></p><ol><li><p>对目标线程调用<code>interrupt()</code>方法可以请求中断一个线程，目标线程通过检测<code>isInterrupted()</code>标志获取自身是否已中断。<br>如果目标线程处于等待状态，该线程会捕获到<code>InterruptedException</code>；</p><blockquote><p>目标线程检测到<code>isInterrupted()</code>为<code>true</code>或者捕获了<code>InterruptedException</code>都应该立刻结束自身线程；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start(); <span class="comment">// game 线程启动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);  <span class="comment">// main 线程睡3秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        game.interrupt(); <span class="comment">// 让 game 线程中断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main run over&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        Player player = <span class="keyword">new</span> Player();</span><br><span class="line">        player.start(); <span class="comment">// play 线程启动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            player.join();  <span class="comment">// game 线程等待 play 线程执行完</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;game interrupted&quot;</span>);  <span class="comment">// game 线程被中断则打印</span></span><br><span class="line">            player.interrupt();  <span class="comment">// 让 player 线程中断</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game run over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">while</span> (!isInterrupted())&#123;  <span class="comment">// 反复判断 player 线程是否被中断</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;player interrupted&quot;</span>);  </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;player thread %d\n&quot;</span>,i++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;player run over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">player thread <span class="number">0</span></span><br><span class="line">player thread <span class="number">1</span></span><br><span class="line">main run over</span><br><span class="line">game interrupted</span><br><span class="line">game run over</span><br><span class="line">player interrupted</span><br><span class="line">player run over</span><br></pre></td></tr></table></figure></li><li><p>另一个常用的中断线程的方法是设置标志位。通常会用一个<code>running</code>标志位来标识线程是否应该继续运行，在外部线程中，通过把<code>game.running</code>置为<code>false</code>，就可以让线程结束。</p><blockquote><p><code>volatile</code>关键字表明<code>running</code>是一个线程间共享的变量。线程间共享变量需要使用<code>volatile</code>关键字标记，确保每个线程都能读取到更新后的变量值。</p><p>为什么要对线程间共享的变量用关键字<code>volatile</code>声明？这涉及到 Java 的内存模型。在 Java 虚拟机中，变量的值保存在主内存中，但是，当线程访问变量时，它会先获取一个副本，并保存在自己的工作内存中。如果线程修改了变量的值，虚拟机会在某个时刻把修改后的值回写到主内存，但是，这个时间是不确定的！</p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306163452342.png" alt="image-20230306163452342"></p><p>这会导致如果一个线程更新了某个变量，另一个线程读取的值可能还是更新前的。例如，主内存的变量<code>a = true</code>，线程1执行<code>a = false</code>时，它在此刻仅仅是把变量<code>a</code>的副本变成了<code>false</code>，主内存的变量<code>a</code>还是<code>true</code>，在 JVM 把修改后的<code>a</code>回写到主内存之前，其他线程读取到的<code>a</code>的值仍然是<code>true</code>，这就造成了多线程之间共享的变量不一致。</p><p>因此，<code>volatile</code>关键字的目的是告诉虚拟机：</p><ul><li>每次访问变量时，总是获取主内存的最新值；</li><li>每次修改变量后，立刻回写到主内存。</li></ul><p><code>volatile</code>关键字解决的是可见性问题：当一个线程修改了某个共享变量的值，其他线程能够立刻看到修改后的值。</p><p>如果我们去掉<code>volatile</code>关键字，运行上述程序，发现效果和带<code>volatile</code>差不多，这是因为在 x86的架构下，JVM 回写主内存的速度非常快，但是，换成 ARM 的架构，就会有显著的延迟。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game();</span><br><span class="line">        game.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        game.running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;main run over&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;  <span class="comment">// 需要添加 volatile 关键字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">while</span>(running)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;game thread %d\n&quot;</span>,i++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;game run over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码执行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">game thread <span class="number">0</span></span><br><span class="line">game thread <span class="number">1</span></span><br><span class="line">main run over</span><br><span class="line">game thread <span class="number">2</span></span><br><span class="line">game run over</span><br></pre></td></tr></table></figure><p><code>game thread 2</code>之所以在<code>main run over</code>之后，是因为<code>runnig</code>设置为<code>false</code>时，上一次<code>while</code>循环的<code>sleep</code>还在等待，随后才输出<code>game thread 2</code>。</p></li></ol><p><strong>注意：</strong></p><p>正在跑的线程不会响应别的线程发出的中断。</p><p><strong>只有 sleep/wait 状态的线程会响应 interrupt。</strong></p><p>如果一个线程正在跑，别的线程给他发 interrupt，它要继续跑到什么时候才会响应 interrupt 呢？得到自己调用 sleep/wait 的时候。</p><p>如果你写了一个计算密集型任务，跑一次要10分钟，为了能及时响应别的线程发的 interrupt，可以每跑几秒钟就 sleep(1)一下，确保能及时被 interrupt。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>Java 程序入口就是由 JVM 启动<code>main</code>线程，<code>main</code>线程又可以启动其他线程。当所有线程都运行结束时，JVM 退出，进程结束。</p><p>如果有一个线程没有退出，JVM 进程就不会退出。所以，<strong>必须保证所有线程都能及时结束。</strong></p><p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(LocalTime.now());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个线程不结束，JVM 进程就无法结束。问题是，由谁负责结束这个线程？</p><p>答案是使用守护线程（Daemon Thread）。</p><p>守护线程是指为其他线程服务的线程。<strong>在 JVM 中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</strong></p><p>因此，JVM 退出时，不必关心守护线程是否已结束。</p><p><strong>如何创建守护线程呢？方法和普通线程一样，只是在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimerThread t = <span class="keyword">new</span> TimerThread();</span><br><span class="line">t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>在守护线程中，编写代码要注意：守护线程不能持有任何需要关闭的资源，例如打开文件等，因为虚拟机退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><h4 id="通过-synchronized-加锁"><a href="#通过-synchronized-加锁" class="headerlink" title="通过 synchronized 加锁"></a>通过 synchronized 加锁</h4><p>当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定。因此，任何一个线程都有可能在任何指令处被操作系统暂停，然后在某个时间段后继续执行。</p><p>这个时候，有个单线程模型下不存在的问题就来了：如果多个线程同时读写共享变量，会出现数据不一致的问题。</p><p>我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        <span class="keyword">var</span> dec = <span class="keyword">new</span> DecThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dec.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dec.join();</span><br><span class="line">        System.out.println(Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123; Counter.count += <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123; Counter.count -= <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码很简单，两个线程同时对一个<code>int</code>变量进行操作，一个加10000次，一个减10000次，最后结果应该是0，但是，每次运行，结果实际上都是不一样的。</p><p>这是因为对变量进行读取和写入时，结果要正确，必须保证是原子操作。</p><blockquote><p>原子操作是指不能被中断的一个或一系列操作</p></blockquote><p>例如，对于语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = n + 1;</span><br></pre></td></tr></table></figure><p>看上去是一行语句，实际上对应了3条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ILOAD</span><br><span class="line">IADD</span><br><span class="line">ISTORE</span><br></pre></td></tr></table></figure><p>我们假设<code>n</code>的值是<code>100</code>，如果两个线程同时执行<code>n = n + 1</code>，得到的结果很可能不是<code>102</code>，而是<code>101</code>，原因在于：</p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306165409571.png" alt="image-20230306165409571"></p><p>如果线程1在执行<code>ILOAD</code>后被操作系统中断，此刻如果线程2被调度执行，它执行<code>ILOAD</code>后获取的值仍然是<code>100</code>，最终结果被两个线程的<code>ISTORE</code>写入后变成了<code>101</code>，而不是期待的<code>102</code>。</p><p>这说明多线程模型下，要保证逻辑正确，对共享变量进行读写时，必须保证一组指令以原子方式执行：<strong>即某一个线程执行时，其他线程必须等待：</strong></p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230306165426556.png" alt="image-20230306165426556" style="zoom:67%;" /><p><strong>通过加锁和解锁的操作，就能保证3条指令总是在一个线程执行期间</strong>，不会有其他线程会进入此指令区间。即使在执行期线程被操作系统中断执行，其他线程也会因为无法获得锁导致无法进入此指令区间。只有执行线程将锁释放后，其他线程才有机会获得锁并执行。这种加锁和解锁之间的代码块我们称之为临界区（Critical Section），任何时候临界区最多只有一个线程能执行。</p><p>可见，保证一段代码的原子性就是通过加锁和解锁实现的。Java 程序使用<code>synchronized</code>关键字对<strong>一个对象进行加锁</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized(lock) &#123;</span><br><span class="line">    n = n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>synchronized</code>保证了代码块在任意时刻最多只有一个线程能执行</strong>。我们把上面的代码用<code>synchronized</code>改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        <span class="keyword">var</span> dec = <span class="keyword">new</span> DecThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dec.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dec.join();</span><br><span class="line">        System.out.println(Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object(); <span class="comment">// Counter 的所有实例锁的是同一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.count -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意到代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Counter.lock) &#123; <span class="comment">// 获取锁</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// 释放锁</span></span><br></pre></td></tr></table></figure><p>它表示<strong>用<code>Counter.lock</code>实例作为锁</strong>，两个线程在执行各自的<code>synchronized(Counter.lock) &#123; ... &#125;</code>代码块时，必须先获得锁，才能进入代码块进行。执行结束后，在<code>synchronized</code>语句块结束会自动释放锁。这样一来，对<code>Counter.count</code>变量进行读写就不可能同时进行。上述代码无论运行多少次，最终结果都是0。</p><p>使用<code>synchronized</code>解决了多线程同步访问共享变量的正确性问题。但是，它的缺点是带来了性能下降。因为<code>synchronized</code>代码块无法并发执行。此外，加锁和解锁需要消耗一定的时间，所以，<code>synchronized</code>会降低程序的执行效率。</p><p>我们来概括一下如何使用<code>synchronized</code>：</p><ol><li>找出修改共享变量的线程代码块；</li><li>选择一个共享实例作为锁；</li><li>使用<code>synchronized(lockObject) &#123; ... &#125;</code>。</li></ol><p>在使用<code>synchronized</code>的时候，不必担心抛出异常。因为无论是否有异常，都会在<code>synchronized</code>结束处正确释放锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.value += m;</span><br><span class="line">    &#125; <span class="comment">// 无论有无异常，都会在此释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看一个错误使用<code>synchronized</code>的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="keyword">new</span> AddThread();</span><br><span class="line">        <span class="keyword">var</span> dec = <span class="keyword">new</span> DecThread();</span><br><span class="line">        add.start();</span><br><span class="line">        dec.start();</span><br><span class="line">        add.join();</span><br><span class="line">        dec.join();</span><br><span class="line">        System.out.println(Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock1 = <span class="keyword">new</span> Object();  <span class="comment">// 锁的不是同一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock2 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock1) &#123;</span><br><span class="line">                Counter.count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock2) &#123;</span><br><span class="line">                Counter.count -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果并不是0，这是因为两个线程各自的<code>synchronized</code>锁住的<em><strong>不是同一个对象</strong></em>！这使得两个线程各自都可以同时获得锁：因为 JVM 只保证同一个锁在任意时刻只能被一个线程获取，但两个不同的锁在同一时刻可以被两个线程分别获取。</p><p>因此，使用<code>synchronized</code>的时候，获取到的是哪个锁非常重要。锁对象如果不对，代码逻辑就不对。</p><p>我们再看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ts = <span class="keyword">new</span> Thread[] &#123; <span class="keyword">new</span> AddStudentThread(), <span class="keyword">new</span> DecStudentThread(), <span class="keyword">new</span> AddTeacherThread(), <span class="keyword">new</span> DecTeacherThread() &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t : ts) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t : ts) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Counter.studentCount);</span><br><span class="line">        System.out.println(Counter.teacherCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> studentCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> teacherCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddStudentThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.studentCount += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecStudentThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.studentCount -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTeacherThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.teacherCount += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecTeacherThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Counter.lock) &#123;</span><br><span class="line">                Counter.teacherCount -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的4个线程对两个共享变量分别进行读写操作，但是使用的锁都是<code>Counter.lock</code>这一个对象，这就造成了原本可以并发执行的<code>Counter.studentCount += 1</code>和<code>Counter.teacherCount += 1</code>，现在无法并发执行了，执行效率大大降低。实际上，需要同步的线程可以分成两组：<code>AddStudentThread</code>和<code>DecStudentThread</code>，<code>AddTeacherThread</code>和<code>DecTeacherThread</code>，组之间不存在竞争，因此，应该使用两个不同的锁，即：</p><p><code>AddStudentThread</code>和<code>DecStudentThread</code>使用<code>lockStudent</code>锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Counter.lockStudent) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AddTeacherThread</code>和<code>DecTeacherThread</code>使用<code>lockTeacher</code>锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Counter.lockTeacher) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才能最大化地提高执行效率。</p><h4 id="不需要-synchronized-的操作"><a href="#不需要-synchronized-的操作" class="headerlink" title="不需要 synchronized 的操作"></a>不需要 synchronized 的操作</h4><p>JVM 规范定义了几种原子操作：</p><ul><li>基本类型（<code>long</code>和<code>double</code>除外）赋值，例如：<code>int n = m</code>；</li><li>引用类型赋值，例如：<code>List&lt;String&gt; list = anotherList</code>。</li></ul><p><code>long</code>和<code>double</code>是64位数据，JVM 没有明确规定64位赋值操作是不是一个原子操作，不过在 x64平台的 JVM 是把<code>long</code>和<code>double</code>的赋值作为原子操作实现的。</p><p>单条原子操作的语句不需要同步。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void set(int m) &#123;</span><br><span class="line">    synchronized(lock) &#123;</span><br><span class="line">        this.value = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不需要同步。</p><p>对引用也是类似。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void set(String s) &#123;</span><br><span class="line">    this.value = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述赋值语句并不需要同步。</p><p>但是，如果是多行赋值语句，就必须保证是同步操作，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Pair &#123;</span><br><span class="line">    int first;</span><br><span class="line">    int last;</span><br><span class="line">    public void set(int first, int last) &#123;</span><br><span class="line">        synchronized(this) &#123;</span><br><span class="line">            this.first = first;</span><br><span class="line">            this.last = last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些时候，通过一些巧妙的转换，可以把非原子操作变为原子操作。例如，上述代码如果改造成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Pair &#123;</span><br><span class="line">    int[] pair;</span><br><span class="line">    public void set(int first, int last) &#123;</span><br><span class="line">        int[] ps = new int[] &#123; first, last &#125;;</span><br><span class="line">        this.pair = ps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不再需要同步，因为<code>this.pair = ps</code>是引用赋值的原子操作。而语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] ps = new int[] &#123; first, last &#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>ps</code>是方法内部定义的局部变量，每个线程都会有各自的局部变量，互不影响，并且互不可见，并不需要同步。</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>我们知道 Java 程序依靠<code>synchronized</code>对线程进行同步，使用<code>synchronized</code>的时候，锁住的是哪个对象非常重要。</p><p>让线程自己选择锁对象往往会使得代码逻辑混乱，也不利于封装。更好的方法是把<code>synchronized</code>逻辑封装起来。例如，我们编写一个计数器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count -= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;  <span class="comment">// 只是读 不需要加锁</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，线程调用<code>add()</code>、<code>dec()</code>方法时，它不必关心同步逻辑，因为<code>synchronized</code>代码块在<code>add()</code>、<code>dec()</code>方法内部。并且，我们注意到，<code>synchronized</code>锁住的对象是<code>this</code>，即当前实例，这又使得创建多个<code>Counter</code>实例的时候，它们之间互不影响，可以并发执行。</p><p>现在，对于<code>Counter</code>类，多线程可以正确调用。</p><p>如果一个类被设计为允许多线程正确访问，我们就说这个类就是“线程安全”的（thread-safe），上面的<code>Counter</code>类就是线程安全的。Java 标准库的<code>java.lang.StringBuffer</code>也是线程安全的。</p><p>还有一些不变类，例如<code>String</code>，<code>Integer</code>，<code>LocalDate</code>，它们的所有成员变量都是<code>final</code>，多线程同时访问时只能读不能写，这些不变类也是线程安全的。</p><p>最后，类似<code>Math</code>这些只提供静态方法，没有成员变量的类，也是线程安全的。</p><p>除了上述几种少数情况，大部分类，例如<code>ArrayList</code>，都是非线程安全的类，我们不能在多线程中修改它们。但是，如果所有线程都只读取，不写入，那么<code>ArrayList</code>是可以安全地在线程间共享的。</p><blockquote><p>没有特殊说明时，一个类默认是非线程安全的。</p></blockquote><p>我们再观察<code>Counter</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们锁住的是<code>this</code>实例时，实际上可以用<code>synchronized</code>修饰这个方法。下面两种写法是等价的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">// 锁住 this</span></span><br><span class="line">        count += n;</span><br><span class="line">    &#125; <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 锁住 this</span></span><br><span class="line">    count += n;</span><br><span class="line">&#125; <span class="comment">// 解锁</span></span><br></pre></td></tr></table></figure><p>因此，用<code>synchronized</code>修饰的方法就是同步方法，它表示整个方法都必须用<code>this</code>实例加锁。</p><p>我们再思考一下，如果对一个静态方法添加<code>synchronized</code>修饰符，它锁住的是哪个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>static</code>方法，是没有<code>this</code>实例的，因为<code>static</code>方法是针对类而不是实例。但是我们注意到任何一个类都有一个由 JVM 自动创建的<code>Class</code>实例，因此，对<code>static</code>方法添加<code>synchronized</code>，锁住的是该类的<code>Class</code>实例。上述<code>synchronized static</code>方法实际上相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Counter.class) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再考察<code>Counter</code>的<code>get()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它没有同步，因为读一个<code>int</code>变量不需要同步。</p><p>然而，如果我们把代码稍微改一下，返回一个包含两个<code>int</code>的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pair <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pair p = <span class="keyword">new</span> Pair();</span><br><span class="line">        p.first = first;</span><br><span class="line">        p.last = last;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就必须要同步了。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>Java 的线程锁是可重入的锁。</p><p>什么是可重入的锁？我们还是来看例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dec(-n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        count += n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察<code>synchronized</code>修饰的<code>add()</code>方法，一旦线程执行到<code>add()</code>方法内部，说明它已经获取了当前实例的<code>this</code>锁。如果传入的<code>n &lt; 0</code>，将在<code>add()</code>方法内部调用<code>dec()</code>方法。由于<code>dec()</code>方法也需要获取<code>this</code>锁，现在问题来了：</p><p>对同一个线程，能否在获取到锁以后继续获取同一个锁？</p><p>答案是肯定的。JVM 允许同一个线程重复获取同一个锁，这种能被同一个线程反复获取的锁，就叫做可重入锁。</p><p>由于 Java 的线程锁是可重入锁，所以，获取锁的时候，不但要判断是否是第一次获取，还要记录这是第几次获取。每获取一次锁，记录+1，每退出<code>synchronized</code>块，记录-1，<strong>减到0的时候，才会真正释放锁</strong>。</p><p>一个线程可以获取一个锁后，再继续获取另一个锁。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得 lockA 的锁</span></span><br><span class="line">        <span class="keyword">this</span>.value += m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得 lockB 的锁</span></span><br><span class="line">            <span class="keyword">this</span>.another += m;</span><br><span class="line">        &#125; <span class="comment">// 释放 lockB 的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放 lockA 的锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得 lockB 的锁</span></span><br><span class="line">        <span class="keyword">this</span>.another -= m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得 lockA 的锁</span></span><br><span class="line">            <span class="keyword">this</span>.value -= m;</span><br><span class="line">        &#125; <span class="comment">// 释放 lockA 的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放 lockB 的锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获取多个锁的时候，不同线程获取多个不同对象的锁可能导致死锁。对于上述代码，线程1和线程2如果分别执行<code>add()</code>和<code>dec()</code>方法时：</p><ul><li>线程1：进入<code>add()</code>，获得<code>lockA</code>；</li><li>线程2：进入<code>dec()</code>，获得<code>lockB</code>。</li></ul><p>随后：</p><ul><li>线程1：准备获得<code>lockB</code>，失败，等待中；</li><li>线程2：准备获得<code>lockA</code>，失败，等待中。</li></ul><p><strong>此时，两个线程各自持有不同的锁，然后各自试图获取对方手里的锁，造成了双方无限等待下去，这就是死锁</strong>。</p><p>死锁发生后，没有任何机制能解除死锁，只能强制结束 JVM 进程。</p><p>因此，在编写多线程应用时，要特别注意防止死锁。因为死锁一旦形成，就只能强制结束进程。</p><p>那么我们应该如何避免死锁呢？答案是：线程获取锁的顺序要一致。即严格按照先获取<code>lockA</code>，再获取<code>lockB</code>的顺序，改写<code>dec()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得 lockA 的锁</span></span><br><span class="line">        <span class="keyword">this</span>.value -= m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得 lockB 的锁</span></span><br><span class="line">            <span class="keyword">this</span>.another -= m;</span><br><span class="line">        &#125; <span class="comment">// 释放 lockB 的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放 lockA 的锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wait、notify、notifyAll"><a href="#wait、notify、notifyAll" class="headerlink" title="wait、notify、notifyAll"></a>wait、notify、notifyAll</h3><h4 id="多线程协调问题"><a href="#多线程协调问题" class="headerlink" title="多线程协调问题"></a>多线程协调问题</h4><p>在 Java 程序中，<code>synchronized</code>解决了多线程竞争的问题。例如，对于一个任务管理器，<strong>多个线程同时往队列中添加任务</strong>，可以用<code>synchronized</code>加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// synchronized 保证了在任意时刻最多只有一个线程往队列中添加任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是<code>synchronized</code>并没有解决多线程协调的问题。</p><p>仍然以上面的<code>TaskQueue</code>为例，我们再编写一个<code>getTask()</code>方法取出队列的第一个任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码看上去没有问题：<code>getTask()</code>内部先判断队列是否为空，如果为空，就循环等待，直到另一个线程往队列中放入了一个任务，<code>while()</code>循环退出，就可以返回队列的元素了。</p><p>但实际上<code>while()</code>循环永远不会退出。因为线程在执行<code>while()</code>循环时，已经在<code>getTask()</code>入口获取了<code>this</code>锁，其他线程根本无法调用<code>addTask()</code>，因为<code>addTask()</code>执行条件也是获取<code>this</code>锁。</p><p>因此，执行上述代码，线程会在<code>getTask()</code>中因为死循环而100%占用 CPU 资源。</p><p>如果深入思考一下，我们想要的执行效果是：</p><ul><li>线程1可以调用<code>addTask()</code>不断往队列中添加任务；</li><li>线程2可以调用<code>getTask()</code>从队列中获取任务。如果队列为空，则<code>getTask()</code>应该等待，直到队列中至少有一个任务时再返回。</li></ul><p>因此，<strong>多线程协调运行的原则就是：当条件不满足时，线程进入等待状态；当条件满足时，线程被唤醒，继续执行任务</strong>。</p><h4 id="wait-方法"><a href="#wait-方法" class="headerlink" title="wait()方法"></a>wait()方法</h4><p>对于上述<code>TaskQueue</code>，我们先改造<code>getTask()</code>方法，在条件不满足时，线程进入等待状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个线程执行到<code>getTask()</code>方法内部的<code>while</code>循环时，它必定已经获取到了<code>this</code>锁，此时，线程执行<code>while</code>条件判断，如果条件成立（队列为空），线程将执行<code>this.wait()</code>，进入等待状态，且<strong>会释放线程获得的锁</strong>，直到将来某个时刻，线程从等待状态被其他线程唤醒后，<code>wait()</code>方法才会返回，线程又会重新试图获得锁，然后，继续执行下一条语句。</p><blockquote><p><code>wait()</code>方法必须在当前获取的锁对象上调用，这里获取的是<code>this</code>锁，因此调用<code>this.wait()</code>。</p></blockquote><h4 id="notify-方法"><a href="#notify-方法" class="headerlink" title="notify 方法"></a>notify 方法</h4><p>如何让等待的线程被重新唤醒，然后从<code>wait()</code>方法返回？答案是在相同的锁对象上调用<code>notify()</code>方法。我们修改<code>addTask()</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">    <span class="keyword">this</span>.notify(); <span class="comment">// 唤醒在 this 锁等待的线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="notifyAll-方法"><a href="#notifyAll-方法" class="headerlink" title="notifyAll 方法"></a>notifyAll 方法</h4><p>当有多个线程正在<code>getTask()</code>方法内部的<code>wait()</code>中等待，使用<code>notifyAll()</code>可以将其一次性全部唤醒，而<code>notify()</code>只会唤醒其中一个（具体哪个依赖操作系统，有一定的随机性），通常来说，<code>notifyAll()</code>更安全。有些时候，如果我们的代码逻辑考虑不周，用<code>notify()</code>会导致只唤醒了一个线程，而其他线程可能永远等待下去醒不过来了</p><p>但使用<code>notifyAll</code>需格外注意：</p><ul><li><strong>当前等待的多个线程全部被唤醒，不代表这多个线程全部都会重新获得锁，他们其中只会有一个线程会重新获得锁，并执行<code>wait</code>方法后面的代码。</strong></li></ul><p>例如：开了5个线程一直等待从任务队列里获取任务，随后开了1个线程每0.1秒往任务队列里添加任务，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TaskQueue q = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">        ArrayList&lt;Thread&gt; getTaskTherads = <span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">// 存放线程的 list</span></span><br><span class="line">        <span class="comment">// 开启5个线程 一直等待从任务队列里获取任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  <span class="comment">// 会一直等待 死循环</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            String s = q.getTask();</span><br><span class="line">                            System.out.println(<span class="string">&quot;execute task: &quot;</span> + s);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            getTaskTherads.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启1个线程 每0.1秒往任务队列里添加任务</span></span><br><span class="line">        Thread add = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String s = <span class="string">&quot;task-&quot;</span> + i;</span><br><span class="line">                System.out.println(<span class="string">&quot;add task: &quot;</span> + s);</span><br><span class="line">                q.addTask(s);</span><br><span class="line">                <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">100</span>); &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        add.start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待 add 线程结束后再继续运行 main 线程;</span></span><br><span class="line">        add.join();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// add 线程结束后 因为从任务队列里获取任务的5个线程是一直等待的，一旦任务队列不为空，其就会取出任务，</span></span><br><span class="line">        <span class="comment">// 即使 add 进程结束，获取任务的5个进程也会一直 while 循环 所以这里需要中断这5个进程</span></span><br><span class="line">        <span class="keyword">for</span> (Thread t : getTaskTherads) &#123;</span><br><span class="line">            t.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(s);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();  <span class="comment">// 唤醒所有等待的进程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里，<code>wait()</code>方法返回时需要重新获得<code>this</code>锁。假设当前有3个线程被唤醒，唤醒后，首先要等待执行<code>addTask()</code>的线程结束此方法后，才能释放<code>this</code>锁，随后，这3个线程中只能有一个获取到<code>this</code>锁，剩下2个将继续等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">             <span class="comment">// 释放 this 锁:</span></span><br><span class="line">            <span class="keyword">this</span>.wait();  </span><br><span class="line">            <span class="comment">// 重新获取 this 锁   </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将<code>while</code>改为<code>if</code>,则会出现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queue.isEmpty()) &#123;</span><br><span class="line">             <span class="comment">// 释放 this 锁:</span></span><br><span class="line">            <span class="keyword">this</span>.wait();  </span><br><span class="line">            <span class="comment">// 重新获取 this 锁   </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为，假设任务队列中新加了一个任务，且任务队列中只有一个任务，</p><p>对于5个正在一直等待获取任务的线程，通过<code>notifyAll</code>将其全部唤醒，假设只有线程1重新获取了锁，再执行完<code>return queue.remove();</code>后，此时队列为空，且线程1因为执行完了<code>getTask</code>方法会释放锁，那么对于线程2，因为是<code>if</code>，它会直接执行<code>this.wait</code>下的代码，跳过<code>if</code>判断，直接<code>return queue.remove();</code>，但此刻任务队列可能已经没有任何元素了。</p><p>总结：如果是用<code>while</code>作判断，每次<code>wait</code>被<code>notifyAll</code>唤醒后都要先判断当前队列是否为空，而<code>if</code>做判断时，如果<code>wait</code>被唤醒，则直接执行<code>wait</code>后的代码，获取队列元素。</p><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>从 Java 5开始，引入了一个高级的处理并发的<code>java.util.concurrent</code>包，它提供了大量更高级的并发功能，能大大简化多线程程序的编写。</p><p>我们知道 Java 语言直接提供了<code>synchronized</code>关键字用于加锁，但这种锁一是很重，二是获取时必须一直等待，没有额外的尝试机制。</p><p><code>java.util.concurrent.locks</code>包提供的<code>ReentrantLock</code>用于替代<code>synchronized</code>加锁，我们来看一下传统的<code>synchronized</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用<code>ReentrantLock</code>替代，可以把代码改造为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>synchronized</code>是 Java 语言层面提供的语法，所以我们不需要考虑异常，而<code>ReentrantLock</code>是 Java 代码实现的锁，我们就必须先获取锁，然后在<code>finally</code>中正确释放锁。</p><p>顾名思义，<code>ReentrantLock</code>是可重入锁，它和<code>synchronized</code>一样，一个线程可以多次获取同一个锁。</p><p>和<code>synchronized</code>不同的是，<code>ReentrantLock</code>可以尝试获取锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lock.tryLock(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在尝试获取锁的时候，最多等待1秒。如果1秒后仍未获取到锁，<code>tryLock()</code>返回<code>false</code>，程序就可以做一些额外处理，而不是无限等待下去。</p><p>所以，使用<code>ReentrantLock</code>比直接使用<code>synchronized</code>更安全，线程在<code>tryLock()</code>失败的时候不会导致死锁。</p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>使用<code>ReentrantLock</code>比直接使用<code>synchronized</code>更安全，可以替代<code>synchronized</code>进行线程同步。</p><p>但是，<code>synchronized</code>可以配合<code>wait</code>和<code>notify</code>实现线程在条件不满足时等待，条件满足时唤醒，用<code>ReentrantLock</code>我们怎么编写<code>wait</code>和<code>notify</code>的功能呢？</p><p>答案是使用<code>Condition</code>对象来实现<code>wait</code>和<code>notify</code>的功能。</p><p>我们仍然以<code>TaskQueue</code>为例，把前面用<code>synchronized</code>实现的功能通过<code>ReentrantLock</code>和<code>Condition</code>来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition(); <span class="comment">// 从 lock 获取 condition</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queue.add(s);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> queue.remove();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，<strong>使用<code>Condition</code>时，引用的<code>Condition</code>对象必须从<code>Lock</code>实例的<code>newCondition()</code>返回，这样才能获得一个绑定了<code>Lock</code>实例的<code>Condition</code>实例</strong>。</p><p><code>Condition</code>提供的<code>await()</code>、<code>signal()</code>、<code>signalAll()</code>原理和<code>synchronized</code>锁对象的<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>是一致的，并且其行为也是一样的：</p><ul><li><code>await()</code>会释放当前锁，进入等待状态；</li><li><code>signal()</code>会唤醒某个等待线程；</li><li><code>signalAll()</code>会唤醒所有等待线程；</li><li>唤醒线程从<code>await()</code>返回后需要重新获得锁。</li></ul><p>此外，和<code>tryLock()</code>类似，<code>await()</code>可以在等待指定时间后，如果还没有被其他线程通过<code>signal()</code>或<code>signalAll()</code>唤醒，可以自己醒来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition.await(<span class="number">1</span>, TimeUnit.SECOND)) &#123;</span><br><span class="line">    <span class="comment">// 被其他线程唤醒</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 指定时间内没有被其他线程唤醒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，使用<code>Condition</code>配合<code>Lock</code>，我们可以实现更灵活的线程同步。</p><h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p>前面讲到的<code>ReentrantLock</code>保证了只有一个线程可以执行临界区代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counts[index] += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] get() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(counts, counts.length);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有些时候，这种保护有点过头。因为我们发现，任何时刻，只允许一个线程修改，也就是调用<code>inc()</code>方法是必须获取锁，但是，<code>get()</code>方法只读取数据，不修改数据，它实际上允许多个线程同时调用。</p><p>实际上我们想要的是：允许多个线程同时读，但只要有一个线程在写，其他线程就必须等待：</p><table><thead><tr><th align="left"></th><th align="left">读</th><th align="left">写</th></tr></thead><tbody><tr><td align="left">读</td><td align="left">允许</td><td align="left">不允许</td></tr><tr><td align="left">写</td><td align="left">不允许</td><td align="left">不允许</td></tr></tbody></table><p>使用<code>ReadWriteLock</code>可以解决这个问题，它保证：</p><ul><li>只允许一个线程写入（其他线程既不能写入也不能读取）；</li><li>没有写入时，多个线程允许同时读（提高性能）。</li></ul><p>用<code>ReadWriteLock</code>实现这个功能十分容易。我们需要创建一个<code>ReadWriteLock</code>实例，然后分别获取读锁和写锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock rwlock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock rlock = rwlock.readLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock wlock = rwlock.writeLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        wlock.lock(); <span class="comment">// 加写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counts[index] += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            wlock.unlock(); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] get() &#123;</span><br><span class="line">        rlock.lock(); <span class="comment">// 加读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(counts, counts.length);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rlock.unlock(); <span class="comment">// 释放读锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把读写操作分别用读锁和写锁来加锁，在读取时，多个线程可以同时获得读锁，这样就大大提高了并发读的执行效率。</p><p>使用<code>ReadWriteLock</code>时，适用条件是同一个数据，有大量线程读取，但仅有少数线程修改。</p><p>例如，一个论坛的帖子，回复可以看做写入操作，它是不频繁的，但是，浏览可以看做读取操作，是非常频繁的，这种情况就可以使用<code>ReadWriteLock</code>。</p><h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><p>前面介绍的<code>ReadWriteLock</code>可以解决多线程同时读，但只有一个线程能写的问题。</p><p>如果我们深入分析<code>ReadWriteLock</code>，会发现它有个潜在的问题：如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种悲观的读锁。</p><p>要进一步提升并发执行效率，Java 8引入了新的读写锁：<code>StampedLock</code>。</p><p><code>StampedLock</code>和<code>ReadWriteLock</code>相比，改进之处在于：<strong>读的过程中也允许获取写锁后写入</strong>！这样一来，我们读的数据就可能不一致，所以，需要一点额外的代码来判断读的过程中是否有写入，这种读锁是一种乐观锁。</p><p>乐观锁的意思就是乐观地估计读的过程中大概率不会有写入，因此被称为乐观锁。反过来，悲观锁则是读的过程中拒绝有写入，也就是写入必须等待。<strong>显然乐观锁的并发效率更高，但一旦有小概率的写入导致读取的数据不一致，需要能检测出来，再读一遍就行。</strong></p><p>我们来看例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StampedLock stampedLock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">double</span> deltaY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = stampedLock.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x += deltaX;</span><br><span class="line">            y += deltaY;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stampedLock.unlockWrite(stamp); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = stampedLock.tryOptimisticRead(); <span class="comment">// 获得一个乐观读锁</span></span><br><span class="line">        <span class="comment">// 注意下面两行代码不是原子操作</span></span><br><span class="line">        <span class="comment">// 假设 x,y = (100,200)</span></span><br><span class="line">        <span class="keyword">double</span> currentX = x;</span><br><span class="line">        <span class="comment">// 此处已读取到 x=100，但 x,y 可能被写线程修改为(300,400)</span></span><br><span class="line">        <span class="keyword">double</span> currentY = y;</span><br><span class="line">        <span class="comment">// 此处已读取到 y，如果没有写入，读取是正确的(100,200)</span></span><br><span class="line">        <span class="comment">// 如果有写入，读取是错误的(100,400)</span></span><br><span class="line">        <span class="keyword">if</span> (!stampedLock.validate(stamp)) &#123; <span class="comment">// 检查乐观读锁后是否有其他写锁发生,有的话 则再用悲观锁读一遍</span></span><br><span class="line">            stamp = stampedLock.readLock(); <span class="comment">// 获取一个悲观读锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentX = x;</span><br><span class="line">                currentY = y;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stampedLock.unlockRead(stamp); <span class="comment">// 释放悲观读锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和<code>ReadWriteLock</code>相比，写入的加锁是完全一样的，不同的是读取。注意到<strong>首先我们通过<code>tryOptimisticRead()</code>获取一个乐观读锁，并返回版本号</strong>。接着进行读取，读取完成后，我们<strong>通过<code>validate()</code>去验证版本号</strong>，如果在读取过程中没有写入，版本号不变，验证成功，我们就可以放心地继续后续操作。如果在读取过程中有写入，版本号会发生变化，验证将失败。在失败的时候，我们再通过获取悲观读锁再次读取。由于写入的概率不高，程序在绝大部分情况下可以通过乐观读锁获取数据，极少数情况下使用悲观读锁获取数据。</p><blockquote><p>注意一开始用乐观锁读入时，允许其他线程获取写锁后写入，但这样会导致读的数据就可能不一致，所以需要判断读的过程中是否有写入（允许写入和是否有写入是两回事）</p><p>若有写入则再通过获取悲观读锁再次读取，使用悲观锁读取时不允许其他线程获取写锁后写入。</p></blockquote><p>可见，<code>StampedLock</code>把读锁细分为乐观读和悲观读，能进一步提升并发效率。但这也是有代价的：一是代码更加复杂，二是**<code>StampedLock</code>是不可重入锁，不能在一个线程中反复获取同一个锁**。</p><p><code>StampedLock</code>还提供了更复杂的将悲观读锁升级为写锁的功能，它主要使用在 if-then-update 的场景：即先读，如果读的数据满足条件，就返回，如果读的数据不满足条件，再尝试写。</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a><a href="https://zhuanlan.zhihu.com/p/98593407">Semaphore</a></h3><p>前面我们讲了各种锁的实现，本质上锁的目的是保护一种受限资源，保证同一时刻只有一个线程能访问（ReentrantLock），或者只有一个线程能写入（ReadWriteLock）。</p><p>还有一种受限资源，它需要保证同一时刻最多有 N 个线程能访问，比如同一时刻最多创建100个数据库连接，最多允许10个用户下载等。</p><p>这种限制数量的锁，如果用 Lock 数组来实现，就太麻烦了，这种情况就可以使用<code>Semaphore</code>。</p><h4 id="1-Semaphore-是什么"><a href="#1-Semaphore-是什么" class="headerlink" title="1. Semaphore 是什么"></a>1. Semaphore 是什么</h4><p>Semaphore 通常我们叫它信号量， 可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源。</p><p>可以把它简单的理解成我们停车场入口立着的那个显示屏，每有一辆车进入停车场显示屏就会显示剩余车位减1，每有一辆车从停车场出去，显示屏上显示的剩余车辆就会加1，当显示屏上的剩余车位为0时，停车场入口的栏杆就不会再打开，车辆就无法进入停车场了，直到有一辆车从停车场出去为止。</p><h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><p>通常用于那些资源有明确访问数量限制的场景，常用于限流 。</p><p>比如：数据库连接池，同时进行连接的线程有数量限制，连接不能超过一定的数量，当连接达到了限制数量后，后面的线程只能排队等前面的线程释放了数据库连接才能获得数据库连接。</p><p>比如：停车场场景，车位数量有限，同时只能容纳多少台车，车位满了之后只有等里面的车离开停车场外面的车才可以进入。</p><h4 id="3-Semaphore-常用方法说明"><a href="#3-Semaphore-常用方法说明" class="headerlink" title="3. Semaphore 常用方法说明"></a>3. Semaphore 常用方法说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">acquire()  </span><br><span class="line">获取一个令牌，在获取到令牌、或者被其他线程调用中断之前线程一直处于阻塞状态。</span><br><span class="line"></span><br><span class="line">acquire(<span class="keyword">int</span> permits)  </span><br><span class="line">获取一个令牌，在获取到令牌、或者被其他线程调用中断、或超时之前线程一直处于阻塞状态。</span><br><span class="line">    </span><br><span class="line">acquireUninterruptibly() </span><br><span class="line">获取一个令牌，在获取到令牌之前线程一直处于阻塞状态（忽略中断）。</span><br><span class="line">    </span><br><span class="line">tryAcquire()</span><br><span class="line">尝试获得令牌，返回获取令牌成功或失败，不阻塞线程。</span><br><span class="line"></span><br><span class="line">tryAcquire(<span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">尝试获得令牌，在超时时间内循环尝试获取，直到尝试获取成功或超时返回，不阻塞线程。</span><br><span class="line"></span><br><span class="line">release()</span><br><span class="line">释放一个令牌，唤醒一个获取令牌不成功的阻塞线程。</span><br><span class="line"></span><br><span class="line">hasQueuedThreads()</span><br><span class="line">等待队列里是否还存在等待线程。</span><br><span class="line"></span><br><span class="line">getQueueLength()</span><br><span class="line">获取等待队列里阻塞的线程数。</span><br><span class="line"></span><br><span class="line">drainPermits()</span><br><span class="line">清空令牌把可用令牌数置为<span class="number">0</span>，返回清空令牌的数量。</span><br><span class="line"></span><br><span class="line">availablePermits()</span><br><span class="line">返回可用的令牌数量。</span><br></pre></td></tr></table></figure><h4 id="4-用-semaphore-实现停车场提示牌功能"><a href="#4-用-semaphore-实现停车场提示牌功能" class="headerlink" title="4. 用 semaphore 实现停车场提示牌功能"></a>4. 用 semaphore 实现停车场提示牌功能</h4><p>每个停车场入口都有一个提示牌，上面显示着停车场的剩余车位还有多少，当剩余车位为0时，不允许车辆进入停车场，直到停车场里面有车离开停车场，这时提示牌上会显示新的剩余车位数。</p><p><strong>业务场景 ：</strong></p><p>1、停车场容纳总停车量10。</p><p>2、当一辆车进入停车场后，显示牌的剩余车位数响应的减1.</p><p>3、每有一辆车驶出停车场后，显示牌的剩余车位数响应的加1。</p><p>4、停车场剩余车位不足时，车辆只能在外面等待。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停车场同时容纳的车辆10</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟100辆车进入停车场</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            </span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;====&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;来到停车场&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(semaphore.availablePermits()==<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;车位不足，请耐心等待&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        semaphore.acquire();<span class="comment">//获取令牌尝试进入停车场</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;成功进入停车场&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));<span class="comment">//模拟车辆在停车场停留的时间</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;驶出停车场&quot;</span>);</span><br><span class="line">                        semaphore.release();<span class="comment">//释放令牌，腾出停车场车位</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,i+<span class="string">&quot;号车&quot;</span>);</span><br><span class="line"></span><br><span class="line">            thread.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Concurrent-集合"><a href="#Concurrent-集合" class="headerlink" title="Concurrent 集合"></a>Concurrent 集合</h3><p>我们在前面已经通过<code>ReentrantLock</code>和<code>Condition</code>实现了一个<code>BlockingQueue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queue.add(s);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> queue.remove();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BlockingQueue</code>的意思就是说，<strong>当一个线程调用这个<code>TaskQueue</code>的<code>getTask()</code>方法时，该方法内部可能会让线程变成等待状态，直到队列条件满足不为空，线程被唤醒后，<code>getTask()</code>方法才会返回</strong>。</p><p>因为<code>BlockingQueue</code>非常有用，所以我们不必自己编写，可以直接使用 Java 标准库的<code>java.util.concurrent</code>包提供的线程安全的集合：<code>ArrayBlockingQueue</code>。</p><p>除了<code>BlockingQueue</code>外，针对<code>List</code>、<code>Map</code>、<code>Set</code>、<code>Deque</code>等，<code>java.util.concurrent</code>包也提供了对应的并发集合类。我们归纳一下：</p><table><thead><tr><th align="left">interface</th><th align="left">non-thread-safe</th><th align="left">thread-safe</th></tr></thead><tbody><tr><td align="left">List</td><td align="left">ArrayList</td><td align="left">CopyOnWriteArrayList</td></tr><tr><td align="left">Map</td><td align="left">HashMap</td><td align="left">ConcurrentHashMap</td></tr><tr><td align="left">Set</td><td align="left">HashSet / TreeSet</td><td align="left">CopyOnWriteArraySet</td></tr><tr><td align="left">Queue</td><td align="left">ArrayDeque / LinkedList</td><td align="left">ArrayBlockingQueue / LinkedBlockingQueue</td></tr><tr><td align="left">Deque</td><td align="left">ArrayDeque / LinkedList</td><td align="left">LinkedBlockingDeque</td></tr></tbody></table><p>使用这些并发集合与使用非线程安全的集合类完全相同。我们以<code>ConcurrentHashMap</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 在不同的线程读写:</span></span><br><span class="line">map.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">map.get(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>因为所有的同步和加锁的逻辑都在集合内部实现，对外部调用者来说，只需要正常按接口引用，其他代码和原来的非线程安全代码完全一样。即当我们需要多线程访问时，把：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>就可以了。</p><p><code>java.util.Collections</code>工具类还提供了一个旧的线程安全集合转换器，可以这么用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map unsafeMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map threadSafeMap = Collections.synchronizedMap(unsafeMap);</span><br></pre></td></tr></table></figure><p>但是它实际上是用一个包装类包装了非线程安全的<code>Map</code>，然后对所有读写方法都用<code>synchronized</code>加锁，这样获得的线程安全集合的性能比<code>java.util.concurrent</code>集合要低很多，所以不推荐使用。</p><h3 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h3><h4 id="Atomic-简介"><a href="#Atomic-简介" class="headerlink" title="Atomic 简介"></a>Atomic 简介</h4><p><strong>解决并发的<a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8&spm=1001.2101.3001.7020">线程安全</a>问题有两种方式：</strong></p><ol><li><strong>等待唤醒机制</strong><br>如果抢不到锁，就将线程挂起，当锁释放的时候，然后将其唤醒重新抢锁。</li><li><strong>自旋 CAS</strong><br>自旋就是设置循环 CAS 抢锁的意思，当 CAS 成功的时候才会退出循环</li></ol><table><thead><tr><th>名称</th><th>适用场景</th></tr></thead><tbody><tr><td>等待唤醒机制</td><td>当长时间都无法抢到锁的时候，还是将线程挂起，然后等待唤醒的好。因为等待和唤醒牵扯到线程挂起和切换，会导致从用户态到内核态的切换，并且线程切换会导致上下文的切换，现场保存什么的，会比较浪费资源</td></tr><tr><td>自旋 CAS</td><td>当短时间内就可以获取到锁的时候，自旋 CAS 比较合适，短时间的自旋 CAS 肯定会比线程切换消耗的资源要少，如果要是时间长的话，就不太划算了，因为自旋 CAS 会一直占用 CPU</td></tr></tbody></table><p><strong>Atomic 原子类就是利用自旋 CAS 来保证线程安全的。</strong></p><p>我们以<code>AtomicInteger</code>为例，它提供的主要操作有：</p><ul><li>增加值并返回新值：<code>int addAndGet(int delta)</code></li><li>加1后返回新值：<code>int incrementAndGet()</code></li><li>获取当前值：<code>int get()</code></li><li>用 CAS 方式设置：<code>int compareAndSet(int expect, int update)</code></li></ul><h4 id="Atomic-例子"><a href="#Atomic-例子" class="headerlink" title="Atomic 例子"></a>Atomic 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// lock 加锁方式</span></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAgeByLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        id++;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Atomic 原子类方式</span></span><br><span class="line">    AtomicLong atolong = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atolong.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>如果我们自己通过 CAS 编写<code>incrementAndGet()</code>，它大概长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">(AtomicInteger <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prev, next;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        prev = <span class="keyword">var</span>.get();</span><br><span class="line">        next = prev + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( ! <span class="keyword">var</span>.compareAndSet(prev, next));</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS 是指，在这个操作中，如果<code>AtomicInteger</code>的当前值是<code>prev</code>，即<strong>内存中的值没变</strong>，那么就更新为<code>next</code>，返回<code>true</code>。如果<code>AtomicInteger</code>的当前值不是<code>prev</code>，即<strong>内存中的值变了</strong>，就什么也不干，返回<code>false</code>。通过 CAS 操作并配合<code>do ... while</code>循环，即使其他线程修改了<code>AtomicInteger</code>的值，最终的结果也是正确的。</p><p>我们利用<code>AtomicLong</code>可以编写一个多线程安全的全局唯一 ID 生成器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line">    AtomicLong <span class="keyword">var</span> = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span>.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，我们并不需要直接用<code>do ... while</code>循环调用<code>compareAndSet</code>实现复杂的并发操作，而是用<code>incrementAndGet()</code>这样的封装好的方法，因此，使用起来非常简单。</p><p>在高度竞争的情况下，还可以使用 Java 8提供的<code>LongAdder</code>和<code>LongAccumulator</code>。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>使用<code>java.util.concurrent.atomic</code>提供的原子操作可以简化多线程编程：</p><ul><li>原子操作实现了无锁的线程安全；</li><li>适用于计数器，累加器等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础课</title>
      <link href="/2024/07/20/Linux%20%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
      <url>/2024/07/20/Linux%20%E5%9F%BA%E7%A1%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>TARGET DECK: Temp</p><h1 id="Linux-基础课"><a href="#Linux-基础课" class="headerlink" title="Linux 基础课"></a>Linux 基础课</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="1-文件结构"><a href="#1-文件结构" class="headerlink" title="1.文件结构"></a>1.文件结构</h3><p>(1) / 根目录 bin 可执行文件<br>(2) etc 配置文件<br>(3) var/log 日志<br>(4) lib 头文件、各种库<br>(5)  home/acs 用户文件夹<br>(6) proc 进程相关的信息</p><h3 id="2-路径问题"><a href="#2-路径问题" class="headerlink" title="2.路径问题"></a>2.路径问题</h3><p>(1) ./ 是当前目录<br>(2) ../ 是上一级目录<br>(3) / 是根目录<br>(4) ~/ 是家目录（即用户目录）</p><h3 id="3-常用文件管理命令"><a href="#3-常用文件管理命令" class="headerlink" title="3.常用文件管理命令"></a>3.常用文件管理命令</h3><ol><li><p>ctrl c : 取消命令，并且换行</p></li><li><p>ctrl u : 清空本行命令</p></li><li><p>history : 输出历史输入命令</p></li><li><p>方向键 ↑ 是输入上一次输入的命令</p></li><li><p>tab 键 ：可以补全命令和文件名，如果补全不了快速按两下 tab 键，可以显示备选选项</p></li><li><p>ls : 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p><blockquote><p>ls -l :  查看所有文件信息<br>ls -lh : 文件信息 30952-&gt;31k 更加人性化<br>ls -a : 查看以点开头的隐藏文件 </p></blockquote></li><li><p>cd XXX : 进入 XXX 目录下。</p><ul><li>cd .. 返回上层目录</li><li>cd - 返回上一个待过的目录</li></ul></li><li><p>find a : 展示 a 文件夹里有啥</p></li><li><p>cat XXX : 展示文件 XXX 中的内容 只能看文件的内容 不能看文件夹</p></li><li><p>pwd : 显示当前路径</p></li><li><p>cp XXX YYY : 将 XXX 文件复制成 YYY，XXX 和 YYY 可以是一个路径，</p><blockquote><p>eg1: cp a/tmp.txt  b/ 就是将 a 文件夹下的 tmp.txt 移动到 b 文件夹下并命名为 tmp.txt<br>eg2: cp a/tmp.txt  b/tmp2.txt 就是将 a 文件夹下的 tmp.txt 移动到 b 文件夹下并命名为 tmp2.txt<br>eg3: cp a b -r 将 a 整个文件夹复制到 b 文件夹里 (当前文件夹内有 b 文件夹）<br>eg4: cp a c -r 将 a 在当前文件夹以 c 为命名重新复制一份 (当前文件夹内无 c 文件夹）</p></blockquote></li><li><p>mv XXX YYY : 将 XXX 文件移动到 YYY，和 cp 命令一样，XXX 和 YYY 可以是一个路径；<strong>重命名</strong>也是用这个命令 </p><blockquote><p>eg1: mv a/tmp.txt b/  只移动</p><p>eg2: mv a/tmp.txt b/tmp2.txt  移动加重命名</p><p>eg3: mv tmp.txt tmp2.txt 只重命名</p></blockquote></li><li><p>mkdir XXX : 创建文件夹  </p><blockquote><p> eg1: mkdir /home/acs/a/b   以绝对路径的方式在 a 文件夹内创建 b 文件夹(home,acs,a 文件夹都存在)</p><p> eg2  mkdir a/b/c/d -p  在 a 文件夹下连续创建嵌套的 b,c,d 文件夹  任意一层存在了则跳过创建</p></blockquote></li><li><p>touch XXX : 创建一个文件</p></li><li><p>rm XXX : 删除普通文件;  rm XXX -r: 删除文件夹 </p><blockquote><p>eg1: rm t1.txt t2.txt 删除两个文件 支持正则表达式 即 rm t1.txt t2.txt -&gt; rm *.txt</p><p>eg2: rm a/* 删除 a 文件夹下所有的东西 但不删除 a 文件夹</p></blockquote></li><li><p>复制文本</p><pre><code>windows/Linux 下：Ctrl + insert，Mac 下：command + c</code></pre></li><li><p>粘贴文本</p><pre><code>windows/Linux 下：Shift + insert，Mac 下：command + v</code></pre></li></ol><h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1.功能"></a>1.功能</h3><ol><li>分屏。</li><li>允许断开 Terminal 连接后，继续运行进程。</li></ol><h3 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a>2.结构</h3><ul><li><p>一个 tmux 可以包含多个 session，一个 session 可以包含多个 window，一个 window 可以包含多个 pane，每个 pane 都可以打开一个 shell 对话框</p><blockquote><p>tmux：<br>session 0：<br>  window 0：</p><pre><code>  pane 0  pane 1  pane 2  ...</code></pre><p>  window 1<br>  window 2<br>  …<br>session 1<br>session 2<br>…</p></blockquote></li></ul><h3 id="3-操作"><a href="#3-操作" class="headerlink" title="3.操作"></a>3.操作</h3><ol><li><p>tmux：新建一个 session，其中包含一个 window，window 中包含一个 pane，pane 里打开了一个 shell 对话框。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动tmux 默认为自增的编号</span></span><br><span class="line">tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命名tmux</span></span><br><span class="line">tmux new -s &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可看到当前所有的tmux伪窗口</span></span><br><span class="line">tmux ls <span class="comment"># 注意一个每个用户的tmux列表是不互通的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出tmux伪窗口</span></span><br><span class="line">tmux detach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重接会话 </span></span><br><span class="line">tmux attach -t 0  <span class="comment"># 使用伪窗口编号</span></span><br><span class="line">tmux attach -t xiaoqi <span class="comment"># 使用伪窗口名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死对话</span></span><br><span class="line">tmux kill-session -t 0 <span class="comment"># 使用会话编号</span></span><br><span class="line">tmux kill-session -t &lt;name&gt; <span class="comment"># 使用会话名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换会话</span></span><br><span class="line">tmux switch -t 0 <span class="comment"># 使用会话编号</span></span><br><span class="line">tmux switch -t &lt;session-name&gt; <span class="comment"># 使用会话名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名会话</span></span><br><span class="line">tmux rename-session -t 0 &lt;new-name&gt; <span class="comment"># 使用会话编号</span></span><br></pre></td></tr></table></figure></li><li><p>按下 Ctrl + a 后手指松开，然后按%：将当前 pane 左右平分成两个 pane。</p></li><li><p>按下 Ctrl + a 后手指松开，然后按”（注意是双引号”）：将当前 pane 上下平分成两个 pane。</p></li><li><p>Ctrl + d：关闭当前 pane；如果当前 window 的所有 pane 均已关闭，则自动关闭 window；如果当前 session 的所有 window 均已关闭，则自动关闭 session。</p></li><li><p>鼠标点击可以选 pane。</p></li><li><p>按下 ctrl + a 后手指松开，然后按方向键：选择相邻的 pane。</p></li><li><p>鼠标拖动 pane 之间的分割线，可以调整分割线的位置。</p></li><li><p>按住 ctrl + a 的同时按方向键，可以调整 pane 之间分割线的位置。</p></li><li><p>按下 ctrl + a 后手指松开，然后按 z：将当前 pane 全屏/取消全屏。</p></li><li><p>按下 ctrl + a 后手指松开，然后按 d：挂起当前 session。</p></li><li><p>tmux a：打开之前挂起的 session。</p></li><li><p>按下 ctrl + a 后手指松开，然后按 s：选择其它 session。</p></li></ol><blockquote><p>方向键 —— 上：选择上一项 session/window/pane<br>方向键 —— 下：选择下一项 session/window/pane<br>方向键 —— 右：展开当前项 session/window<br>方向键 —— 左：闭合当前项 session/window</p></blockquote><ol start="13"><li><p>按下 Ctrl + a 后手指松开，然后按 c：在当前 session 中创建一个新的 window。</p></li><li><p>按下 Ctrl + a 后手指松开，然后按 w：选择其他 window，操作方法与(12)完全相同。</p></li><li><p>按下 Ctrl + a 后手指松开，然后按 PageUp：翻阅当前 pane 内的内容。</p></li><li><p>鼠标滚轮：翻阅当前 pane 内的内容。</p></li><li><p>在 tmux 中选中文本时，需要按住 shift 键。（仅支持 Windows 和 Linux，不支持 Mac，不过该操作并不是必须的，因此影响不大）</p><blockquote><p>:set nonu 删除行号</p><p>shift + 鼠标选择内容</p><p>Ctrl + insert 复制选中内容</p><p>:set paste 进入粘贴模式</p><p>i 进入编辑模式</p><p>Shift + insert 粘贴内容</p></blockquote></li><li><p>tmux 中复制/粘贴文本的通用方式：</p></li></ol><blockquote><p>(1) 按下 Ctrl + a 后松开手指，然后按[<br>(2) 用鼠标选中文本，被选中的文本会被自动复制到 tmux 的剪贴板<br>(3) 按下 Ctrl + a 后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</p></blockquote><ol start="19"><li><p>关闭对话</p><blockquote><p>使用会话编号或名称<br>tmux kill-session -t 0<br>tmux kill-session -t sessionname</p></blockquote></li></ol><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h3 id="1-功能-1"><a href="#1-功能-1" class="headerlink" title="1.功能"></a>1.功能</h3><ol><li><p>命令行模式下的文本编辑器。</p></li><li><p>根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</p></li><li><p>使用方式：vim filename</p><blockquote><p>如果已有该文件，则打开它。<br>  如果没有该文件，则打开个一个新的文件，并命名为 filename</p></blockquote></li></ol><h3 id="2-模式"><a href="#2-模式" class="headerlink" title="2.模式"></a>2.模式</h3><p>(1) 一般命令模式<br>     默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。<br>(2) 编辑模式<br>     在一般命令模式里按下 i，会进入编辑模式。<br>     按下 ESC 会退出编辑模式，返回到一般命令模式。<br>(3) 命令行模式<br>     在一般命令模式里按下:/?三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>     可以查找、替换、保存、退出、配置编辑器等。</p><h3 id="3-操作-1"><a href="#3-操作-1" class="headerlink" title="3.操作"></a>3.操作</h3><ol><li><p>i：进入编辑模式 </p></li><li><p>ESC：进入一般命令模式</p></li><li><p>h 或 左箭头键：光标向左移动一个字符</p></li><li><p>j 或 向下箭头：光标向下移动一个字符</p></li><li><p>k 或 向上箭头：光标向上移动一个字符</p></li><li><p>l 或 向右箭头：光标向右移动一个字符</p></li><li><p>n&lt;Space&gt;：n 表示数字，按下数字后再按空格，光标会向右移动这一行的 n 个字符</p></li><li><p>0 或 功能键[Home]：光标移动到本行开头</p></li><li><p>$ 或 功能键[End]：光标移动到本行末尾</p></li><li><p>G：光标移动到最后一行</p></li><li><p>:n 或 nG ：n 为数字，光标移动到第 n 行  :即进入命令行模式</p></li><li><p>gg：光标移动到第一行，相当于1G</p></li><li><p>n&lt;Enter&gt;：n 为数字，光标向下移动 n 行</p></li><li><p>/word：向光标之下寻找第一个值为 word 的字符串。</p></li><li><p>?word：向光标之上寻找第一个值为 word 的字符串。</p></li><li><p>n：重复前一个查找操作 往后找</p></li><li><p>N：反向重复前一个查找操作 往前找</p></li><li><p>:n1,n2s/word1/word2/g：n1与 n2为数字，在第 n1行与 n2行之间寻找 word1这个字符串，并将该字符串替换为 word2</p><blockquote><p>eg:  :5,7s/int/double/g 是将5到7行的 int 替换为 double</p></blockquote></li><li><p>:1,$s/word1/word2/g：将全文的 word1替换为 word</p></li><li><p>:1,$s/word1/word2/gc：将全文的 word1替换为 word2，且在<strong>每次替换前</strong>要求用户确认。</p></li><li><p>v：选中文本</p></li><li><p>d：删除选中的文本</p></li><li><p>dd: 删除当前行 带剪贴功能</p></li><li><p>y：复制选中的文本</p></li><li><p>yy: 复制当前行</p></li><li><p>p: 将复制的数据在光标的下一行/下一个位置粘贴</p></li><li><p>u：撤销</p></li><li><p>Ctrl + r：取消撤销</p></li><li><p>Ctrl + z：挂起</p></li><li><p>fg: 恢复挂起</p></li><li><p>大于号 &gt;：将选中的文本整体向右缩进一次</p></li><li><p>小于号 &lt;：将选中的文本整体向左缩进一次</p></li><li><p>:w 保存</p></li><li><p>:w! 强制保存</p></li><li><p>:q 退出</p></li><li><p>:q! 强制退出</p></li><li><p>:wq 保存并退出</p></li><li><p>:set paste 设置成粘贴模式，取消代码自动缩进</p></li><li><p>:set nopaste 取消粘贴模式，开启代码自动缩进</p><blockquote><p>粘贴代码前先设置成粘贴模式，<br>粘贴成功后再取消粘贴模式</p></blockquote></li><li><p>:set nu 显示行号</p></li><li><p>:set nonu 隐藏行号</p></li><li><p>:noh 关闭查找关键词高亮</p></li><li><p>Ctrl + q：当 vim 卡死时，可以取消当前正在执行的命令</p></li></ol><h4 id="3-1-连招"><a href="#3-1-连招" class="headerlink" title="3.1 连招"></a>3.1 连招</h4><ol><li>gg d G：删除全部</li><li>gg = G：将全文代码格式化</li></ol><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4 .异常处理"></a>4 .异常处理</h3><p>每次用 vim 编辑文件时，会自动创建一个.filename.swp 的临时文件。<br>如果打开某个文件时，该文件的 swp 文件已存在，则会报错。此时解决办法有两种：</p><blockquote><p>(1) 找到正在打开该文件的程序，并退出<br>(2) 直接删掉该 swp 文件即可</p></blockquote><h2 id="shell-语法"><a href="#shell-语法" class="headerlink" title="shell 语法"></a>shell 语法</h2><h3 id="1-概论"><a href="#1-概论" class="headerlink" title="1.概论"></a>1.概论</h3><p>shell 是我们通过命令行与操作系统沟通的语言。</p><p>shell 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p><p>Linux 中常见的 shell 脚本有很多种，常见的有：</p><blockquote><p>Bourne Shell(/usr/bin/sh 或/bin/sh)<br>Bourne Again Shell(/bin/bash)<br>C Shell(/usr/bin/csh)<br>K Shell(/usr/bin/ksh)<br>zsh<br>…</p></blockquote><h4 id="1-1-脚本示例"><a href="#1-1-脚本示例" class="headerlink" title="1.1 脚本示例"></a>1.1 脚本示例</h4><p>新建一个 test.sh 文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash  # 文件开头需要写#! /bin/bash，指明bash为脚本解释器。 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-运行方式"><a href="#1-2-运行方式" class="headerlink" title="1.2 运行方式"></a>1.2 运行方式</h4><ul><li><p>作为可执行文件</p><blockquote><p>ls -l test.sh 查看文件信息</p><p>-rw-rw-r– 1 acs acs 33 sep 1 20:16 test.sh</p><p>r（Read，读取权限）<br>w（Write，写入权限）<br>x（eXecute，执行权限）</p><p>前三个 -rw：本人的权限</p><p>中间三个 -rw：同组的权限</p><p>后三个 r–：其他用户的权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh  <span class="comment"># 使脚本具有可执行权限</span></span><br><span class="line"><span class="comment"># 三种运行方式</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh  <span class="comment"># 当前路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ /home/acs/test.sh  <span class="comment"># 绝对路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ ~/test.sh  <span class="comment"># 家目录路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure></li><li><p>用解释器执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ bash test.sh</span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h3><h4 id="2-1-单行注释"><a href="#2-1-单行注释" class="headerlink" title="2.1 单行注释"></a>2.1 单行注释</h4><p>每行中 #之后的内容均是注释 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一行注释</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World&#x27;</span>  <span class="comment">#  这也是注释</span></span><br></pre></td></tr></table></figure><h4 id="2-1-多行注释"><a href="#2-1-多行注释" class="headerlink" title="2.1 多行注释"></a>2.1 多行注释</h4><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>其中 EOF 可以换成其它任意字符串。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">abc</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h3><h4 id="3-1-定义变量"><a href="#3-1-定义变量" class="headerlink" title="3.1 定义变量"></a>3.1 定义变量</h4><p>定义变量，不需要加$符号，例如：</p><blockquote><p>注意等号两边不能有空格</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;yxc&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;yxc&quot;  # 双引号定义字符串</span><br><span class="line">name3=yxc    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><h4 id="3-2-使用变量"><a href="#3-2-使用变量" class="headerlink" title="3.2 使用变量"></a>3.2 使用变量</h4><p>使用变量，需要加上$符号，或者${}符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出yxc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>  <span class="comment"># 输出yxc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>acwing  <span class="comment"># 输出yxcacwing</span></span><br></pre></td></tr></table></figure><h4 id="3-3-只读变量"><a href="#3-3-只读变量" class="headerlink" title="3.3 只读变量"></a>3.3 只读变量</h4><p>使用<strong>readonly</strong>或者<strong>declare</strong>可以将变量变为只读。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line"><span class="built_in">declare</span> -r name  <span class="comment"># 两种写法均可</span></span><br><span class="line"></span><br><span class="line">name=abc  <span class="comment"># 会报错，因为此时name只读</span></span><br></pre></td></tr></table></figure><h4 id="3-4-删除变量"><a href="#3-4-删除变量" class="headerlink" title="3.4 删除变量"></a>3.4 删除变量</h4><p><strong>unset</strong>可以删除变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出空行  不存在的变量即为空行</span></span><br></pre></td></tr></table></figure><h4 id="3-5-变量类型"><a href="#3-5-变量类型" class="headerlink" title="3.5 变量类型"></a>3.5 变量类型</h4><ol><li><p>自定义变量（局部变量）<br>子进程不能访问的变量</p></li><li><p>环境变量（全局变量）<br>子进程可以访问的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:bash   <span class="comment">#  可以直接开一个子进程</span></span><br><span class="line">acs@9e0ebfcd82d7:<span class="built_in">exit</span>     <span class="comment">#  退出当前子进程</span></span><br><span class="line">acs@9e0ebfcd82d7:top      <span class="comment">#  查看当前所有进程</span></span><br><span class="line">acs@9e0ebfcd82d7: pstree [选项]   <span class="comment"># 以树状的形式展示进程信息</span></span><br><span class="line">acs@9e0ebfcd82d7:q          <span class="comment"># 退出查看当前所有进程</span></span><br></pre></td></tr></table></figure><blockquote><p>shift + F 进程列表按内存排序</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230120103502124.png" alt="image-20230120103502124"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7: <span class="built_in">kill</span> [参数] 进程号    <span class="comment"># []代表可选</span></span><br><span class="line">acs@9e0ebfcd82d7: killall [参数] 进程名称</span><br></pre></td></tr></table></figure><p>常用参数： -9   表示强制结束进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 6804   <span class="comment"># 结束id为6804的进程</span></span><br><span class="line">killall sshd   <span class="comment"># 结束所有名为sshd的进程</span></span><br></pre></td></tr></table></figure></li></ol><p>自定义变量改成环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ name=yxc  <span class="comment"># 定义变量</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">export</span> name  <span class="comment"># 第一种方法</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">declare</span> -x name  <span class="comment"># 第二种方法</span></span><br></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">export</span> name=yxc  <span class="comment"># 定义环境变量</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span><br></pre></td></tr></table></figure><h4 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单引号与双引号的区别</strong>：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc  <span class="comment"># 不用引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello, $name \&quot;hh\&quot;&#x27;</span>  <span class="comment"># 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello, <span class="variable">$name</span> \&quot;hh\&quot;&quot;</span>  <span class="comment"># 双引号字符串，输出 hello, yxc &quot;hh&quot;</span></span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;yxc&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span>  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><p><strong>提取子串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;hello, yxc&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:0:5&#125;</span>  <span class="comment"># 提取从0开始的5个字符</span></span><br></pre></td></tr></table></figure><h4 id="3-7-默认变量"><a href="#3-7-默认变量" class="headerlink" title="3.7 默认变量"></a>3.7 默认变量</h4><p>在执行 shell 脚本时，可以向脚本传递参数。$1是第一个参数，$2是第二个参数，以此类推。特殊的，$0是文件名（包含路径）。例如：</p><p>创建文件 test.sh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：&quot;</span><span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：&quot;</span><span class="variable">$4</span></span><br><span class="line">...................</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数：&quot;</span><span class="variable">$&#123;10&#125;</span>  <span class="comment"># 两位需要用&#123;&#125;括上</span></span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh </span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4 .... 10  <span class="comment"># 执行命令时 可传参 一一对应的关系  eg: 1传参给$1  </span></span><br><span class="line">文件名：./test.sh <span class="comment"># 对应执行命令时输入的 ./test.sh</span></span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br><span class="line">.........</span><br><span class="line">第十个参数：10</span><br></pre></td></tr></table></figure><p>其它参数相关变量</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230214095354257.png" alt="image-20230214095354257"></p><blockquote><p>区别：</p><p>1.exit code : 上一条命令的退出状态</p><p>2.$(command) :  获取这条命令的 stdout，即标准输出 command 即为命令</p><p>eg：echo $(ls)  执行脚本时即输出当前目录的文件 </p></blockquote><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<strong>数组下标从0开始</strong></p><h4 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br></pre></td></tr></table></figure><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[4]=yxc  </span><br></pre></td></tr></table></figure><h4 id="4-2-读取数组中某个元素的值"><a href="#4-2-读取数组中某个元素的值" class="headerlink" title="4.2 读取数组中某个元素的值"></a>4.2 读取数组中某个元素的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[index]&#125;</span></span><br><span class="line">eg： </span><br><span class="line">array = (1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-读取整个数组"><a href="#4-3-读取整个数组" class="headerlink" title="4.3 读取整个数组"></a>4.3 读取整个数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br><span class="line">eg：</span><br><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><h4 id="4-4-数组长度"><a href="#4-4-数组长度" class="headerlink" title="4.4 数组长度"></a>4.4 数组长度</h4><p>类似于字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[1000]=yxc  <span class="comment"># 虽然1000位置赋值了 但是数组长度为4 即数组长度为有效位个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><h3 id="5-expr-命令"><a href="#5-expr-命令" class="headerlink" title="5. expr 命令"></a>5. expr 命令</h3><p>expr 命令用于求表达式的值，格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 表达式</span><br></pre></td></tr></table></figure><blockquote><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在 shell 特定的字符前面（发现表达式运行错误时，可以试试<strong>转义</strong>）</li><li>对包含空格和其他特殊字符的字符串要用<strong>引号</strong>括起来</li><li>expr 会在 stdout 中输出结果。如果为逻辑关系表达式，则结果为真，stdout 为1，否则为0。</li><li>expr 同时会在 exit code 返回标识符：如果为逻辑关系表达式，则结果为真，exit code 为0，否则为1。</li></ul></blockquote><h4 id="5-1-字符串表达式"><a href="#5-1-字符串表达式" class="headerlink" title="5.1 字符串表达式"></a>5.1 字符串表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.length STRING </span><br><span class="line"><span class="comment">#返回STRING的长度</span></span><br><span class="line"></span><br><span class="line">2.index STRING CHARSET</span><br><span class="line"><span class="comment"># CHARSET中任意单个字符在STRING中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</span></span><br><span class="line"></span><br><span class="line">3.substr STRING POSITION LENGTH</span><br><span class="line"><span class="comment"># 返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>`  <span class="comment"># ``不是单引号，表示执行该命令，输出12</span></span><br><span class="line">   <span class="comment">#  &quot;$str&quot;加&quot;&quot;是防止str的值里有空格</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd`  <span class="comment"># 输出7，下标从1开始</span></span><br><span class="line"><span class="built_in">echo</span> `expr substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 3`  <span class="comment"># 输出 ell</span></span><br></pre></td></tr></table></figure><h4 id="5-2-整数表达式"><a href="#5-2-整数表达式" class="headerlink" title="5.2 整数表达式"></a>5.2 整数表达式</h4><p>expr 支持普通的算术操作，不支持浮点运算，因为该语言多处理文件，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li>+  -<br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li>/ %<br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li>() 可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> + <span class="variable">$b</span>`  <span class="comment"># 输出7</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> - <span class="variable">$b</span>`  <span class="comment"># 输出-1</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \* <span class="variable">$b</span>`  <span class="comment"># 输出12，*需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> / <span class="variable">$b</span>`  <span class="comment"># 输出0，整除</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> % <span class="variable">$b</span>` <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `expr \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)`  <span class="comment"># 输出20，值为(a + 1) * (b + 1)</span></span><br></pre></td></tr></table></figure><h4 id="5-3-逻辑关系表达式-（支持短路运算）"><a href="#5-3-逻辑关系表达式-（支持短路运算）" class="headerlink" title="5.3 逻辑关系表达式 （支持短路运算）"></a>5.3 逻辑关系表达式 （支持短路运算）</h4><ul><li>|<br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数</li><li>&amp;<br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li><li>&lt; &lt;= = == != &gt;= &gt;<br>比较两端的参数，如果为 true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li>() 可以改变优先级，但需要用反斜杠转义</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \&gt; <span class="variable">$b</span>`  <span class="comment"># 输出0，&gt;需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出1，也可以将特殊字符用引号引起来</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> <span class="string">&#x27;&gt;=&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \&lt;\= <span class="variable">$b</span>`  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$c</span> \&amp; <span class="variable">$d</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \&amp; <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$c</span> \| <span class="variable">$d</span>`  <span class="comment"># 输出5</span></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \| <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><h3 id="6-read-命令"><a href="#6-read-命令" class="headerlink" title="6. read 命令"></a>6. read 命令</h3><p>read 命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code 为1，否则为0。</p><p>参数说明</p><ul><li>-p: 后面可以接提示信息</li><li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">read</span> name  <span class="comment"># 读入name的值</span></span><br><span class="line">acwing yxc  <span class="comment"># 标准输入</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span><br><span class="line">acwing yxc  <span class="comment">#标准输出</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">read</span> -p <span class="string">&quot;Please input your name: &quot;</span> -t 30 name  <span class="comment"># 读入name的值，等待时间30秒</span></span><br><span class="line">Please input your name: acwing yxc  <span class="comment"># 标准输入</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span><br><span class="line">acwing yxc  <span class="comment"># 标准输出</span></span><br></pre></td></tr></table></figure><h3 id="7-echo-命令"><a href="#7-echo-命令" class="headerlink" title="7. echo 命令"></a>7. echo 命令</h3><blockquote><p>man echo 可以查看 echo 的命令</p></blockquote><p>echo 用于输出字符串。命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> STRING</span><br></pre></td></tr></table></figure><h4 id="7-1-显示普通字符串"><a href="#7-1-显示普通字符串" class="headerlink" title="7.1 显示普通字符串"></a>7.1 显示普通字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello AC Terminal&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello AC Terminal  <span class="comment"># 引号可以省略</span></span><br></pre></td></tr></table></figure><h4 id="7-2-显示转义字符"><a href="#7-2-显示转义字符" class="headerlink" title="7.2 显示转义字符"></a>7.2 显示转义字符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello AC Terminal\&quot;&quot;</span>  <span class="comment"># 注意只能使用双引号，如果使用单引号，则不转义</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;Hello AC Terminal\&quot;  <span class="comment"># 也可以省略双引号</span></span><br></pre></td></tr></table></figure><h4 id="7-3-显示变量"><a href="#7-3-显示变量" class="headerlink" title="7.3 显示变量"></a>7.3 显示变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is <span class="variable">$name</span>&quot;</span>  <span class="comment"># 输出 My name is yxc 注意是用双引号</span></span><br></pre></td></tr></table></figure><h4 id="7-4-显示换行"><a href="#7-4-显示换行" class="headerlink" title="7.4 显示换行"></a>7.4 显示换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi\n&quot;</span>  <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;acwing&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><h4 id="7-5-显示不换行"><a href="#7-5-显示不换行" class="headerlink" title="7.5 显示不换行"></a>7.5 显示不换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;acwing&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><h4 id="7-5-显示结果定向至文件"><a href="#7-5-显示结果定向至文件" class="headerlink" title="7.5 显示结果定向至文件"></a>7.5 显示结果定向至文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; output.txt  <span class="comment"># 将内容以覆盖的方式输出到output.txt中</span></span><br></pre></td></tr></table></figure><h4 id="7-6-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-6-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.6 原样输出字符串，不进行转义或取变量(用单引号)"></a>7.6 原样输出字符串，不进行转义或取变量(用单引号)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>\&quot;</span><br></pre></td></tr></table></figure><h4 id="7-7-显示命令的执行结果"><a href="#7-7-显示命令的执行结果" class="headerlink" title="7.7 显示命令的执行结果"></a>7.7 显示命令的执行结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><h3 id="8-printf-命令"><a href="#8-printf-命令" class="headerlink" title="8. printf 命令"></a>8. printf 命令</h3><p>printf 命令用于格式化输出，类似于 C/C++中的 printf 函数。</p><p>默认不会在字符串末尾添加换行符。</p><p><strong>命令格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments...]</span><br></pre></td></tr></table></figure><p><strong>用法示例：</strong></p><p>脚本内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d.\n&quot;</span> 123  <span class="comment"># 占10位，右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f.\n&quot;</span> 123.123321  <span class="comment"># 占10位，保留2位小数，左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;yxc&quot;</span>  <span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span>  2 3 `expr 2 \* 3` <span class="comment"># 表达式的值作为参数</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is yxc</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><h3 id="9-test-命令与判断符号"><a href="#9-test-命令与判断符号" class="headerlink" title="9. test 命令与判断符号[ ]"></a>9. test 命令与判断符号[ ]</h3><h4 id="9-1-逻辑运算符-amp-amp-和"><a href="#9-1-逻辑运算符-amp-amp-和" class="headerlink" title="9.1 逻辑运算符&amp;&amp;和||"></a>9.1 逻辑运算符&amp;&amp;和||</h4><ul><li><p>&amp;&amp; 表示与，|| 表示或</p></li><li><p>二者具有短路原则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr1 &amp;&amp; expr2  <span class="comment">#当expr1为假时，直接忽略expr2</span></span><br><span class="line">expr1 || expr2  <span class="comment">#当expr1为真时，直接忽略expr2</span></span><br></pre></td></tr></table></figure></li><li><p>表达式的 exit code 为0，表示真；为非零，表示假。（与 C/C++中的定义相反）</p><blockquote><p>注意区别：</p><p>expr stdout       1表示真，0表示假（输出过程）</p><p>test exit code    0表示真 非0表示假（进程过程）</p></blockquote></li></ul><h4 id="9-2-test-命令"><a href="#9-2-test-命令" class="headerlink" title="9.2 test 命令"></a>9.2 test 命令</h4><ul><li><p>在命令行中输入 man test，可以查看 test 命令的用法。</p></li><li><p>test 命令用于判断文件类型，以及对变量做比较。</p></li><li><p>test 命令用 exit code 返回结果，而不是使用 stdout。0表示真，非0表示假。</p></li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> 2 -lt 3  <span class="comment"># 为真，返回值为0  -lt等价于小于号</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ ls  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span> <span class="comment">#短路运算实现if else</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">test</span> -e test2.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure><p><strong>文件类型判断</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -e filename  <span class="comment"># 判断文件是否存在</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215084804551.png"> </p><p><strong>文件权限判断</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -r filename  <span class="comment"># 判断文件是否可读</span></span><br></pre></td></tr></table></figure><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085029019.png" alt="image-20230215085029019"></p><p><strong>整数间的比较</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="variable">$a</span> -eq <span class="variable">$b</span>  <span class="comment"># a是否等于b</span></span><br></pre></td></tr></table></figure><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085123279.png" alt="image-20230215085123279"></p><blockquote><p>-eq ：equal（相等）</p><p>-ne ：not equal（不等）</p><p>-gt ：greater than（大于）</p><p>-ge ：greater than or equal（大于或等于）</p><p>-lt ：less than（小于）</p><p>-le ：less than or equal（小于或等于）</p><p>注意：在 shell 中这些符号只能用于整数的比较，不能用于字符串。</p></blockquote><p><strong>字符串比较</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085151868.png" alt="image-20230215085151868"> </p><p><strong>多重条件判定</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -r filename -a -x filename  <span class="comment"># 这里是-a连接两个条件 即两个条件是否同时成立</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215085237161.png" alt="image-20230215085237161"> </p><h4 id="9-3-判断符号"><a href="#9-3-判断符号" class="headerlink" title="9.3 判断符号[ ]"></a>9.3 判断符号[ ]</h4><p>[ ]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  <span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ ls  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">acs@9e0ebfcd82d7:~$ [ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ [ -e test2.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>[ ]内的每一项都要用<strong>空格隔开</strong></p></li><li><p>中括号内的<strong>变量，最好用双引号括起来</strong></p></li><li><p>中括号内的常数，最好用单或双引号括起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;acwing yxc&quot;</span></span><br><span class="line">[ <span class="variable">$name</span> == <span class="string">&quot;acwing yxc&quot;</span> ]  <span class="comment"># 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$name</span>&quot;</span> == <span class="string">&quot;acwing yxc&quot;</span> ]  <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="10-判断语句"><a href="#10-判断语句" class="headerlink" title="10. 判断语句"></a>10. 判断语句</h3><blockquote><p>if…then 形式</p><p>类似于 C/C++中的 if-else 语句。</p></blockquote><h4 id="10-1-单层-if"><a href="#10-1-单层-if" class="headerlink" title="10.1 单层 if"></a>10.1 单层 if</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -gt 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>在范围内</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3在范围内</span><br></pre></td></tr></table></figure><h4 id="10-2-单层-if-else"><a href="#10-2-单层-if-else" class="headerlink" title="10.2 单层 if-else"></a>10.2 单层 if-else</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>不小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3小于4</span><br></pre></td></tr></table></figure><h4 id="10-3-多层-if-elif-elif-else"><a href="#10-3-多层-if-elif-elif-else" class="headerlink" title="10.3 多层 if-elif-elif-else"></a>10.3 多层 if-elif-elif-else</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 3 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> 其他</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h4 id="10-4-case…esac-形式"><a href="#10-4-case…esac-形式" class="headerlink" title="10.4 case…esac 形式"></a>10.4 case…esac 形式</h4><blockquote><p>类似于 C/C++中的 switch 语句。</p></blockquote><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名称 <span class="keyword">in</span></span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  <span class="comment"># 类似于C/C++中的break</span></span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  <span class="comment"># 类似于C/C++中的default</span></span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">    1)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> 其他</span><br><span class="line">        ;;  </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure><h3 id="11-循环语句"><a href="#11-循环语句" class="headerlink" title="11. 循环语句"></a>11. 循环语句</h3><h4 id="11-1-for…in…do…done"><a href="#11-1-for…in…do…done" class="headerlink" title="11.1 for…in…do…done"></a>11.1 for…in…do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> val1 val2 val3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例1，输出 a 2 cc，每个元素一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a 2 cc</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls`    <span class="comment"># 这里`ls` 可以用(ls)替换</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例4，使用{1..10} 或者 {a..z}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;a..z&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-2-for-…-…-…-do…done"><a href="#11-2-for-…-…-…-do…done" class="headerlink" title="11.2 for ((…;…;…)) do…done"></a>11.2 for ((…;…;…)) do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((expression; condition; expression))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，输出1-10，每个数占一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=1; i&lt;=10; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-3-while…do…done-循环"><a href="#11-3-while…do…done-循环" class="headerlink" title="11.3 while…do…done 循环"></a>11.3 while…do…done 循环</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例：文件结束符为 Ctrl+d，输入文件结束符后 read 指令返回 false。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name  <span class="comment"># 每次读入一个变量</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-4-until…do…done-循环"><a href="#11-4-until…do…done-循环" class="headerlink" title="11.4 until…do…done 循环"></a>11.4 until…do…done 循环</h4><blockquote><p>当条件为真时结束。</p></blockquote><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，当用户输入 yes 或者 YES 时结束，否则一直等待读入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;yes&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;YES&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Please input yes/YES to stop this program: &quot;</span> word</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="11-5-break-命令"><a href="#11-5-break-命令" class="headerlink" title="11.5 break 命令"></a>11.5 break 命令</h4><blockquote><p>跳出当前一层循环，注意与 C/C++不同的是：break 不能跳出 case 语句。</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></span><br><span class="line">            8)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">                ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该示例每读入非 EOF 的字符串，会输出一遍1-7。<br>该程序可以输入 Ctrl+d 文件结束符来结束，也可以直接用 Ctrl+c 杀掉该进程。</p><h4 id="11-6-continue-命令"><a href="#11-6-continue-命令" class="headerlink" title="11.6 continue 命令"></a>11.6 continue 命令</h4><blockquote><p>跳出当前循环。</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ `expr <span class="variable">$i</span> % 2` -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><h4 id="11-7-死循环的处理方式"><a href="#11-7-死循环的处理方式" class="headerlink" title="11.7 死循环的处理方式"></a>11.7 死循环的处理方式</h4><p>如果 AC Terminal 可以打开该程序，则输入 Ctrl+c 即可。</p><p>否则可以直接关闭进程：</p><ol><li><p>使用 top 命令找到进程的 PID</p><blockquote><p>shift + F 进程列表按内存排序</p></blockquote></li><li><p>输入 kill -9 PID 即可关掉此进程</p></li></ol><h3 id="12-函数"><a href="#12-函数" class="headerlink" title="12. 函数"></a>12. 函数</h3><ul><li>bash 中的函数类似于 C/C++中的函数，但 return 的返回值与 C/C++不同，返回的是 exit code，取值为0-255，<strong>0表示正常结束</strong>。</li><li>如果想获取函数的输出结果，可以通过 echo 输出到 stdout 中，然后<strong>通过$(function_name)来获取 stdout 中的结果</strong>。</li><li><strong>函数的 return 值可以通过$?来获取</strong>。</li></ul><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">function</span>] <span class="function"><span class="title">func_name</span></span>() &#123;  <span class="comment"># function 关键字可以省略</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-1-不获取-return-值和-stdout-值"><a href="#12-1-不获取-return-值和-stdout-值" class="headerlink" title="12.1 不获取 return 值和 stdout 值"></a>12.1 不获取 return 值和 stdout 值</h4><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func  <span class="comment"># 调用不需要加小括号</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello yxc</span><br></pre></td></tr></table></figure><h4 id="12-2-获取-return-值和-stdout-值"><a href="#12-2-获取-return-值和-stdout-值" class="headerlink" title="12.2 获取 return 值和 stdout 值"></a>12.2 获取 return 值和 stdout 值</h4><blockquote><p>不写 return 时，默认 return 0。</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?   <span class="comment"># 获取上次进程的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;output = <span class="variable">$output</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return = <span class="variable">$ret</span>&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = Hello yxc</span><br><span class="line"><span class="built_in">return</span> = 123</span><br></pre></td></tr></table></figure><h4 id="12-3-函数的输入参数"><a href="#12-3-函数的输入参数" class="headerlink" title="12.3 函数的输入参数"></a>12.3 函数的输入参数</h4><p>在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依此类推。</p><blockquote><p>注意：函数内的$0仍然是文件名，而不是函数名。</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215104731961.png" alt="image-20230215104731961"></p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;  <span class="comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span></span><br><span class="line">    word=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;要进入 func(<span class="variable">$1</span>)函数吗？请输入 y/n：&quot;</span> word</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$word</span>&quot;</span> == <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> -le 0 ] </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">    sum=$(func $(expr <span class="variable">$1</span> - 1))  <span class="comment"># 递归调用 $(expr $1 - 1)可用`expr $1 - 1`替换 </span></span><br><span class="line">    <span class="built_in">echo</span> $(expr <span class="variable">$sum</span> + <span class="variable">$1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure><h4 id="12-4-函数内的局部变量"><a href="#12-4-函数内的局部变量" class="headerlink" title="12. 4 函数内的局部变量"></a>12. 4 函数内的局部变量</h4><ul><li><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p></li><li><p>可以在递归函数中定义局部变量。</p></li></ul><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> 变量名=变量值</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>第一行为函数内的 name 变量，第二行为函数外调用 name 变量，会发现此时该变量不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yxc   <span class="comment">#第一行</span></span><br><span class="line">      <span class="comment">#第二行</span></span><br></pre></td></tr></table></figure><h4 id="13-exit-命令"><a href="#13-exit-命令" class="headerlink" title="13. exit 命令"></a>13. exit 命令</h4><ul><li><p>exit 命令用来退出当前 shell 进程，并返回一个退出状态；<strong>使用$?可以接收这个退出状态</strong>。</p></li><li><p>exit 命令可以接受一个整数值作为参数，代表退出状态。如果不指定，<strong>默认状态值是 0</strong>。</p></li><li><p>exit 退出状态只能是一个介于 0~255 之间的整数，其中<strong>只有 0 表示成功</strong>，其它值都表示失败。</p></li></ul><p>示例：</p><p>创建脚本 test.sh，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]  <span class="comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments not valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7 :~$ chmod +x test.sh </span><br><span class="line">acs@9e0ebfcd82d7 :~$ ./test.sh acwing</span><br><span class="line">arguments valid</span><br><span class="line">acs@9e0ebfcd82d7 :~$ <span class="built_in">echo</span> $?  <span class="comment"># 传入一个参数，则正常退出，exit code 为0</span></span><br><span class="line">0</span><br><span class="line">acs@9e0ebfcd82d7 :~$ ./test.sh </span><br><span class="line">arguments not valid</span><br><span class="line">acs@9e0ebfcd82d7 :~$ <span class="built_in">echo</span> $?  <span class="comment"># 传入参数个数不是1，则非正常退出，exit code 为1</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="13-文件重定向"><a href="#13-文件重定向" class="headerlink" title="13. 文件重定向"></a>13. 文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li>stdin 标准输入，从命令行读取数据，文件描述符为0</li><li>stdout 标准输出，向命令行输出数据，文件描述符为1</li><li>stderr 标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><p><strong>重定向命令列表</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230215103257564.png" alt="image-20230215103257564"> </p><p><strong>输入和输出重定向</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hello \c&quot;</span> &gt; output.txt  <span class="comment"># 将 stdout 重定向到 output.txt 中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;World&quot;</span> &gt;&gt; output.txt  <span class="comment"># 将字符串追加到 output.txt 中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> str &lt; output.txt  <span class="comment"># 从 output.txt 中读取字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>  <span class="comment"># 输出结果：Hello World</span></span><br></pre></td></tr></table></figure><p><strong>同时重定向 stdin 和 stdout</strong></p><p>创建 bash 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(expr <span class="string">&quot;<span class="variable">$a</span>&quot;</span> + <span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建 input.txt，里面的内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7 :~$ chmod +x test.sh  <span class="comment"># 添加可执行权限</span></span><br><span class="line">acs@9e0ebfcd82d7 :~$ ./test.sh &lt; input.txt &gt; output.txt  <span class="comment"># 从 input.txt 中读取内容，将输出写入 output.txt中</span></span><br><span class="line">acs@9e0ebfcd82d7 :~$ cat output.txt  <span class="comment"># 查看 output.txt 中的内容</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="14-引入外部文件"><a href="#14-引入外部文件" class="headerlink" title="14. 引入外部文件"></a>14. 引入外部文件</h3><blockquote><p>类似于 C/C++中的 include 操作，bash 也可以引入其他文件中的代码。</p></blockquote><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename  <span class="comment"># 注意点和文件名之间有一个空格</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>创建 test1.sh，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yxc  <span class="comment"># 定义变量 name</span></span><br></pre></td></tr></table></figure><p>然后创建 test2.sh，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh <span class="comment"># 或 . test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> My name is: <span class="variable">$name</span>  <span class="comment"># 可以使用 test1.sh 中的变量</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7 :~$ chmod +x test2.sh </span><br><span class="line">acs@9e0ebfcd82d7 :~$ ./test2.sh </span><br><span class="line">My name is: yxc</span><br></pre></td></tr></table></figure><h3 id="exit-与-return-的区别"><a href="#exit-与-return-的区别" class="headerlink" title="exit 与 return 的区别"></a>exit 与 return 的区别</h3><ol><li>作用不同。exit 用于在程序运行的过程中随时结束程序，exit 的参数是返回给 OS 的，注意在函数中调用 exit 不是退出函数，而是直接退出执行的脚本文件。exit 是结束一个进程，它将删除进程使用的内存空间，同时把错误信息返回父进程。而 return 是返回函数值并退出函数；</li><li>语义层级不同。return 是语言级别的，它表示了调用堆栈的返回；而 exit 是系统调用级别的，它表示了一个进程的结束；</li><li>使用方法不用。return 一般用在函数方法体内，exit 可以出现在 Shell 脚本中的任意位置。</li><li>如果你用 脚本 a 调用 脚本 b ，要在 a 中判断 b 是否正常返回，就是根据 exit 0 or 1 来识别。执行完 b 后， 判断 $? 就是返回值。如果 shel 脚本中调用的子脚本的 exit，那么会退出子脚本。如果是 source 一个子脚本，里面的 exit 会导致外面的脚本也退出。</li></ol><h3 id="小技巧：如何将服务器中的文件整体复制出来？"><a href="#小技巧：如何将服务器中的文件整体复制出来？" class="headerlink" title="小技巧：如何将服务器中的文件整体复制出来？"></a>小技巧：如何将服务器中的文件整体复制出来？</h3><ol><li><p>退出 tmux</p></li><li><p>cat filename：展示 filename 的文件内容</p></li><li><p>鼠标选中文本开头的若干字符</p></li><li><p>用滚轮滑到文件结尾</p></li><li><p>按住 Shift，同时鼠标点击文件结尾，此时会选中文件所有内容</p><blockquote><p>Windows/Linux 下，按 Ctrl + insert 可以复制全文；Mac 下，按 Command + c 可以复制全文。</p></blockquote></li></ol><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><h3 id="1-ssh-登录"><a href="#1-ssh-登录" class="headerlink" title="1. ssh 登录"></a>1. ssh 登录</h3><h4 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h4><p>远程登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure><blockquote><p>user: 用户名<br>hostname: IP 地址或域名</p></blockquote><p>第一次登录时会提示：</p><p><code>The authenticity of host &#39;123.57.47.211 (123.57.47.211)&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8. Are you sure you want to continue connecting (yes/no/[fingerprint])?</code></p><p>输入 yes，然后回车即可。</p><p>这样会将该服务器的信息记录在<strong>本地</strong><code>~/.ssh/known_hosts</code>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><blockquote><p>退出当前服务器为 Ctrl + d  或者输入命令 exit</p></blockquote><p>默认登录端口号为<code>22</code>。如果想登录某一特定端口：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p <span class="number">22</span></span><br></pre></td></tr></table></figure><h4 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h4><p><strong>本地</strong>创建文件  <code>~/.ssh/config</code></p><p>然后在文件中输入：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">HostName  IP 地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line">Port 端口</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP 地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名 myserver1、myserver2。</p><h4 id="1-3-密钥登录"><a href="#1-3-密钥登录" class="headerlink" title="1.3 密钥登录"></a>1.3 密钥登录</h4><p><strong>本地</strong>创建密钥：（配置秘钥与上面配置文件无关，上面配置文件只是起个别名 方便 ssh 连接）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<code>myserver1</code>服务器。则将公钥中的内容，复制到<code>myserver1</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。</p><p>也可以在本地使用如下命令一键添加公钥：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id myserver1</span><br></pre></td></tr></table></figure><p>**本地用 git bash 配置 ssh 免密登录需要先移动到家目录下 **</p><p><strong>即<code>cd ~</code>,一般为<code>/c/Users/chjm</code></strong></p><h4 id="1-4-执行命令"><a href="#1-4-执行命令" class="headerlink" title="1.4 执行命令"></a>1.4 执行命令</h4><p>命令格式：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname ls -a</span><br><span class="line"># 单引号中的$i 可以求值 双引号不行</span><br><span class="line">ssh myserver <span class="comment">&#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-scp-传文件"><a href="#2-scp-传文件" class="headerlink" title="2. scp 传文件"></a>2. scp 传文件</h3><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h4><p>命令格式：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source destination</span><br></pre></td></tr></table></figure><p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p><p><strong>复制文件：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source1 source2 destination  ## 复制 source1，source2两个文件到目标地址</span><br></pre></td></tr></table></figure><p><strong>复制文件夹：</strong></p><ol><li><p>将本地家目录中的 tmp 文件夹复制到 myserver 服务器中的/home/acs/目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:/home/acs/  <span class="comment"># -r 放在前面</span></span><br></pre></td></tr></table></figure></li><li><p>将本地家目录中的 tmp 文件夹复制到 myserver 服务器中的~/homework/目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure></li><li><p>将 myserver 服务器中的~/homework/文件夹复制到本地的当前路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r myserver:homework .    <span class="comment"># . 代表本地的当前路径下</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>指定服务器的端口号：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P <span class="number">22</span> source1 source2 destination</span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>scp</code>的<code>-r -P</code>等参数尽量加在<code>source</code>和<code>destination</code>之前。</p></blockquote><h3 id="2-使用-scp-配置其他服务器的-vim-和-tmux"><a href="#2-使用-scp-配置其他服务器的-vim-和-tmux" class="headerlink" title="2. 使用 scp 配置其他服务器的 vim 和 tmux"></a>2. 使用 scp 配置其他服务器的 vim 和 tmux</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.vimrc ~/.tmux.conf myserver: # 把配置文件传到云端</span><br></pre></td></tr></table></figure><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li><p><strong>工作区（Working Directory）</strong>：仓库的目录。工作区是独立于各个分支的。</p></li><li><p><strong>暂存区（Staging area）/索引（index）</strong>：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</p></li><li><p><strong>版本库/仓库（Repository）</strong>：存放所有已经提交到本地仓库的代码版本。工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</p></li><li><p>版本结构：树结构，树中每个节点代表一个代码版本。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216172859412.png"> </p><p>Git 的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p></li></ul><h3 id="2-全局设置"><a href="#2-全局设置" class="headerlink" title="2. 全局设置"></a>2. 全局设置</h3><ol><li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git config --global user.email xxx@xxx.com </code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li></ol><h3 id="3-整体流程"><a href="#3-整体流程" class="headerlink" title="3. 整体流程"></a>3. 整体流程</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216164842061.png"></p><ol><li><p><code>git init</code>：将当前目录配置成 git 仓库，信息记录在隐藏的<code>.git</code>文件夹中</p><blockquote><p>注意初始化后，还没有生成提交节点，所以 HEAD 指针指向还未形成的 master 分支</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216174017691.png" alt="image-20230216174017691"></p></li><li><p><code>git add</code>告诉<code>Git</code>，把文件添加到仓库，进行变化跟踪：</p><blockquote><ol><li><p>删除文件a.txt b.txt 后  同样可以使用<code>git add a.txt b.txt</code>将删除后的状态添加到缓存区</p></li><li><p><code>git add -A</code> ：提交所有变化</p></li><li><p><code>git add -u</code>：提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</p></li><li><p><code>git add .  </code>：提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</p></li></ol></blockquote><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216173942581.png" alt="image-20230216173942581" style="zoom:67%;" /></li><li><p><code>git commit -m &quot;给自己看的备注信息&quot;</code>，它首先会移除索引（index）中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。</p><img src="C:\Users\15957\AppData\Roaming\Typora\typora-user-images\image-20230216173829563.png" alt="image-20230216173829563" style="zoom: 67%;" /></li><li><p>添加远程库</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">remote add origin https://github.com/xx/test.git # 在项目文件夹中使用</span></span><br></pre></td></tr></table></figure><p>添加后，远程库的名字就是<code>origin</code>，这是<code>Git</code>默认远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p></li><li><p>把本地库的所有内容推送到远程库上</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支</p><p><code>master</code>推送到远程。由于远程库是空的，我们第一次推送<code>master</code>分支</p><p>时，加上了<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送的远程</p><p>新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关</p><p>联起来，在以后的推送或者拉取时就不需要加<code>-u</code>了。</p></li><li><p>将远程仓库 XXX 下载到当前目录下</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@git.acwing.<span class="keyword">com</span> :xxx/XXX.git</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-流程详解"><a href="#4-流程详解" class="headerlink" title="4. 流程详解"></a>4. 流程详解</h3><h4 id="4-1-几个术语"><a href="#4-1-几个术语" class="headerlink" title="4.1 几个术语"></a>4.1 几个术语</h4><ul><li><p>HEAD：这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</p></li><li><p>Index：index 也被称为 staging area，是指一整套即将被下一个提交的文件集合。他也是将成为<code>HEAD</code>的父亲的那个 commit</p></li><li><p>Working Copy：working copy 代表你正在工作的那个文件集</p></li></ul><p>在下图中，可以看到部分<code>Git</code>命令是如何影响工作区和暂存区（<code>stage</code>，亦称<code>index</code>）的。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230216180553224.png" alt="image-20230216180553224"></p><p>图中左侧为工作区，右侧为版本库。在版本库中标记为<code>index</code>的区域是暂存区（<code>stage</code>，亦称<code>index</code>），标记为<code>master</code>的是<code>master</code>分支所代表的目录树。</p><ul><li><code>HEAD</code>实际是指向指向当前所在的本地分支的一个“游标”。告诉<code>Git</code>当前的工作区在哪一个分支上。</li><li><code>head</code>(小写)是<code>commit</code>对象的引用，每个<code>head</code>都有一个名字（分支名字或者标签名字等等），但是默认情况下，每个叫<code>master</code>的<code>repository</code>都会有一个<code>head</code>, 一个<code>repository</code>可以包含任意数量的<code>head</code>。在任何时候，只要这个<code>head</code>被选择成为<code>current head</code>，那么这个<code>head</code>就成了<code>HEAD</code>,总是大写</li><li>图中的<code>objects</code>标识的区域为<code>Git</code>的对象库，实际位于<code>.git/objects</code>目录下。</li></ul><h4 id="4-2-HEAD-的指向变化"><a href="#4-2-HEAD-的指向变化" class="headerlink" title="4.2  HEAD 的指向变化"></a>4.2  HEAD 的指向变化</h4><ol><li><p>当你第一次<code>checkout</code>一个分支，**<code>HEAD</code>就指向当前分支的最近一个<code>commit</code>(即该分支最后提交的 commit)**，在<code>HEAD</code>中的文件集和在<code>index</code>中的文件集是相同的，在<code>working copy</code>的文件集和<code>HEAD</code>,<code>Index</code>中的是完全相同的。所有三者(<code>HEAD</code>,<code>Index(Staging)</code>,<code>Working Copy</code>)都是相同的文件集。</p><blockquote><p>checkout 作用是修改 HEAD 的指向，变更 Index 区域里的内容，修改 Working Directory(工作区)里的内容</p></blockquote></li><li><p>当你对一个文件执行一次修改，即<code>Working Copy</code>不再和<code>index</code>,<code>head</code>相同，<code>Git</code>会标记这个文件是修改过的。</p></li><li><p>当你执行一个<code>git add</code>, 它就<code>stages the file in the index</code>，此时<code>working copy</code>和<code>index</code>区是相同的，但是他们和<code>HEAD</code>区是不同的。</p></li><li><p>当你执行一个<code>git commit</code>, Git 就创建一个新的<code>commit</code>，**随后<code>HEAD 就</code>指向这个新的<code>commit</code>**，此时<code>index</code>, <code>working copy</code>的状态和<code>HEAD</code>就又完全匹配相同了</p></li></ol><h3 id="5-Git-文件的四种状态"><a href="#5-Git-文件的四种状态" class="headerlink" title="5. Git 文件的四种状态"></a>5. Git 文件的四种状态</h3><ul><li><strong>Untracked</strong>: 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制. 通过<code>git add</code>状态变为<code>Staged</code>.</li><li><strong>Unmodify</strong>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为<code>Modified</code>. 如果使用<code>git rm</code>移出版本库, 则成为<code>Untracked</code>文件</li><li><strong>Modified</strong>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code>可进入暂存<code>staged</code>状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到<code>unmodify</code>状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改</li><li><strong>Staged</strong>: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<code>Unmodify</code>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<code>Modified</code></li></ul><h3 id="6-查看命令"><a href="#6-查看命令" class="headerlink" title="6. 查看命令"></a>6. 查看命令</h3><ol><li><p><code>git status</code>：查看仓库状态</p></li><li><p><code>git diff XX</code>：查看 XX 文件相对于暂存区修改了哪些内容</p><blockquote><p>当工作区有改动，临时区为空，diff 的对比是“工作区与最后一次 commit 提交的仓库的共同文件”；当工作区有改动，临时区不为空，diff 对比的是“工作区与暂存区的共同文件”</p></blockquote></li></ol><h3 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7. 删除文件"></a>7. 删除文件</h3><ol><li><p>场景一：要删除的文件是没有修改过的，即和当前版本库文件的内容相同</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;file&gt;  # 删除工作区文件，并且将这次删除放入暂存区</span><br></pre></td></tr></table></figure><blockquote><p>此时<code>git commit</code>会删除工作区和版本库的文件</p></blockquote></li><li><p>场景二：要删除的文件已经修改过，即和当前版本库文件的内容不相同</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`git rm -f &lt;file&gt; ` # 强制删除工作区和暂存区文件，并且将这次删除放入暂存区</span><br></pre></td></tr></table></figure><blockquote><p>此时<code>git commit</code>会删除工作区和版本库的文件</p></blockquote></li><li><p>场景三：想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;file&gt; # 删除暂存区文件，但保留工作区的文件，并且将这次删除放入暂存区。</span><br></pre></td></tr></table></figure><blockquote><p>此时<code>git commit</code>会导致删除了暂存区和版本库的文件，但保留了工作区的文件</p></blockquote></li></ol><h3 id="8-撤销修改"><a href="#8-撤销修改" class="headerlink" title="8.  撤销修改"></a>8.  撤销修改</h3><ol><li><p>场景一：修改了工作区，未添加到暂存区时，想丢弃本地修改</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file  # 把文件从暂存区域复制到工作区</span><br><span class="line">注意：此时暂存区&lt;file&gt;文件版本为空</span><br></pre></td></tr></table></figure></li><li><p>场景二：修改了工作区，且添加到了暂存区时，想丢弃本地修改</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="number">1</span>. `git <span class="keyword">reset</span> HEAD file`  # 先 取消暂存,就回到了场景一;</span><br><span class="line"><span class="number">2</span>. `git checkout -- file` # 再 把文件从暂存区域复制到工作区</span><br><span class="line"></span><br><span class="line">注意：此时暂存区&lt;file&gt;文件版本为空，这时用暂存区的版本覆盖工作区的版本，则会丢弃本地修改</span><br><span class="line"></span><br><span class="line">方法二（常用）：</span><br><span class="line"><span class="number">1</span>.git <span class="keyword">restore</span> --staged &lt;file&gt;：先 用暂存区的版本覆盖工作区的版本，并将&lt;file&gt;文件的暂存区版本从暂存区移除</span><br><span class="line"><span class="number">2</span>.git <span class="keyword">restore</span> &lt;file&gt;：再 用暂存区的版本覆盖工作区的版本</span><br><span class="line"></span><br><span class="line">注意：此时暂存区&lt;file&gt;文件版本为空，这时用暂存区的版本覆盖工作区的版本，则会丢弃本地修改</span><br></pre></td></tr></table></figure><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。<strong>当我们用<code>HEAD</code>时，表示最新的版本</strong></p></blockquote></li><li><p>场景三：把暂存区的操作提交到了本地 git 库, 想要撤销本次提交</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> --hard ORIG_HEAD  # 强制回滚到未删除版本</span><br></pre></td></tr></table></figure></li><li><p>场景四：把本地 git 库的删除记录推送到了远程服务器 github</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. git <span class="keyword">reset</span> --hard ORIG_HEAD  # 先 强制回滚到未删除版本</span><br><span class="line"><span class="number">2</span>. git push -f    # 再 强制推送</span><br></pre></td></tr></table></figure></li></ol><h3 id="9-版本回退"><a href="#9-版本回退" class="headerlink" title="9. 版本回退"></a>9. 版本回退</h3><h4 id="9-1-查看版本"><a href="#9-1-查看版本" class="headerlink" title="9.1 查看版本"></a>9.1 查看版本</h4><ol><li><p><code>git log</code>：查看当前分支的所有提交版本（结点）  按英文 q 可退出查看状态</p><blockquote><p><code>git log --pretty=oneline</code>：用一行来显示</p></blockquote></li><li><p><code>git reflog</code>：查看 HEAD 指针的移动历史（包括被回滚的版本）</p><blockquote><p><code>git log</code> 与<code>git reflog</code> 的区别：</p><p><code>git log</code> 只会查看当前结点之前在一条分支上的结点</p><p><code>git reflog</code> 会显示 HEAD 指针的移动历史，会包括所有结点</p></blockquote></li></ol><h4 id="9-2-具体场景"><a href="#9-2-具体场景" class="headerlink" title="9.2 具体场景"></a>9.2 具体场景</h4><p>想象这种情况，如果你在2天前提交了一个东西，突然发现这次提交是有问题的，这个时候你有两个选择，要么使用 git revert（推荐），要么使用 git reset。</p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217102408912.png" alt="image-20230217102408912"></p><ul><li><p><strong>上图可以看到 git reset 是会修改版本历史的，他会丢弃掉一些版本历史。</strong></p><p><strong>而 git revert 是根据那个 commit 逆向生成一个新的 commit，版本历史是不会被破坏的。</strong></p><ul><li><p><strong><code>git revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code></strong></p><blockquote><p>比如，我们<code>commit</code>了三个版本（版本一、版本二、 版本三），突然发现版本二有 bug，想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。</p></blockquote></li><li><p><strong><code>git reset</code>是直接将 HEAD 指向的位置改变为之前存在的某个版本, 且目标版本之后提交的版本都会删除</strong></p></li></ul></li><li><p><strong>已经 push 到远程仓库的 commit 不允许 reset</strong>。上面已经讲了，<code>git reset</code>是会丢弃掉<code>commit</code>的，如果<code>commit</code>已经被<code>push</code>到远程仓库上了，也就意味着其他开发人员就可能基于这个<code>commit</code>形成了新的<code>commit</code>，这时你去<code>reset</code>，就会造成其他开发人员的提交历史莫名其妙的丢失，或者其他灾难性的后果。</p></li></ul><h4 id="9-3-具体命令"><a href="#9-3-具体命令" class="headerlink" title="9.3 具体命令"></a>9.3 具体命令</h4><ol><li><code>git reset --hard HEAD^</code> 或<code>git reset --hard HEAD~</code> ：将代码库回滚到上一个版本</li><li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li><li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li><li><code>git reset --hard 版本号</code>：回滚到某一特定版本 <strong>版本号取前七位</strong></li><li><code>git revert -n 版本号</code>：反做之前某一特定版本 </li></ol><h4 id="9-4-checkout-与-reset-的区别"><a href="#9-4-checkout-与-reset-的区别" class="headerlink" title="9.4 checkout 与 reset 的区别"></a>9.4 checkout 与 reset 的区别</h4><h5 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h5><ul><li><p>当你 checkout 分支的时候，git 做了这么三件事情</p><ol><li>将 HEAD 指向那个分支的最后一次 commit</li><li>将 HEAD 指向的 commit 里所有文件的 snapshot 替换掉 Index 区域里原来的内容</li><li>将 Index 区域里的内容填充到 Working Directory 里</li></ol><p>所以你可以发现，HEAD、Index、Working Directory 这个时候里的内容都是一模一样的。</p><p>注意：一般会误解为，Index 中的内容是空的，只有 git add 后才会有东西。实际上不是，Index 里一直是有东西的。</p><p>所以，Git 的所有操作就是对这三个区域的状态（或内容）的操作。</p></li><li><p><strong>带文件参数时</strong></p><p>当执行 git checkout [branch] file 时，checkout 干了这件事情：</p><ol><li>更新了 index 区域里 file 文件的内容</li><li>更新了 working directory 里 file 文件的内容</li></ol></li></ul><h5 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h5><ul><li><p>不带文件参数的 reset</p><p>Git 有三个区域，Git 的所有操作实际上是在操作这三个区域的状态（或内容）。git reset 配合不同的参数，对这三个区域会产生不同的影响。</p><p><code>reset</code>实际上有3个步骤，根据不同的参数可以决定执行到哪个步骤(<code>--soft</code>, <code>--mixed</code>, <code>--hard</code>)。</p><ol><li>改变 HEAD 所指向的 commit(<code>--soft</code>)</li><li>执行第1步，将 Index 区域更新为 HEAD 所指向的 commit 里包含的内容(<code>--mixed</code>)</li><li>执行第1、2步，将 Working Directory 区域更新为 HEAD 所指向的 commit 里包含的内容(<code>--hard</code>)</li></ol></li><li><p><strong>带文件参数时的不带文件参数的 reset</strong></p><p>上面讲到的 git reset 实际上不带参数的，如果带上文件参数，那么效果会是怎样的？</p><ol><li>HEAD 不会动</li><li>将那个 commit 的 snapshot 里的那个文件放到 Index 区域中</li></ol><p>需要注意的是带文件参数的 git reset 没有–hard, –soft 这两个参数。只有–mixed 参数。</p></li></ul><h5 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h5><p><code>reset --hard</code>和<code>checkout</code>貌似很像，都将 HEAD、Index、Working Directory 三个区域的内容整成了一样的，但也是有区别的：</p><ol><li>reset 会把 working directory 里的所有内容都更新掉</li><li>checkout 不会去修改你在 Working Directory 里修改过的文件</li><li>reset 把 branch 移动到 HEAD 指向的地方</li><li>checkout 则把 HEAD 移动到另一个分支</li></ol><p>第二个区别可能有点难以理解，举例来说：假设你有两个分支 master 和 develop，这两个分支指向不一样的 commit，我们现在在 develop 分支上（HEAD 指向的地方）</p><p>如果我们<code>git reset master</code>，那么 develop 就会指向 master 所指向的那个 commit。</p><p>如果我们<code>git checkout master</code>，那么 develop 不会动，<strong>只有 HEAD 会移动</strong>。HEAD 会指向 master。看图：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217104858327.png"> </p><h3 id="10-分支相关"><a href="#10-分支相关" class="headerlink" title="10. 分支相关"></a>10. 分支相关</h3><h4 id="10-1-查看分支"><a href="#10-1-查看分支" class="headerlink" title="10.1 查看分支"></a>10.1 查看分支</h4><ol><li><code>git branch</code>：查看所有分支和当前所处分支</li></ol><h4 id="10-2-创建分支"><a href="#10-2-创建分支" class="headerlink" title="10.2 创建分支"></a>10.2 创建分支</h4><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217075830346.png" alt="image-20230217075830346" style="zoom: 60%;" /> <ol><li><p><code>git branch branch_name</code>：创建新分支 </p><blockquote><p>在 master 分支的后面新建一个 dev 分支</p></blockquote></li><li><p><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支 </p><blockquote><p>在 master 分支的后面新建一个 dev 分支,且 head 指向该分支</p></blockquote></li></ol><h4 id="10-3-删除分支"><a href="#10-3-删除分支" class="headerlink" title="10. 3 删除分支"></a>10. 3 删除分支</h4><ol><li><p><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支  </p><blockquote><p>需要当前分支为其他分支 才可以删除<code>branch_name</code>分支  </p></blockquote></li><li><p><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</p><blockquote><p><code>origin</code>代表云端的意思</p></blockquote></li></ol><h4 id="10-4-切换分支"><a href="#10-4-切换分支" class="headerlink" title="10.4 切换分支"></a>10.4 切换分支</h4><ol><li><p><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</p></li><li><p><code>git checkout HEAD</code> : 切换到当前分支的某一版本</p><blockquote><p>HEAD 为<code>git log</code> 打印的某一版本的前7位版本号</p></blockquote><p>此时通过<code>git branch</code>查看分支，结果如下：</p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307184705916.png" alt="image-20230307184705916"></p><p>若在此版本的基础上<code>git commit</code>了一个版本，</p><p>然后<code>git branch</code>查看分支，结果如下：</p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307184300888.png" alt="image-20230307184300888"></p><p>若想提交在<code>f22f58e</code>的基础上提交的版本<code>f79692e</code></p><p>则需要进行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch temp f79692e  // 1. 依据快照 f79692e 创建 temp 分支</span><br><span class="line">git checkout master      // 2. 切换到 master 分支</span><br><span class="line">git merge temp           // 3. 将 temp 分支合并到 master 分支</span><br></pre></td></tr></table></figure><p>这里合并的时候多半要解决冲突。 </p></li></ol><h4 id="10-5-合并分支"><a href="#10-5-合并分支" class="headerlink" title="10.5 合并分支"></a>10.5 合并分支</h4><ol><li><p><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</p><p><strong>当 master 分支和 dev 分支都对同一文件进行了修改 会导致合并冲突 。</strong><br><strong>例如：</strong></p><p>在 readme.txt 文件中 </p><p>master分支在该文件中加了‘999‘一行文字 并进行了可持续化<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081440124.png" alt="image-20230217081440124" style="zoom: 67%;" /> </p><p>dev分支在该文件中加了’888‘一行文字 并进行了可持续化<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081633316.png" alt="image-20230217081633316" style="zoom:67%;" /></p><p>总体上的结果如下：</p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081743616.png" alt="image-20230217081743616" style="zoom:50%;" /><p>此时将 dev 分支合并到 master 分支上会导致冲突，</p><p>打开readme.txt: <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081933833.png" alt="image-20230217081933833" style="zoom: 67%;" /></p><p>HEAD 表示 head 所指的 master 分支里修改的内容，dev2表示 dev2分支里修改的内容</p><p>对该文件进行手动修改 ，**不需要重新<code>git merger dev</code>**，直接可持续化即可：<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217082149555.png" alt="image-20230217082149555" style="zoom:67%;" /></p><p><strong>手动修改后并可持续化后，会在 master 分支上分别增加了<code>add 888</code>,<code>add 999</code>,以及<code>处理冲突的结点</code>，共三个结点，过程如下如下：</strong></p><p> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217081743616.png" alt="image-20230217081743616" style="zoom:50%;" />             ====》<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217082944739.png" alt="image-20230217082944739" style="zoom: 50%;" /> </p></li><li><p><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并  即拉取云端的内容</p><blockquote><p><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</p></blockquote></li></ol><h3 id="11-远程仓库"><a href="#11-远程仓库" class="headerlink" title="11. 远程仓库"></a>11. 远程仓库</h3><h4 id="11-1-本地与云端关联"><a href="#11-1-本地与云端关联" class="headerlink" title="11.1 本地与云端关联"></a>11.1 本地与云端关联</h4><ol><li><code>git remote add origin git@git.acwing.com :xxx/XXX.git</code>：将本地<strong>仓库关联</strong>到远程仓库</li></ol><h4 id="11-2-本地推送到云端"><a href="#11-2-本地推送到云端" class="headerlink" title="11.2 本地推送到云端"></a>11.2 本地推送到云端</h4><ol><li><p><code>git push [-u] (第一次需要-u 以后不需要)</code> ：将当前分支<strong>推送</strong>到远程仓库</p><blockquote><ol><li><p><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</p></li><li><p><code>git push --set-upstream origin branch_name</code>：若远程仓库无该 branch_name 分支，则可使用该命令在远程仓库创建该分支并同步</p></li><li><p><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</p></li></ol></blockquote></li></ol><h4 id="11-3-云端拉取到本地"><a href="#11-3-云端拉取到本地" class="headerlink" title="11.3 云端拉取到本地"></a>11.3 云端拉取到本地</h4><ol><li><p><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并  即<strong>拉取</strong>云端的内容</p></li><li><p>场景一 ：用云端的<code>branch_name</code>分支与本地的 master 分支进行合并：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin branch_name  # 将远程仓库的`branch_name`分支与本地仓库的当前分支合并</span><br></pre></td></tr></table></figure></li><li><p>场景二：只拉取云端的的<code>dev</code>分支，不合并到<code>本地的 master 分支</code></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法一:</span><br><span class="line"><span class="number">1</span>. git branch branch_name1  # 先 本地创建 branch_name1新分支 </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. git branch --set-upstream-<span class="keyword">to</span>=origin/branch_name1 branch_name2 # 再 将云端的 branch_name1分支与本地的 branch_name2分支对应</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>. git pull   # 最后 拉取云端的内容</span><br><span class="line">    </span><br><span class="line">方法二：</span><br><span class="line">git checkout -t origin/branch_name 将远程的 branch_name 分支拉取到本地</span><br></pre></td></tr></table></figure></li><li><p><code>git checkout -t origin/branch_name</code> ：将远程的<code>branch_name</code><strong>分支拉取</strong>到本地</p></li><li><p><code>git clone git@git.acwing.com :xxx/XXX.git</code>： 将<strong>远程仓库 XXX 下载</strong>到当前目录下</p></li></ol><h3 id="12-stash-缓存"><a href="#12-stash-缓存" class="headerlink" title="12. stash 缓存"></a>12. stash 缓存</h3><h4 id="12-1-应用场景"><a href="#12-1-应用场景" class="headerlink" title="12.1 应用场景"></a>12.1 应用场景</h4><p>当我们开发一个新功能时会先从 master 拉出一个分支 dev，然后在这个 dev 分支下开始写代码开发新功能，就在此时，线上版本 master 出现了 bug，我们应该放下手头上新功能的开发工作先将 master 上的 bug 修复，这个时候 dev 分支下的改动怎么处理？ </p><ul><li>方案1：向 dev 分支提交新功能的代码，然后再切换到 master 下 </li><li>方案2：直接切换到 master 分支下</li></ul><p>首先我们新功能的代码还没开发完成，其次新功能这里还有一些 bug 没解决，就这样把有问题的代码提交到 dev 分支中，虽然可以解决目前我们的处境但不是很妥；但是第二种方案，直接切换，明显更不妥。怎么办？我们好像陷入了困境……</p><p>别急，Git 提供了一个**<code>git stash</code>命令<strong>恰好可以完美解决该问题, 其将当前未提交的修改(即，工作区的修改和暂存区的修改)先暂时储藏起来，这样工作区干净了后，就可以切换切换到 master 分支下拉一个 fix 分支。在完成线上 bug 的修复工作后，</strong>重新切换到 dev 分支<strong>下通过</strong><code>git stash pop</code>**命令将之前储藏的修改取出来，继续进行新功能的开发工作。</p><blockquote><p>注意：<code>git stash pop</code>之前需要重新回到 dev 分支</p></blockquote><h4 id="12-2-相关命令"><a href="#12-2-相关命令" class="headerlink" title="12.2 相关命令"></a>12.2 相关命令</h4><ol><li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li><li><code>git stash list</code>：查看栈中所有元素</li><li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li><li><code>git stash drop</code>：删除栈顶存储的修改</li><li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li></ol><h3 id="13-协作开发"><a href="#13-协作开发" class="headerlink" title="13. 协作开发"></a>13. 协作开发</h3><p>远程仓库上一个 master 分支，一个 dev 分支</p><p>Friend：通过<code>git clone</code>下来的只有 master 分支，需要在本地<code>git checkout -t origin/dev </code>将远程的 dev 分支拉取到本地。</p><p><strong>应用场景：</strong></p><p>Friend：对 readme.txt 做了修改，并 push 到了云端。</p><p>Me：若 Me 也想对 readme.txt 做了修改，需要先<code>git pull</code>拉取一下云端的最新内容才行，不然 Me 修改后 push 会产生冲突。</p><p><strong>删除本地项目命令</strong></p><p>  <code>rm project rf</code></p><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230217190234823.png" alt="image-20230217190234823" style="zoom:67%;" /> <p>rpc：远程过程调用(remote procedure call)</p><h2 id="管道、环境变量与常用命令"><a href="#管道、环境变量与常用命令" class="headerlink" title="管道、环境变量与常用命令"></a>管道、环境变量与常用命令</h2><h3 id="1-管道"><a href="#1-管道" class="headerlink" title="1. 管道"></a>1. 管道</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><p>管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218083029165.png" alt="image-20230218083029165" style="zoom:67%;" /><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs cat | wc -l  <span class="comment"># 统计当前目录下所有 python 文件的总行数</span></span><br></pre></td></tr></table></figure><p>其他命令见下文<strong>常见命令</strong></p><h4 id="1-2-要点"><a href="#1-2-要点" class="headerlink" title="1.2  要点"></a>1.2  要点</h4><ul><li>管道命令仅处理 stdout，会忽略 stderr。</li><li>管道右边的命令必须能接受 stdin。</li><li>多个管道命令可以串联。</li></ul><h4 id="1-3-与文件重定向的区别"><a href="#1-3-与文件重定向的区别" class="headerlink" title="1.3  与文件重定向的区别"></a>1.3  与文件重定向的区别</h4><ul><li>文件重定向左边为命令，右边为文件。</li><li>管道左右两边均为命令，左边有 stdout，右边有 stdin</li></ul><h3 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><p>Linux 系统中会用很多环境变量来记录配置信息。<br>环境变量类似于全局变量，可以被各个进程访问到。我们可以通过修改环境变量来方便地修改系统配置。</p><h4 id="2-2-查看"><a href="#2-2-查看" class="headerlink" title="2.2 查看"></a>2.2 查看</h4><p>列出当前环境下的所有环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env  <span class="comment"># 显示当前用户的变量</span></span><br><span class="line"><span class="built_in">set</span>  <span class="comment"># 显示当前 shell 的变量，包括当前用户的变量;</span></span><br><span class="line"><span class="built_in">export</span>  <span class="comment"># 显示当前导出成用户变量的 shell 变量</span></span><br></pre></td></tr></table></figure><p>输出某个环境变量的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h4 id="2-3-修改"><a href="#2-3-修改" class="headerlink" title="2.3 修改"></a>2.3 修改</h4><p>环境变量的定义、修改、删除操作可以参考 <a href="">shell语法——变量</a>这一节的内容。</p><p>为了将对环境变量的修改应用到未来所有环境下，可以将修改命令放到<code>~/.bashrc</code>文件中。<br>修改完<code>~/.bashrc</code>文件后，记得执行<code>source ~/.bashrc</code>，来将修改应用到当前的<code>bash</code>环境下。</p><p>为何将修改命令放到<code>~/.bashrc</code>，就可以确保修改会影响未来所有的环境呢？</p><ul><li>每次启动<code>bash</code>，都会先执行<code>~/.bashrc</code>。</li><li>每次<code>ssh</code>登陆远程服务器，都会启动一个<code>bash</code>命令行给我们。</li><li>每次<code>tmux</code>新开一个<code>pane</code>，都会启动一个<code>bash</code>命令行给我们。</li><li>所以未来所有新开的环境都会加载我们修改的内容。</li></ul><h4 id="2-4-常见环境变量"><a href="#2-4-常见环境变量" class="headerlink" title="2.4 常见环境变量"></a>2.4 常见环境变量</h4><ol><li><p><code>HOME</code>：用户的家目录。</p></li><li><p><code>PATH</code>：可执行文件（命令）的存储路径。路径与路径之间用<code>:</code>分隔。当某个可执行文件同时出现在多个路径中时，会选择从左到右数第一个路径中的执行。<strong>下列所有存储路径的环境变量，均采用从左到右的优先顺序</strong>。</p><p>例子：</p><p>下图为在<code>~/.bashrc</code>添加一个可执行文件（命令）的存储路径，需要注意以下几点：</p><ul><li>写在<code>.bashrc</code>文件内容的最下方，这样可以覆盖上面的</li><li>路径之间用<code>:</code>分隔</li><li>添加的新路径之后需要加上之前所有的 PATH 路径，即最后需加上<code>$PATH</code></li><li>文件目录添加到当前命令所在文件夹即可</li></ul><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218082757919.png" alt="image-20230218082757919"></p></li><li><p><code>LD_LIBRARY_PATH</code>：用于指定动态链接库(.so 文件)的路径，其内容是以冒号分隔的路径列表。</p><blockquote><ol><li><p><strong>静态库与动态库</strong></p><p><strong>静态库</strong>：这类库的名字一般是 libxxx.a,在使用静态库的情况下，在编译链接可执行文件时，链接器从静态库中复制这些函数和数据，并把它们和应用程序的其他模块组合起来创建最终的可执行文件（.exe）。当发布产品时，只需要发布这个可执行文件，并不需要发布被使用的静态库。</p><p><strong>动态库</strong>：是一种不可执行的二进制程序文件，它允许程序共享执行特殊任务所必需的代码和其他资源。Windows 平台上动态链接库的后缀名是”.dll”，Linux 平台上的后缀名是“.so”。Linux 上动态库一般是 libxxx.so;相对于静态函数库，动态函数库在编译的时候并没有被编译进目标代码中，你的程序执行到相关函数时才调用该函数库里的相应函数，因此动态函数库所产生的可执行文件比较小。由于函数库没有被整合进你的程序，而是程序运行时动态的申请并调用，所以程序的运行环境中必须提供相应的库。动态函数库的改变并不影响你的程序，所以动态函数库的升级比较方便。</p></li><li><p><strong>动态链接库的优点</strong></p></li></ol><ul><li><strong>复用性：</strong>DLL 的编制与具体的编程语言以及编译器无关，不同语言编写的程序只要按照函数调用约定就可以调用同一个 DLL 函数</li><li><strong>可扩展性：</strong>DLL 文件与 EXE 文件独立，只要接口不变，升级程序只需更新 DLL 文件不需要重新编译应用程序</li><li><strong>节省内存：</strong>如果多个应用程序使用同一个 dll，该 dll 的页面只需要存入内存一次，所有的应用程序都可以共享它的页面，从而节省内存</li></ul></blockquote></li><li><p><code>C_INCLUDE_PATH</code>：C 语言的头文件路径，内容是以冒号分隔的路径列表。</p></li><li><p><code>CPLUS_INCLUDE_PATH</code>：CPP 的头文件路径，内容是以冒号分隔的路径列表。</p></li><li><p><code>PYTHONPATH</code>：Python 导入包的路径，内容是以冒号分隔的路径列表。</p></li><li><p><code>JAVA_HOME</code>：jdk 的安装目录。</p></li><li><p><code>CLASSPATH</code>：存放 Java 导入类的路径，内容是以冒号分隔的路径列表。</p></li></ol><h3 id="3-常见命令"><a href="#3-常见命令" class="headerlink" title="3. 常见命令"></a>3. 常见命令</h3><h4 id="3-1-系统状况"><a href="#3-1-系统状况" class="headerlink" title="3.1 系统状况"></a>3.1 系统状况</h4><ol><li><p><code>top</code>：查看所有进程的信息（Linux 的任务管理器）</p><ul><li>打开后，输入<code>M</code>：按使用内存排序</li><li>打开后，输入<code>P</code>：按使用 CPU 排序</li><li>打开后，输入<code>q</code>：退出</li></ul></li><li><p><code>df -h</code>：查看硬盘使用情况</p></li><li><p><code>free -h</code>：查看内存使用情况</p></li><li><p><code>du -sh</code>：查看当前目录占用的硬盘空间</p></li><li><p><code>ps aux</code>：查看所有进程</p><ul><li><code>ps aux | grep match-server </code>  利用管道对进程进行筛选，查看所有进程中名为<code>match-server</code>的进程</li></ul></li><li><p><code>kill -9 pid</code>：杀死编号为 pid 的进程</p><ul><li><p>传递某个具体的信号：<code>kill -s SIGTERM pid</code>  ，<code>SIGTERM</code>对应<code>-15</code>   ，<code>-s</code>指定发送信号</p></li><li><p>信号列表</p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218093022557.png" alt="image-20230218093022557" style="zoom:50%;" /> </li></ul></li><li><p><code>netstat -nt</code>：查看所有网络连接</p></li><li><p><code>w</code>：列出当前登陆的用户</p></li><li><p><code>logout</code>：退出当前用户登录</p></li><li><p><code>ping www.baidu.com</code> ：检查是否连网</p></li></ol><h4 id="3-2-文件权限"><a href="#3-2-文件权限" class="headerlink" title="3.2 文件权限"></a>3.2 文件权限</h4><ol><li><p><code>chmod</code>：修改文件权限</p><ul><li><p><code>chmod +x xxx</code>：给 xxx 添加可执行权限</p></li><li><p><code>chmod -x xxx</code>：去掉 xxx 的可执行权限</p></li></ul></li></ol><ul><li><code>chmod 777 xxx</code>：将 xxx 的权限改成777</li><li><code>chmod 777 xxx -R</code>：递归修改整个文件夹的权限<ul><li><code>chmod +r * -R</code>：给当前目录下的所有文件添加可读权限<blockquote><p>-R 对当前目录中的所有文件和子目录进行相同的权限更改</p></blockquote></li></ul> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218094748691.png" alt="image-20230218094748691" style="zoom:50%;" />  <blockquote><p>r:读;w:写;x:可执行</p></blockquote></li></ul><h4 id="3-3-文件检索"><a href="#3-3-文件检索" class="headerlink" title="3.3 文件检索"></a>3.3 文件检索</h4><ol><li><p><code>find /path/to/directory/ -name &#39;*.py&#39;</code>：搜索某个文件路径下的所有<code>*.py</code>文件</p><blockquote><p><code>find . -name &#39;*.py&#39;</code> ： <code>.</code> 代表当前目录下</p></blockquote></li><li><p><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行。起过滤功能。</p><ul><li><code>ps aux | grep match-server </code>  利用管道对进程进行筛选，查看所有进程中名为<code>match-server</code>的进程</li></ul></li><li><p><code>wc</code>：统计行数、单词数、字节数</p><ul><li>既可以从<code>stdin</code>中直接读入内容；也可以在命令行参数中传入文件名列表；</li><li><code>wc -l</code>：统计行数</li><li><code>wc -w</code>：统计单词数</li><li>`wc -c</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.cpp&#x27;</span> | wc -l &gt; ans.txt <span class="comment"># 统计当前目录下共有多少个以.cpp 结尾的文件，将结果写入 ans.txt 中</span></span><br></pre></td></tr></table></figure></li><li><p><code>tree</code>：展示当前目录的文件结构</p><ul><li><code>tree /path/to/directory/</code>：展示某个目录的文件结构</li><li><code>tree -a</code>：展示隐藏文件</li></ul></li><li><p><code>cut</code>：分割一行内容</p><ul><li>从<code>stdin</code>中读入多行数据</li><li><code>echo $PATH | cut -d &#39;:&#39; -f 3,5</code>：输出 PATH 用:分割后第3和第5<strong>列</strong>数据</li><li><code>echo $PATH | cut -d &#39;:&#39; -f 3-5</code>：输出 PATH 用:分割后第3到第5<strong>列</strong>数据</li><li><code>echo $PATH | cut -c 3,5</code>：输出 PATH 的第3和第5个字符</li><li><code>echo $PATH | cut -c 3-5</code>：输出 PATH 的第3到第5个字符</li></ul></li><li><p><code>sort</code>：将每行内容按字典序排序</p><ul><li><p>可以从<code>stdin</code>中读取多行数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls | sort</span><br><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | sort  <span class="comment"># 读文件路径 </span></span><br><span class="line">cat scores.txt | cut -d <span class="string">&#x27; &#x27;</span> -f 1 | sort &gt; names.txt <span class="comment"># 读文件内容</span></span><br></pre></td></tr></table></figure></li><li><p>可以从命令行参数中读取文件名列表</p></li></ul></li><li><p><code>xargs</code>：将<code>stdin</code>中的数据用空格或回车分割成命令行参数，<strong>将标准输入变成文件参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs cat | wc -l  <span class="comment"># 统计当前目录下所有`python`文件的总行数</span></span><br><span class="line"></span><br><span class="line">find homework/lesson_6/ -name <span class="string">&#x27;*.cpp&#x27;</span> | xargs cat | grep <span class="string">&#x27;thrift&#x27;</span>  <span class="comment"># 检索`thrift `字符串，即在指定目录下显示包含`thrift`内容的行，但不显示该行所在文件</span></span><br><span class="line"></span><br><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs rm  <span class="comment"># 删除当前目录下的所有.py 文件</span></span><br></pre></td></tr></table></figure></li><li><p><code>ag xxx</code>：搜索当前目录下的所有文件，检索<code>xxx</code>字符串，即在当前目录下显示包含<code>xxx</code>内容的行，且显示该行所在文件</p><blockquote><p> ag 和 grep 的区别 ：ag 不会区分大小写</p></blockquote></li></ol><h4 id="3-4-查看文件内容"><a href="#3-4-查看文件内容" class="headerlink" title="3.4 查看文件内容"></a>3.4 查看文件内容</h4><ol><li><p><code>more</code>：浏览文件内容， <code>cat</code>是一下子显示所有，<code>more</code>是一页一页的显示</p><ul><li>回车：下一行</li><li>空格：下一页</li><li><code>b</code>：上一页</li><li><code>q</code>：退出</li></ul></li><li><p><code>less</code>：与<code>more</code>类似，功能更全</p><ul><li>回车：下一行</li><li><code>y</code>：上一行</li><li><code>Page Down</code>：下一页</li><li><code>Page Up</code>：上一页</li><li><code>q</code>：退出</li></ul></li><li><p><code>head -3 xxx</code>：展示<code>xxx</code>的前3行内容</p><ul><li><p>同时支持从<code>stdin</code>读入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | head - 3 <span class="comment"># 显示进程列表的前三行</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>tail -3 xxx</code>：展示 xxx 末尾3行内容</p><ul><li>同时支持从<code>stdin</code>读入内容</li></ul></li></ol><h4 id="3-5-用户相关"><a href="#3-5-用户相关" class="headerlink" title="3.5 用户相关"></a>3.5 用户相关</h4><ol><li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li></ol><h4 id="3-6-工具"><a href="#3-6-工具" class="headerlink" title="3.6 工具"></a>3.6 工具</h4><ol><li><p><code>md5sum</code>：计算<code>md5</code>哈希值 </p><blockquote><p>md5sum 计算检验 MD5效验码。MD5算法常常被用来验证网络文件传输的完整性，防止文件被人篡改。MD5全称是报文摘要算法（Message-Digest Algorithm 5），此算法对任意长度的信息逐位进行计算，产生一个二进制长度为128位（十六进制长度就是32位）的“指纹”（或称“报文摘要”），不同的文件产生相同的报文摘要的可能性非常小。</p></blockquote><ul><li>可以从<code>stdin</code>读入内容</li><li>也可以在命令行参数中传入文件名列表 <code>md5sum scores.txt</code>；</li></ul></li><li><p><code>time command</code>：统计<code>command</code>命令的执行时间</p></li><li><p><code>ipython3</code>：交互式<code>python3</code>环境。可以当做计算器，或者批量管理文件。</p><ul><li><code>! echo &quot;Hello World&quot;</code>：<code>!</code><strong>表示执行<code>shell</code>脚本</strong></li></ul></li><li><p><code>watch -n 0.1 command</code>：每0.1秒执行一次<code>command</code>命令</p></li><li><p><code>tar</code>：压缩文件</p><ul><li><p><code>tar -zcvf xxx.tar.gz /path/to/file/*</code>：将 file 文件夹进行压缩 </p><blockquote><p>file/有* 代表 file 里的所有文件压缩为一个包</p></blockquote></li><li><p><code>tar -zxvf xxx.tar.gz</code>：解压缩</p></li></ul></li><li><p><code>diff xxx yyy</code>：查找文件<code>xxx</code>与<code>yyy</code>的不同点</p></li></ol><h4 id="3-7-安装软件"><a href="#3-7-安装软件" class="headerlink" title="3.7 安装软件"></a>3.7 安装软件</h4><ol><li><code>sudo command</code>：以<code>root</code>身份执行<code>command</code>命令</li><li><code>apt-get install xxx</code>：安装软件</li><li><code>pip install xxx --user --upgrade</code>：安装<code>python</code>包</li></ol><h2 id="云服务器配置与-Docker"><a href="#云服务器配置与-Docker" class="headerlink" title="云服务器配置与 Docker"></a>云服务器配置与 Docker</h2><h3 id="1-初始配置"><a href="#1-初始配置" class="headerlink" title="1. 初始配置"></a>1. 初始配置</h3><ol><li><p>登录到新服务器。打开 AC Terminal，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@公网 ip <span class="comment"># 注意腾讯云登录的用户不是 root，而是 ubuntu</span></span><br></pre></td></tr></table></figure></li><li><p>为防止 root 用户误操作安装了软件，所以最好新创建工作用户并赋予 sudo 权限，这样该用户每次安装东西，命令行前都要加个<code>sudo </code>,防止误操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser chjm  <span class="comment"># 创建用户 chjm</span></span><br><span class="line">sudo usermod -aG chjm  <span class="comment"># 给用户 chjm 分配 sudo 权限</span></span><br></pre></td></tr></table></figure><ul><li><p><code>su root</code> ：切换用户，从 chjm 切换到 root 用户</p></li><li><p><code>logout</code> ：退出当前用户登录</p></li><li><p>若在 chjm 用户下使用 sudo 报错<code>chjm is not in the sudoers file.  This incident will be reported.</code></p><p>可在 root 用户下使用<code>sudo adduser chjm sudo</code>： 将用户名<code>chjm</code>添加到<code>sudoers</code>文件</p></li></ul><blockquote><p>腾讯云如果购买的是轻量级的应用服务器，ubuntu 版本是默认没有 root 用户的。默认用户是 ubuntu（可以在控制器中修改用户名），是默认拥有 sudo 权限的。若想添加新用户可用<code>sudo adduser chjm</code></p></blockquote></li><li><p><strong>配置别名</strong></p><p><strong>本地</strong>创建文件  <code>~/.ssh/config</code></p><p>然后在文件中输入：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host alserver</span><br><span class="line">HostName IP # ip 地址或域名</span><br><span class="line">User ubuntu #用户名</span><br><span class="line">Port <span class="number">20000</span>#端口 不加 port 默认是<span class="number">22</span></span><br><span class="line"></span><br><span class="line">Host txserver</span><br><span class="line">HostName IP # ip 地址或域名</span><br><span class="line">User ubuntu #用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名<code>alserver</code>、<code>txserver</code></p></li><li><p><strong>配置秘钥</strong></p><p><strong>本地</strong>创建密钥：（配置秘钥与上面配置文件无关，上面配置文件只是起个别名 方便 ssh 连接）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<code>myserver1</code>服务器。则将公钥中的内容，复制到<code>myserver1</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。</p><p>也可以在<strong>本地</strong>使用如下命令一键添加公钥：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id txserver ## 将公钥添加到别名为 txserver 的服务器</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>安装 tmux, 登录自己的服务器，然后安装 tmux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update <span class="comment"># 先升级</span></span><br><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure></li><li><p>将 AC Terminal 的配置传到新服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp .bashrc .vimrc .tmux.conf server_name:  <span class="comment"># server_name 需要换成自己配置的别名</span></span><br></pre></td></tr></table></figure></li><li><p>安装 docker，先打开 tmux。（养成好习惯，所有工作都在 tmux 里进行，防止意外关闭终端后，工作进度丢失）<br>然后在tmux中根据 <a href="https://docs.docker.com/engine/install/ubuntu/">docker</a> 安装教程安装 docker 即可。</p><blockquote><p>docker –version 能查看到版本即表示安装成功</p></blockquote></li></ol><h3 id="2-Docker"><a href="#2-Docker" class="headerlink" title="2. Docker"></a>2. <a href="https://docs.docker.com/engine/install/linux-postinstall/">Docker</a></h3><blockquote><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。一个镜像（<code>Image</code>）可用生成多个容器（<code>Container</code>），容器内有配好的不同环境。</p></blockquote><h4 id="2-1-将当前用户添加到-docker-用户组"><a href="#2-1-将当前用户添加到-docker-用户组" class="headerlink" title="2.1 将当前用户添加到 docker 用户组"></a>2.1 将当前用户添加到 docker 用户组</h4><p>为了避免每次使用 docker 命令都需要加上 sudo 权限，可以将当前用户加入安装中自动创建的 docker 用户组(可以参考官方文档)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>执<strong>行完此操作后，需要退出服务器，再重新登录回来，才可以省去 sudo 权限。</strong></p><h4 id="2-2-镜像（images）"><a href="#2-2-镜像（images）" class="headerlink" title="2.2 镜像（images）"></a>2.2 镜像（images）</h4><ol><li><p><code>docker pull ubuntu:20.04</code>：拉取一个镜像</p></li><li><p><code>docker images</code>：列出本地所有镜像</p></li><li><p><code>docker image rm ubuntu:20.04 或 docker rmi ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></p></li><li><p><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像  </p><blockquote><ul><li><p>[ ] 代表可选 可加 container 也可不加 </p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218192155526.png" alt="image-20230218192155526"></p></li><li><p>容器 CONTAINER 可用 CONTAINER _ID（a5d075b5ce28） 也可用 NAMES（ecstatic_chaplygin）</p></li><li><p>镜像 IMAGE_NAME:TAG   名称:版本号</p></li></ul></blockquote></li><li><p><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</p><blockquote><ul><li><p>生成后的<code>ubuntu_20_04.ta</code>需要使用<code>chmod +r ubuntu_20_04.tar</code>添加可读权限 这样别人才能读取</p></li><li><p>若想将该镜像传到其他服务器上，可使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r txserver:ubuntu_20_04.tar .    <span class="comment"># . 代表本地的当前路径下  在本地使用该命令</span></span><br><span class="line">scp -r ~/ubuntu_20_04.tar alserver:/home/  <span class="comment"># 再将本地的 ubuntu_20_04.tar 传到阿里云的服务器上    </span></span><br></pre></td></tr></table></figure><p>不能直接从一个服务器传到另外一个服务器</p></li></ul></blockquote></li><li><p><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</p></li></ol><h4 id="2-3-容器-container"><a href="#2-3-容器-container" class="headerlink" title="2.3 容器(container)"></a>2.3 容器(container)</h4><ol><li><p><code>docker [container] create -it ubuntu:20.04</code>：利用镜像<code>ubuntu:20.04</code>创建一个容器。</p></li><li><p><code>docker ps -a</code>：查看本地的所有容器</p><ul><li><code>docker ps</code>：查看所有运行的容器</li></ul></li><li><p><code>docker [container] start CONTAINER</code>：启动容器</p><blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230218192155526.png" alt="image-20230218192155526"></p><p>CONTAINER 可用 ID（a5d075b5ce28） 也可用 NAMES（ecstatic_chaplygin）</p></blockquote></li><li><p><code>docker [container] stop CONTAINER</code>：停止容器</p></li><li><p><code>docker [container] restart CONTAINER</code>：重启容器</p></li><li><p><code>docker [contaienr] run -itd ubuntu:20.04</code>：创建并启动一个容器 (<code>-itd</code>)</p><ul><li><code>docker [contaienr] run -it ubuntu:20.04</code>：创建并启动一个容器 同时进入该容器 （<code>-it</code>）</li></ul></li><li><p><code>docker [container] attach CONTAINER</code>：进入容器（只能进入正在启动的容器）</p><ul><li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以<strong>挂起</strong>容器</li><li><code>Ctrl-d</code>是直接<strong>关闭</strong>该容器</li></ul></li><li><p><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令（正在启动的容器中）</p></li><li><p><code>docker [container] rm CONTAINER</code>：删除容器 （需先停止）</p><blockquote><p>rmi 是删除镜像</p></blockquote></li><li><p><code>docker container prune</code>：删除所有已停止的容器</p><blockquote><p>这里的<code>container </code>不能没有，前面的命令可以没有<code>container </code></p></blockquote></li><li><p><code>docker export -o xxx.tar CONTAINER</code>：将容器<code>CONTAINER</code>导出到本地文件<code>xxx.tar</code>中</p></li><li><p><code>docker import xxx.tar image_name:tag</code>：将本地容器文件<code>xxx.tar</code>导入成镜像，并将镜像命名为<code>image_name:tag</code></p></li><li><p><code>docker export/import 与 docker save/load</code>的区别：</p><ul><li><code>export/import</code>会丢弃历史记录和元数据信息，仅保存容器当时的快照状态  其本质迁移的也是一个镜像</li><li><code>save/load</code>会保存完整记录，体积更大</li></ul></li><li><p><code>docker top CONTAINER</code>：查看某个容器内的所有进程（需将启动的容器挂起）</p></li><li><p><code>docker stats</code>：查看所有容器的统计信息，包括 CPU、内存、存储、网络等信息</p></li><li><p><code>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx</code>：在服务器本地和容器间复制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp tmp.rar peaceful_kepler:/root  <span class="comment"># 将服务器本地的 tmp.rar 复制到 peaceful_kepler 容器的 root 目录下</span></span><br><span class="line">docker cp peaceful_kepler:/root . <span class="comment"># 将 peaceful_kepler 容器的 root 文件夹复制到服务器本地</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename peaceful_kepler testName  <span class="comment"># peaceful_kepler 是 docker 生成容器时随便取的名字</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</p></li></ol><h4 id="2-4-加载镜像并实现-ssh-登录云服务器里的服务器（容器）"><a href="#2-4-加载镜像并实现-ssh-登录云服务器里的服务器（容器）" class="headerlink" title="2.4 加载镜像并实现 ssh 登录云服务器里的服务器（容器）"></a>2.4 加载镜像并实现 ssh 登录云服务器里的服务器（容器）</h4><blockquote><p><strong>记住想使用 ssh 登录该容器 需要一直保持该容器在运行中</strong></p></blockquote><p>进入 AC Terminal，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  <span class="comment"># 将镜像上传到自己租的云端服务器</span></span><br><span class="line">ssh server_name  <span class="comment"># 登录自己的云端服务器</span></span><br><span class="line"></span><br><span class="line">docker load -i docker_lesson_1_0.tar  <span class="comment"># 将镜像加载到本地</span></span><br><span class="line">docker run -p 200 00:22 --name my_docker_server -itd docker_lesson:1.0  <span class="comment"># 创建并运行 docker_lesson:1.0镜像</span></span><br><span class="line"></span><br><span class="line">docker attach my_docker_server  <span class="comment"># 进入创建的 docker 容器，这里 my_docker_server 相当于 docker_lesson:1.0的别名</span></span><br><span class="line">passwd  <span class="comment"># 设置 root 密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后 Ctrl-p，再按 Ctrl-q 挂起容器 不能关闭 不然就不能 ssh 登录了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在任意地方便可使用 ssh 登录云服务器里的服务器（容器）了</span></span><br><span class="line">ssh root@ip 地址 -p 20000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再该服务器（容器）内，为防止 root 用户误操作 也可新建一个新用户 并分配 sudo 权限  这样每次安装软件的命令前也就都需要加 sudo 了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样可以在该容器内配置 vim tmux 相关设置</span></span><br></pre></td></tr></table></figure><blockquote><p>对于 <code>docker run -p 200 00:22 --name my_docker_server -itd docker_lesson:1.0</code>  </p><p><code>- p</code> 是指修改端口号映射  将容器内的22端口映射到本地的20000端口 因为本地的22端口被用过了（默认端口 ）</p><p><code>- name</code> 是定义别名，和 ssh 配置别名一样</p><p><code>-itd</code>  是创建并启动一个容器 (<code>-itd</code>)</p><p><strong>也可以给一个容器开放多个端口，如下：</strong></p><p><code>docker run -p 100 00:22 -p 4 43:443 -p 80:80 -p 30 30:3030 -p 30 40:3040 -p 30 50:3050 --name my_docker_server -itd docker_lesson:1.0</code> </p></blockquote><p>去云平台控制台中修改安全组配置，放行端口20000。<br>返回<code>AC Terminal</code>，即可通过<code>ssh</code>登录自己的<code>docker</code>容器：<br><code>ssh root@xxx.xxx.xxx.xxx -p 20000 </code> 将<code>xxx.xxx.xxx.xxx</code>替换成自己租的服务器的 IP 地址<br>然后，可以仿照上节课内容，创建工作账户<code>chjm</code>。<br>最后，可以参考 ssh 登录配置<code>docker</code>容器的别名和免密登录。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SprintBoot框架课</title>
      <link href="/2024/07/20/SprintBoot%E6%A1%86%E6%9E%B6%E8%AF%BE/"/>
      <url>/2024/07/20/SprintBoot%E6%A1%86%E6%9E%B6%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="SprintBoot框架课"><a href="#SprintBoot框架课" class="headerlink" title="SprintBoot框架课"></a>SprintBoot框架课</h1><h2 id="配置Mysql与注册登录模块"><a href="#配置Mysql与注册登录模块" class="headerlink" title="配置Mysql与注册登录模块"></a>配置Mysql与注册登录模块</h2><h3 id="1-Mysql"><a href="#1-Mysql" class="headerlink" title="1. Mysql"></a>1. Mysql</h3><h4 id="1-1-mysql服务的关闭与启动"><a href="#1-1-mysql服务的关闭与启动" class="headerlink" title="1.1 mysql服务的关闭与启动"></a>1.1 mysql服务的关闭与启动</h4><blockquote><p>默认开机自动启动，如果想手动操作，可以参考如下命令</p><p>启动mysql5.7版本不需要加80，直接<code>net start mysql</code></p></blockquote><ul><li>关闭：<code>net stop mysql80</code></li><li>启动：<code>net start mysql80</code></li></ul><h4 id="1-2-常用操作"><a href="#1-2-常用操作" class="headerlink" title="1.2 常用操作"></a>1.2 常用操作</h4><ul><li>连接用户名为<code>root</code>，密码为<code>123456</code>的数据库服务：<code>mysql -uroot -p123456</code></li><li><code>show databases</code>：列出所有数据库</li><li><code>create database kob</code>：创建数据库</li><li><code>drop database kob</code>：删除数据库</li><li><code>use kob</code>：使用数据库kob</li><li><code>show tables</code>：列出当前数据库的所有表</li><li><code>create table user(id int, username varchar(100))</code>：创建名称为user的表，表中包含id和username两个属性。</li><li><code>drop table user</code>：删除表</li><li><code>insert into user values(1, &#39;yxc&#39;)</code>：在表中插入数据</li><li><code>select * from user</code>：查询表中所有数据</li><li><code>delete from user where id = 2</code>：删除某行数据</li></ul><p><strong>SpringBoot中可以可视化mysql数据库</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226093901090.png" alt="image-20230226093901090"></p><h3 id="2-SpringBoot配置mysql"><a href="#2-SpringBoot配置mysql" class="headerlink" title="2. SpringBoot配置mysql"></a>2. SpringBoot配置mysql</h3><ol><li>在<a href="https://mvnrepository.com/">Maven仓库地址</a>中查找如下依赖，并添加到<code>pom.xml</code>文件中：<ul><li><strong>Spring Boot Starter JDBC</strong><blockquote><p>JDBCTemplate为我们提供了增删改查数据库的方法</p></blockquote></li><li><strong>Project Lombok</strong><blockquote><p>Lombok 是一种 Java 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注释实现这一目的。通过在开发环境中实现 Lombok，开发人员可以节省构建诸如 hashCode() 和 equals() 这样的方法以及以往用来分类各种 accessor 和 mutator 的大量时间。</p></blockquote>  使用Lombok：  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226101449302.png" alt="image-20230226101449302">  源文件：  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226101742593.png" alt="image-20230226101742593">  生成的target后的文件：  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226101336841.png" alt="image-20230226101336841"></li><li><strong>MySQL Connector/J</strong><blockquote><p>mysql连接</p></blockquote></li><li><strong>mybatis-plus-boot-starter</strong><blockquote><p><a href="https://blog.csdn.net/chaizepeng/article/details/119384531">关于mybatis</a>，使用mybatis-plus就不用写sql语句了</p></blockquote></li><li><strong>mybatis-plus-generator</strong><blockquote><p>生成 Mapper接口和配置文件</p></blockquote>  <strong>MyBatis-Plus 最核心的功能要数通用 Mapper 了，只要我们的 Mapper 接口继承了BaseMapper，就可以进行单表CRUD操作，具体接口见</strong><a href="https://baomidou.com/">Mybatis-Plus官网</a>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226102611248.png" alt="image-20230226102611248"></li></ul></li><li>然后让Maven更新依赖： <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226092348496.png" alt="image-20230226092348496"></li><li>在<code>application.properties</code>中添加数据库配置： spring.datasource.username=root<br> spring.datasource.password=123456<br> spring.datasource.url=jdbc:mysql://localhost:3307/kob?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8<br> spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</li></ol><p><strong>注意：在安装上述依赖后，建议关闭如下选项：</strong></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226093421511.png" alt="image-20230226093421511"></p><h3 id="3-接口编写整体流程"><a href="#3-接口编写整体流程" class="headerlink" title="3.接口编写整体流程"></a>3.接口编写整体流程</h3><h4 id="3-1-SpringBoot中的各个层"><a href="#3-1-SpringBoot中的各个层" class="headerlink" title="3.1 SpringBoot中的各个层"></a>3.1 SpringBoot中的各个层</h4><ul><li><code>pojo</code>层：将数据库中的表对应成<code>Java</code>中的<code>Class</code></li><li><code>mapper</code>层（也叫<code>Dao</code>层）：将<code>pojo</code>层的<code>class</code>中的操作，映射成<code>sql</code>语句</li><li><code>service</code>层：写具体的业务逻辑，组合使用<code>mapper</code>中的操作</li><li><code>controller</code>层：负责请求转发，接受页面过来的参数，传给<code>Service</code>处理，接到返回值，再传给页面</li></ul><h4 id="3-2-具体实现"><a href="#3-2-具体实现" class="headerlink" title="3.2 具体实现"></a>3.2 具体实现</h4><p>文件目录如下：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226111207030.png" alt="image-20230226111207030"></p><ol><li>首先在<code>pojo</code>层新建<code>User</code>类，数据库中的<code>User</code>表对应成<code>Java</code>中的<code>User</code>类。 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226111347059.png" alt="image-20230226111347059"></li><li>然后在<code>mapper</code>层中新建<code>UserMapper</code>接口，让其继承MyBatis-Plus库实现的BaseMapper，这样就可以对<code>user</code>表CRUD操作，具体CRUD操作API见<a href="https://baomidou.com/">Mybatis-Plus官网</a> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226111507605.png" alt="image-20230226111507605"></li><li>然后在<code>controller</code>层中实现接口 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230226112059568.png" alt="image-20230226112059568"><ul><li><code>@RestController</code>：个人理解是指定接口返回数据的规范，相关理解可参考<a href="https://www.cnblogs.com/justn0w/p/11628287.html">这个网站</a></li><li><code>@Autowired</code>：可以对类成员变量、方法及构造函数进行标注，让 <code>spring</code> 完成<code>bean自动装配</code>的工作。默认是按照类去匹配，配合@<a href="https://so.csdn.net/so/search?q=Qualifier&spm=1001.2101.3001.7020">Qualifier</a> 指定按照名称去装配 bean。<blockquote><p>在使用Spring进行项目开发的时候，会大量使用到自动装配，那自动装配是什么呢？简单来说：Spring 利用依赖注入（DI）功能，完成SpringIOC容器中各个组件之间的依赖关系赋值管理。</p></blockquote></li><li><code>@GetMapping</code>：GET接口</li><li><code>selectList</code>方法是<code>userMapper</code>继承的父类<code>BaseMapper</code>（<code>MyBatis-Plus</code>库实现)中的<code>API</code>，详情见<a href="https://baomidou.com/">Mybatis-Plus官网</a></li></ul></li></ol><h3 id="4-修改Spring-Security"><a href="#4-修改Spring-Security" class="headerlink" title="4. 修改Spring Security"></a>4. 修改Spring Security</h3><h4 id="4-1-安装相关依赖"><a href="#4-1-安装相关依赖" class="headerlink" title="4.1 安装相关依赖"></a>4.1 安装相关依赖</h4><ol><li>在<a href="https://mvnrepository.com/">Maven仓库地址</a>中查找如下依赖，并添加到<code>pom.xml</code>文件中，并更新Maven依赖<ul><li>spring-boot-starter-security</li></ul></li><li>然后重启项目后，访问相关端口需要先登录。<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227082643042.png" alt="image-20230227082643042"></li><li>username默认为user,密码为随机生成，见命令行。 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227082620583.png" alt="image-20230227082620583"></li></ol><h4 id="4-2-修改security"><a href="#4-2-修改security" class="headerlink" title="4.2 修改security"></a>4.2 修改security</h4><ol><li>实现实现由数据库中的用户登录<ul><li>首先在如下目录中，新建UserDetailsServiceImpl类，继承自UserDetailsService接口，用来接入数据库信息</li></ul> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227090455634.png" alt="image-20230227090455634"><ul><li>UserDetailsServiceImpl实现了根据username返回用户信息，用于登录验证，代码如下：<blockquote><p>这里会将数据库中该用户的password与用户输入的password进行比较，注意这里是明文比较，需要在数据库中的password字段前前加<code>&#123;noop&#125;</code>，表示密码没有加密。</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227092255287.png" alt="image-20230227092255287"></p></blockquote></li></ul> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227090546982.png" alt="image-20230227090546982"><ul><li>其中，UserDetailsImpl为实现的工具，用于返回用户各种信息，该类继承于implements，按<code>alt+insert</code>可自动补全父类中需要重写的方法，部分代码截图如下：</li></ul> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227090846640.png" alt="image-20230227090846640"> 以上实现的为密码<strong>明文比较</strong>进行登录，还未对密码进行加密。</li><li>实现config.SecurityConfig类，用来实现用户密码的加密存储 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227093653414.png" alt="image-20230227093653414"><blockquote><p>可以在test中进行测试，如图：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227095103549.png" alt="image-20230227095103549"></p></blockquote> 然后在新建用户时将password换为加密后的密码即可，代码如下： @GetMapping(“/user/add/{userId}/{username}/{password}/“)  <pre><code> public String addUser(           @PathVariable int userId,           @PathVariable String username,           @PathVariable String password)&#123;       PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();       String encodePassword = passwordEncoder.encode(password);       User user = new User(userId,username,encodePassword);       userMapper.insert(user);       return &quot;Add User Successfully&quot;;   &#125;</code></pre></li></ol><h3 id="5-jwt验证"><a href="#5-jwt验证" class="headerlink" title="5. jwt验证"></a>5. jwt验证</h3><h4 id="5-1-安装相关依赖"><a href="#5-1-安装相关依赖" class="headerlink" title="5.1 安装相关依赖"></a>5.1 安装相关依赖</h4><ol><li>在<a href="https://mvnrepository.com/">Maven仓库地址</a>中查找如下依赖，并添加到<code>pom.xml</code>文件中，然后更新maven依赖：<ul><li><code>jjwt-api</code></li><li><code>jjwt-impl</code></li><li><code>jjwt-jackson</code></li></ul></li><li>实现<code>utils.JwtUtil</code>类，为<code>jwt</code>工具类，用来创建、解析<code>jwt token</code> package com.kob.backend.utils;   import io.jsonwebtoken.Claims;<br> import io.jsonwebtoken.JwtBuilder;<br> import io.jsonwebtoken.Jwts;<br> import io.jsonwebtoken.SignatureAlgorithm;<br> import org.springframework.stereotype.Component;   import javax.crypto.SecretKey;<br> import javax.crypto.spec.SecretKeySpec;<br> import java.util.Base64;<br> import java.util.Date;<br> import java.util.UUID;   @Component<br> public class JwtUtil {  <pre><code> public static final long JWT_TTL = 60 * 60 * 1000L * 24 * 14;  // 有效期14天   public static final String JWT_KEY = &quot;SDFGjhdsfalshdfHFdsjkdsfds121232131afasdfac&quot;;   public static String getUUID() &#123;       return UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);   &#125;   public static String createJWT(String subject) &#123;       JwtBuilder builder = getJwtBuilder(subject, null, getUUID());       return builder.compact();   &#125;   private static JwtBuilder getJwtBuilder(String subject, Long ttlMillis, String uuid) &#123;       SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;       SecretKey secretKey = generalKey();       long nowMillis = System.currentTimeMillis();       Date now = new Date(nowMillis);       if (ttlMillis == null) &#123;           ttlMillis = JwtUtil.JWT_TTL;       &#125;       long expMillis = nowMillis + ttlMillis;       Date expDate = new Date(expMillis);       return Jwts.builder()               .setId(uuid)               .setSubject(subject)               .setIssuer(&quot;sg&quot;)               .setIssuedAt(now)               .signWith(signatureAlgorithm, secretKey)               .setExpiration(expDate);   &#125;   public static SecretKey generalKey() &#123;       byte[] encodeKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);       return new SecretKeySpec(encodeKey, 0, encodeKey.length, &quot;HmacSHA256&quot;);   &#125;   public static Claims parseJWT(String jwt) throws Exception &#123;       SecretKey secretKey = generalKey();       return Jwts.parserBuilder()               .setSigningKey(secretKey)               .build()               .parseClaimsJws(jwt)               .getBody();   &#125;  </code></pre> }</li><li>实现<code>config.filter.JwtAuthenticationTokenFilter</code>类，用来验证<code>jwt token</code>，如果验证成功，则将<code>User</code>信息注入上下文中 package com.kob.backend.config.filter;   import com.kob.backend.mapper.UserMapper;<br> import com.kob.backend.pojo.User;<br> import com.kob.backend.service.impl.utils.UserDetailsImpl;<br> import com.kob.backend.utils.JwtUtil;<br> import io.jsonwebtoken.Claims;<br> import org.jetbrains.annotations.NotNull;<br> import org.springframework.beans.factory.annotation.Autowired;<br> import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br> import org.springframework.security.core.context.SecurityContextHolder;<br> import org.springframework.stereotype.Component;<br> import org.springframework.util.StringUtils;<br> import org.springframework.web.filter.OncePerRequestFilter;   import javax.servlet.FilterChain;<br> import javax.servlet.ServletException;<br> import javax.servlet.http.HttpServletRequest;<br> import javax.servlet.http.HttpServletResponse;<br> import java.io.IOException;   @Component<br> public class JwtAuthenticationTokenFilter extends OncePerRequestFilter {  <pre><code> @Autowired   private UserMapper userMapper;   @Override   protected void doFilterInternal(HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull FilterChain filterChain) throws ServletException, IOException &#123;       String token = request.getHeader(&quot;Authorization&quot;);       if (!StringUtils.hasText(token) || !token.startsWith(&quot;Bearer &quot;)) &#123;           filterChain.doFilter(request, response);           return;       &#125;       token = token.substring(7);       String userid;       try &#123;           Claims claims = JwtUtil.parseJWT(token);           userid = claims.getSubject();       &#125; catch (Exception e) &#123;           throw new RuntimeException(e);       &#125;       User user = userMapper.selectById(Integer.parseInt(userid));       if (user == null) &#123;           throw new RuntimeException(&quot;用户名未登录&quot;);       &#125;       UserDetailsImpl loginUser = new UserDetailsImpl(user);       UsernamePasswordAuthenticationToken authenticationToken =               new UsernamePasswordAuthenticationToken(loginUser, null, null);       SecurityContextHolder.getContext().setAuthentication(authenticationToken);       filterChain.doFilter(request, response);   &#125;  </code></pre> }  </li><li>配置<code>config.SecurityConfig</code>类，放行登录、注册等接口 package com.kob.backend.config;   import com.kob.backend.config.filter.JwtAuthenticationTokenFilter;<br> import org.springframework.beans.factory.annotation.Autowired;<br> import org.springframework.context.annotation.Bean;<br> import org.springframework.context.annotation.Configuration;<br> import org.springframework.http.HttpMethod;<br> import org.springframework.security.authentication.AuthenticationManager;<br> import org.springframework.security.config.annotation.web.builders.HttpSecurity;<br> import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br> import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br> import org.springframework.security.config.http.SessionCreationPolicy;<br> import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br> import org.springframework.security.crypto.password.PasswordEncoder;<br> import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;   @Configuration<br> @EnableWebSecurity<br> public class SecurityConfig extends WebSecurityConfigurerAdapter {  <pre><code> @Autowired   private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;   @Bean   public PasswordEncoder passwordEncoder() &#123;       return new BCryptPasswordEncoder();   &#125;   @Bean   @Override   public AuthenticationManager authenticationManagerBean() throws Exception &#123;       return super.authenticationManagerBean();   &#125;   @Override   protected void configure(HttpSecurity http) throws Exception &#123;       http.csrf().disable()               .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)               .and()               .authorizeRequests()               .antMatchers(&quot;/user/account/token/&quot;, &quot;/user/account/register/&quot;).permitAll()               .antMatchers(HttpMethod.OPTIONS).permitAll()               .anyRequest().authenticated();       http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);   &#125;  </code></pre> }</li></ol><h4 id="5-2-编写API"><a href="#5-2-编写API" class="headerlink" title="5.2 编写API"></a>5.2 编写API</h4><ol><li>将数据库中的<code>id</code>域变为自增<ul><li>在数据库中将<code>id</code>列变为自增</li><li>在<code>pojo.User</code>类中添加注解：<code>@TableId(type = IdType.AUTO)</code></li></ul></li><li>实现<code>/user/account/token/</code>：验证用户名密码，验证成功后返回<code>jwt token</code>（令牌） <strong>注意：在POST方法中</strong><ul><li><code>@RequestBody</code>获取的是<code>axios</code>中<code>data</code>字段携带的数据  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227163918163.png" alt="image-20230227163918163">  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227164055094.png" alt="image-20230227164055094"></li><li><code>@RequestParam</code>获取的是<code>axios</code>中<code>params</code>字段携带的数据  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227164252146.png" alt="image-20230227164252146">  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227164321030.png" alt="image-20230227164321030"></li></ul></li><li>实现<code>/user/account/info/</code>：根据令牌返回用户信息</li><li>实现<code>/user/account/register/</code>：注册账号</li></ol><h2 id="编写API的总结"><a href="#编写API的总结" class="headerlink" title="编写API的总结"></a>编写API的总结</h2><ol><li>首先在pojo封装与数据库对应的类<blockquote><p>注意：数据库里字段命名用create_time，pojo里用驼峰命名createTime</p></blockquote> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227172944636.png" alt="image-20230227172944636"></li><li>在mapper层，实现<code>UserMapper</code>接口 让其继承<code>mybatis</code>封装的<code>BaseMapper</code>接口，该接口内定义了许多封装好的接口，用于查询数据库，这样就可以避免写sql语句了,相关api见<a href="https://baomidou.com/">Mybatis-Plus官网</a> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227174734447.png" alt="image-20230227174734447"> @Mapper<br> public interface UserMapper extends BaseMapper<User> {  // 让UserMapper接口继承mybatis封装的BaseMapper接口<br> }</li><li>然后在service层定义接口，并实现该接口。<ul><li>service层整体目录：  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230227173402697.png" alt="image-20230227173402697"></li><li><code>service/user/account/RegisterService</code>中定义接口：  public interface RegisterService {  <pre><code>  public Map&lt;String, String&gt; register(String username, String password, String confirmedPassword);  </code></pre>  }</li><li>在<code>service/impl/user/account/RegisterService</code>中实现接口  public class RegisterServiceImpl implements RegisterService { @Autowired private UserMapper userMapper; // 继承了mybatis中的BaseMapper类 不用写sql语句了 直接调api  @Autowired<br>  private PasswordEncoder passwordEncoder;  // 密码加密的接口    @Override<br>  public Map&lt;String, String&gt; register(String username, String password, String confirmedPassword) {  <pre><code>  Map&lt;String, String&gt; map = new HashMap&lt;&gt;();    if (username == null) &#123;  // null判断是否有这个参数 和 参数长度为0不一样        map.put(&quot;error_message&quot;, &quot;用户名不能为空&quot;);        return map;    &#125;    if (password == null || confirmedPassword == null) &#123;        map.put(&quot;error_message&quot;, &quot;密码不能为空&quot;);        return map;    &#125;    // .... 此处省略各种特判......    // 查询数据库 验证用户名是否存在    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();    queryWrapper.eq(&quot;username&quot;, username);    List&lt;User&gt; users = userMapper.selectList(queryWrapper);    if (!users.isEmpty()) &#123;        map.put(&quot;error_message&quot;, &quot;用户名已存在&quot;);        return map;    &#125;    // 新建用户    String encodedPassword = passwordEncoder.encode(password);    String photo = &quot;https://cdn.acwing.com/media/user/profile/photo/1_lg_844c66b332.jpg&quot;;    User user = new User(null, username, encodedPassword, photo); // id是自增的 所以不用传    userMapper.insert(user);    map.put(&quot;error_message&quot;, &quot;success&quot;);    return map;  </code></pre>  }</li></ul></li><li>最后在<code>controller</code>层映射指定路径到接口 <code>controller/user/account/</code>中 @RestController<br> public class RegisterController {  <pre><code> @Autowired   private RegisterService registerService; // 生成之前实现的接口实例，这样可以调用接口里实现的方法   @PostMapping(&quot;/user/account/register/&quot;)   public Map&lt;String, String&gt; register(@RequestParam Map&lt;String, String&gt; map) &#123;       String username = map.get(&quot;username&quot;);       String password = map.get(&quot;password&quot;);       String confirmedPassword = map.get(&quot;confirmedPassword&quot;);       return registerService.register(username, password, confirmedPassword);   &#125;  </code></pre> }</li></ol><h2 id="匹配系统"><a href="#匹配系统" class="headerlink" title="匹配系统"></a>匹配系统</h2><h3 id="1-前后端WebSocekt连接"><a href="#1-前后端WebSocekt连接" class="headerlink" title="1. 前后端WebSocekt连接"></a>1. 前后端WebSocekt连接</h3><h4 id="后端集成WebSocket"><a href="#后端集成WebSocket" class="headerlink" title="后端集成WebSocket"></a>后端集成WebSocket</h4><ol><li>在pom.xml文件中添加依赖：<ul><li><code>spring-boot-starter-websocket</code></li><li><code>fastjson</code></li></ul></li><li>添加<code>config.WebSocketConfig</code>配置类： @Configuration<br> public class WebSocketConfig {  <pre><code> @Bean   public ServerEndpointExporter serverEndpointExporter() &#123;       return new ServerEndpointExporter();   &#125;  </code></pre> }  </li><li>添加<code>consumer.WebSocketServer</code>类 @Component<br> @ServerEndpoint(“/websocket/{token}”)  // 注意不要以’/‘结尾<br> public class WebSocketServer {  <pre><code> // 保存所有的用户 静态变量 ConcurrentHashMap是进程安全的HashMap   private static ConcurrentHashMap&lt;Integer,WebSocketServer&gt; users =  new ConcurrentHashMap&lt;&gt;();   // 一个session对应一个user   private User user;   private Session session = null;       // 匹配池   private static CopyOnWriteArraySet&lt;User&gt; matchPool = new CopyOnWriteArraySet&lt;&gt;();   // 单例模式注入UserMapper   private static UserMapper userMapper;   @Autowired   public void setUserMapper(UserMapper userMapper)&#123;       WebSocketServer.userMapper = userMapper;   &#125;   @OnOpen   public void onOpen(Session session, @PathParam(&quot;token&quot;) String token) throws IOException &#123;       // 建立连接       System.out.println(&quot;onOpen&quot;);       this.session = session;          &#125;   @OnClose   public void onClose() &#123;       // 关闭链接       System.out.println(&quot;onclose&quot;);       if(this.user != null)&#123;           users.remove(this.user.getId());       &#125;   &#125;   @OnMessage   public void onMessage(String message, Session session) &#123;       // 从Client接收消息       System.out.println(&quot;onMessage&quot;);   &#125;   @OnError   public void onError(Session session, Throwable error) &#123;       error.printStackTrace();       System.out.println(&quot;onError&quot;);   &#125;   public void sendMessage(String message)&#123;       // 发送消息给从Client       synchronized (this.session)&#123;  // 锁           try &#123;               this.session.getBasicRemote().sendText(message);           &#125;catch (IOException e)&#123;               e.printStackTrace();           &#125;       &#125;   &#125;  </code></pre> }  </li><li>在<code>config.SecurityConfig</code>中添加如下代码，跳过jwt验证  @Override<br>  public void configure(WebSecurity web) throws Exception {  <pre><code>   web.ignoring().antMatchers(&quot;/websocket/**&quot;);  // 开发接口 跳过jwt验证  </code></pre>  }</li></ol><h4 id="前端集成WebSocket"><a href="#前端集成WebSocket" class="headerlink" title="前端集成WebSocket"></a>前端集成WebSocket</h4><blockquote><p>前端有封装好的WebSocket类，直接调用相关api即可，这里没有跨域问题，直接使用后端端口就行</p></blockquote><p>const socketUrl = <code>ws://localhost:3030/websocket/$&#123;store.state.user.token&#125;</code>;<br>let socket: WebSocket | null = null;<br>onMounted(() =&gt; {<br>  // 建立连接<br>  socket = new WebSocket(socketUrl);  </p><p>  // 开始连接的钩子函数<br>  socket.onopen = () =&gt; {<br>    console.log(“onopen”);<br>  };  </p><p>  // 向服务端发送消息<br>  socket.send(JSON.stringify({ event: “start-matching” }));  </p><p>  // 从服务端接收消息<br>  socket.onmessage = (msg) =&gt; {<br>    const data = JSON.parse(msg.data);<br>    console.log(data);<br>  };  </p><p>  // 结束连接的钩子函数<br>  socket.onclose = () =&gt; {<br>    console.log(“onclose”);<br>  };<br>});  </p><p>onUnmounted(() =&gt; {<br>  // 断开连接<br>  socket?.close();<br>});</p><h3 id="2-创建微服务"><a href="#2-创建微服务" class="headerlink" title="2.创建微服务"></a>2.创建微服务</h3><ol><li>新建一个<code>backendcloud</code>项目，勾选<code>spring web</code>依赖 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307210913920.png" alt="image-20230307210913920"> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307210957305.png" alt="image-20230307210957305"></li><li>删除其src文件，并在<code>pom.xml</code>文件中添加<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code><blockquote><p>配置<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>的意思是使用maven分模块管理，都会有一个父级项目，pom文件一个重要的属性就是packaging（打包类型），一般来说所有的父级项目的packaging都为pom，packaging默认类型jar类型，如果不做配置，maven会将该项目打成jar包。</p></blockquote> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307211455062.png"></li><li>然后在<code>SpringCloud</code>项目中添加依赖：<a href="https://mvnrepository.com/">Maven仓库地址</a><ul><li>spring-cloud-dependencies</li></ul> <dependency>       <groupId>org.springframework.cloud</groupId>       <artifactId>spring-cloud-dependencies</artifactId>       <version>2021.0.3</version>       <type>pom</type>       <scope>import</scope>   </dependency> </li><li>然后在<code>backendcloud</code>中新建一个<strong>模块</strong>，命名为<code>matchingsystem</code>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307211947105.png" alt="image-20230307211947105" style="zoom:67%;" />        <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307212543356.png" alt="image-20230307212543356" style="zoom:67%;" /> </li><li>将<code>backencloud</code>项目<code>pom.xml</code>中<code>spring Web</code>的依赖<strong>剪切</strong>到<code>matchingsystem</code>项目的<code>pom.xml</code>中，然后同步父项目<code>backencloud</code>和子项目<code>matchingsystem</code>的<code>maven</code>依赖。 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307212811987.png" alt="image-20230307212811987"><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307212930685.png" alt="image-20230307212930685"></li><li>在子项目<code>matchingsystem</code>下的<code>resources</code>文件夹下新建<code>application.properties</code>文件，并配置端口号<blockquote><p>注意：别和backend的端口重了</p></blockquote> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307213327245.png" alt="image-20230307213327245"></li><li>在子项目<code>matchingsystem</code>下创建<code>service</code>和<code>controller</code>层，编写相关端口 <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307213932988.png" alt="image-20230307213932988"> 其中<code>MatchingController</code>的代码如下： @RestController<br> public class MatchingController {  <pre><code> @Autowired   private MatchingService matchingService;   @PostMapping(&quot;/player/add&quot;)   public String addPlayer(@RequestParam MultiValueMap&lt;String, String&gt; data) &#123; // 这里必须是MultiValueMap       Integer userId = Integer.parseInt(Objects.requireNonNull(data.getFirst(&quot;user_id&quot;)));       Integer rating = Integer.parseInt(Objects.requireNonNull(data.getFirst(&quot;rating&quot;)));       return matchingService.addPlayer(userId, rating);   &#125;   @PostMapping(&quot;/player/remove&quot;)   public String removePlayer(@RequestParam MultiValueMap&lt;String, String&gt; data) &#123;       Integer userId = Integer.parseInt(Objects.requireNonNull(data.getFirst(&quot;user_id&quot;)));       return matchingService.removePlayer(userId);   &#125;  </code></pre> }</li><li>修改<code>security</code>，设置权限管理，只需要<code>backend</code>项目访问<code>matchingsystem</code>里的<code>addPlayer</code>和<code>removePlayer</code>接口。<ul><li>安装security依赖，并更新maven  <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-security</artifactId>        <version>2.7.1</version>    </dependency>  </li><li>创建<code>config/SecurityConfig</code>，并配置<code>security</code><strong>只允许本地iP访问</strong>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307214820943.png">  package com.kob.matchingsystem.config;    import org.springframework.context.annotation.Configuration;<br>  import org.springframework.http.HttpMethod;<br>  import org.springframework.security.config.annotation.web.builders.HttpSecurity;<br>  import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br>  import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br>  import org.springframework.security.config.http.SessionCreationPolicy;    @Configuration<br>  @EnableWebSecurity<br>  public class SecurityConfig extends WebSecurityConfigurerAdapter {  <pre><code>  @Override    protected void configure(HttpSecurity http) throws Exception &#123;        http.csrf().disable()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)                .and()                .authorizeRequests()                .antMatchers(&quot;/player/add&quot;, &quot;/player/remove&quot;).hasIpAddress(&quot;127.0.0.1&quot;)//只允许本地访问                .antMatchers(HttpMethod.OPTIONS).permitAll()                .anyRequest().authenticated();    &#125;  </code></pre>  }  </li></ul></li><li>将<code>matchingsystem</code>下的<code>Main</code>文件重命名为<code>MatchingSystemApplication</code>，并修改为<code>SpringWeb</code>的入口文件<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307215346426.png" alt="image-20230307215346426"></li><li>启动<code>MatchingSystemApplication</code>项目，访问本地<code>3040</code>端口，结果如下，即为成功<img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230307215529013.png"></li><li>重新创建一个子模块<code>backend</code> <img src="C:\Users\chjm\AppData\Roaming\Typora\typora-user-images\image-20230310163002032.png" alt="image-20230310163002032" style="zoom:67%;" /><ol start="12"><li>删除其<code>src</code>文件夹，再将之前<code>backend</code>里的<code>src</code>文件复制过来，并将其<code>pom</code>里依赖复制过来。</li><li>创建<code>RestTemplateConfig</code>Bean，它的作用是<strong>几个子项目之间通信</strong>package com.kob.backend.config;  import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.client.RestTemplate;  @Configuration<br>public class RestTemplateConfig {  <pre><code>@Bean  public RestTemplate getRestTemplate()&#123;      return new RestTemplate();  &#125;  </code></pre>}并注入到<code>WebSocketServer</code>中：@Component<br>@ServerEndpoint(“/websocket/{token}”)  // 注意不要以’/‘结尾<br>public class WebSocketServer {  <pre><code>// 子模块通信的url  private final static String addPlayerUrl =  &quot;http://127.0.0.1:3040/player/add&quot;;  private final static String removePlayerUrl =  &quot;http://127.0.0.1:3040/player/remove&quot;;    // 注入RestTemplateConfig  private static RestTemplate restTemplate;  @Autowired  public void setRestTemplate(RestTemplate restTemplate) &#123;      WebSocketServer.restTemplate = restTemplate;  &#125;       // 开始匹配时  private void  startMatching()&#123;      MultiValueMap&lt;String,String&gt; data = new LinkedMultiValueMap&lt;&gt;();      data.add(&quot;user_id&quot;,this.user.getId().toString());      data.add(&quot;rating&quot;,this.user.getRating().toString());      restTemplate.postForObject(addPlayerUrl,data,String.class); // 发送给匹配系统服务  &#125;  // 结束匹配时  private void  stopMatching()&#123;      MultiValueMap&lt;String,String&gt; data = new LinkedMultiValueMap&lt;&gt;();      data.add(&quot;user_id&quot;,this.user.getId().toString());      restTemplate.postForObject(removePlayerUrl,data,String.class); // 发送给匹配系统服务  &#125;  </code></pre>}这里<code>restTemplate.postForObject(addPlayerUrl,data,String.class)</code>通过<code>post</code>给<code>matching Server</code>发送信息，而<code>Match Server</code>通过如下代码接受消息：@RestController<br>public class MatchingController {  <pre><code>@Autowired  private MatchingService matchingService;  @PostMapping(&quot;/player/add&quot;)  public String addPlayer(@RequestParam MultiValueMap&lt;String, String&gt; data) &#123; // 这里必须是MultiValueMap      Integer userId = Integer.parseInt(Objects.requireNonNull(data.getFirst(&quot;user_id&quot;)));      Integer rating = Integer.parseInt(Objects.requireNonNull(data.getFirst(&quot;rating&quot;)));      return matchingService.addPlayer(userId, rating);  &#125;  </code></pre>}</li></ol></li></ol><h2 id="Bot代码执行"><a href="#Bot代码执行" class="headerlink" title="Bot代码执行"></a>Bot代码执行</h2><ol><li>创建<code>SpringCloud</code>的子项目<code>BotRunningSystem</code></li><li>在<code>BotRunningSystem</code>项目中添加依赖：<a href="https://mvnrepository.com/">Maven仓库地址</a><ul><li><code>joor-java-8</code>：java代码编译</li><li><code>spring-cloud-dependencies</code></li><li><code>spring-boot-starter-security</code> ：网关</li><li><code>lombok</code> : 自动实现类的构建、getter、eques方法</li></ul></li><li>创建<code>controller</code>,<code>service</code>,<code>config</code>等层，并创建启动文件<code>BotRunningSystemApplication</code> @SpringBootApplication<br> public class BotRunningSystemApplication {  <pre><code> public static void main(String[] args) &#123;       // 启动匹配池线程       // 运行spring服务       SpringApplication.run(BotRunningSystemApplication.class, args);   &#125;  </code></pre> } 然后在<code>resources/application.properties</code>中配置端口号，并在<code>config</code>中创建如下文件： <code>RestTemplateConfig</code>，用于子服务之间通信 @Configuration<br> @EnableWebSecurity<br> public class SecurityConfig extends WebSecurityConfigurerAdapter {  <pre><code> @Override   protected void configure(HttpSecurity http) throws Exception &#123;       http.csrf().disable()               .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)               .and()               .authorizeRequests()               .antMatchers(&quot;/bot/add&quot;).hasIpAddress(&quot;127.0.0.1&quot;) // 只允许本地访问               .antMatchers(HttpMethod.OPTIONS).permitAll()               .anyRequest().authenticated();   &#125;  </code></pre> }   <code>SecurityConfig</code>，起到网关的作用 @Configuration<br> public class RestTemplateConfig {  <pre><code> @Bean   public RestTemplate getRestTemplate()&#123;       return new RestTemplate();   &#125;  </code></pre> }</li></ol><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>在<code>config.MybatisConfig</code>中添加分页配置：</p><p>package com.kob.backend.config;  </p><p>import com.baomidou.mybatisplus.annotation.DbType;<br>import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br>import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br>import org.springframework.context.annotation.*;  </p><p>/**  </p><ul><li>MyBatisPlus配置类  </li><li>/<br>@Configuration<br>public class MyBatisPlusConfig {    /**  <ul><li>MyBatisPlus拦截器（用于分页）  </li><li>/<br>@Bean<br>public MybatisPlusInterceptor paginationInterceptor() {<br>  MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();<br>  //添加MySQL的分页拦截器<br>  interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));<br>  return interceptor;<br>}<br>}  </li></ul></li></ul><h2 id="spring-整合Minio"><a href="#spring-整合Minio" class="headerlink" title="spring 整合Minio"></a>spring 整合Minio</h2><h3 id="1-腾讯云-ubuntu-系统改为-root-登陆"><a href="#1-腾讯云-ubuntu-系统改为-root-登陆" class="headerlink" title="1. 腾讯云 ubuntu 系统改为 root 登陆"></a>1. 腾讯云 ubuntu 系统改为 root 登陆</h3><p>因为腾讯云默认不是root用户，无法通过xftp传输文件，所以这里需要先修改下</p><h1 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h1><p>sudo passwd root  </p><h1 id="修改-ssh-配置"><a href="#修改-ssh-配置" class="headerlink" title="修改 ssh 配置"></a>修改 ssh 配置</h1><p>sudo vi /etc/ssh/sshd_config  </p><h1 id="修改PermitRootLogin-将它后面改为yes"><a href="#修改PermitRootLogin-将它后面改为yes" class="headerlink" title="修改PermitRootLogin 将它后面改为yes"></a>修改PermitRootLogin 将它后面改为yes</h1><p>:/PermitRootLogin  # 向光标之下寻找第一个值为word的字符串  按n为接着找下一个</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316100300151.png" alt="image-20230316100300151"></p><p>最后重启ssh服务即可,这样本地就可以通过ssh登录root用户了</p><p>sudo service ssh restart</p><h3 id="2-通过-docker-安装-Minio"><a href="#2-通过-docker-安装-Minio" class="headerlink" title="2. 通过 docker 安装 Minio"></a>2. 通过 docker 安装 Minio</h3><h1 id="搜索是否有-minio-镜像"><a href="#搜索是否有-minio-镜像" class="headerlink" title="搜索是否有 minio 镜像"></a>搜索是否有 minio 镜像</h1><p>docker search minio  </p><h1 id="有则拉取镜像"><a href="#有则拉取镜像" class="headerlink" title="有则拉取镜像"></a>有则拉取镜像</h1><p>docker pull minio/minio  </p><h1 id="先创建minio-文件和配置-存放的位置"><a href="#先创建minio-文件和配置-存放的位置" class="headerlink" title="先创建minio 文件和配置 存放的位置"></a>先创建minio 文件和配置 存放的位置</h1><p>sudo mkdir -p /home/chjm/docker/minio/data<br>sudo mkdir -p /home/chjm/docker/minio/config</p><h3 id="3-启动-及配置-Minio"><a href="#3-启动-及配置-Minio" class="headerlink" title="3. 启动 及配置 Minio"></a>3. 启动 及配置 Minio</h3><h4 id="配置https访问"><a href="#配置https访问" class="headerlink" title="配置https访问"></a>配置<code>https</code>访问</h4><p>需要将<code>ssl</code>证书中的<code>.key</code>，<code>.crt</code>，移动到<code>minio</code>的<code>/home/chjm/docker/minio/config</code>下面，并重命名为<code>private.key</code>和<code>public.crt</code>两个文件</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316103239444.png" alt="image-20230316103239444"></p><h4 id="启动minio"><a href="#启动minio" class="headerlink" title="启动minio"></a>启动minio</h4><p>这里需要在腾讯云开放9000和9090端口</p><h1 id="启动并指定端口"><a href="#启动并指定端口" class="headerlink" title="启动并指定端口"></a>启动并指定端口</h1><p>docker run -p 9000:9000 -p 9090:9090 \<br>     –net=host \<br>     –name minio \<br>     -d –restart=always \<br>     -e “MINIO_ACCESS_KEY=chjm” \<br>     -e “MINIO_SECRET_KEY=ldx186729..” \<br>     -e “MINIO_SERVER_URL=<a href="https://chjm.online:9000&quot;">https://chjm.online:9000&quot;</a> \<br>     -v /home/chjm/docker/minio/data:/data  \<br>     -v /home/chjm/docker/minio/config:/root/.minio  \<br>     minio/minio server \<br>     /data –console-address “:9090” -address “:9000”</p><blockquote><p>这里解释一下 docker 里面的几个参数</p><p>-p: 指定<a href="https://so.csdn.net/so/search?q=%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84&spm=1001.2101.3001.7020">端口映射</a>，格式为：主机（宿主）端口:容器端口</p><p>-e “MINIO_ROOT_USER=Jonny”: 设置环境变量；</p><p>-d: 后台运行容器，并返回容器ID；</p><p>-v: 绑定一个卷</p><p>9090端口指的是minio的客户端端口</p><p>MINIO_ACCESS_KEY ：账号</p><p>MINIO_SECRET_KEY ：密码（账号长度必须大于等于5，密码长度必须大于等于8位）</p><p>MINIO_SERVER_URL ：ssl证书绑定的域名 ，后面要加端口号 ，不然默认是443</p><p>-v /home/chjm/docker/minio/config:/root/.minio : 修改config文件夹的地址</p></blockquote><h3 id="4-登录Minio服务端"><a href="#4-登录Minio服务端" class="headerlink" title="4.登录Minio服务端"></a>4.登录Minio服务端</h3><p>访问<a href="https://chjm.online:9090/login">https://chjm.online:9090/login</a>进行相关设置</p><p>首先下载key</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230315091049492.png" alt="image-20230315091049492"></p><p>文件内容如下，保存文件，SDK操作文件的API需要用到</p><p>{“url”:”<a href="http://127.0.0.1:9000&quot;,&quot;accessKey&quot;:&quot;PM9mZ2mFvU5jFHkz&quot;,&quot;secretKey&quot;:&quot;Sds7XdVDQX7sFgUm1MqIbEwPAc02H7yl&quot;,&quot;api&quot;:&quot;s3v4&quot;,&quot;path&quot;:&quot;auto&quot;}">http://127.0.0.1:9000&quot;,&quot;accessKey&quot;:&quot;PM9mZ2mFvU5jFHkz&quot;,&quot;secretKey&quot;:&quot;Sds7XdVDQX7sFgUm1MqIbEwPAc02H7yl&quot;,&quot;api&quot;:&quot;s3v4&quot;,&quot;path&quot;:&quot;auto&quot;}</a></p><p>然后创建一个bucket</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230315095349830.png" alt="image-20230315095349830"></p><p>记得开放桶的权限</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230315183403197.png" alt="image-20230315183403197"></p><h3 id="4-SpringBoot-整合-MinIO"><a href="#4-SpringBoot-整合-MinIO" class="headerlink" title="4. SpringBoot 整合 MinIO"></a>4. SpringBoot 整合 MinIO</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><!-- https://mvnrepository.com/artifact/io.minio/minio -->  <dependency>      <groupId>io.minio</groupId>      <artifactId>minio</artifactId>      <version>8.5.2</version>  </dependency><h4 id="2-application-yml-配置信息"><a href="#2-application-yml-配置信息" class="headerlink" title="2. application.yml 配置信息"></a>2. application.yml 配置信息</h4><p>minio:<br>  endpoint: <a href="https://chjm.online:9000/">https://chjm.online:9000</a> # Minio服务所在地址<br>  bucketName: kob #存储桶名称<br>  accessKey: PM9mZ2mFvU5jFHkz #访问的key<br>  secretKey: Sds7XdVDQX7sFgUm1MqIbEwPAc02H7yl #访问的秘钥</p><h4 id="3-MinioConfig-配置类"><a href="#3-MinioConfig-配置类" class="headerlink" title="3.MinioConfig 配置类"></a>3.MinioConfig 配置类</h4><p>@Data<br>@Configuration<br>@ConfigurationProperties(prefix = “minio”)<br>public class MinioConfig {  </p><pre><code>private String endpoint;  private String accessKey;  private String secretKey;  private String bucketName;  @Bean  public MinioClient minioClient() &#123;      return MinioClient.builder()              .endpoint(endpoint)              .credentials(accessKey, secretKey)              .build();  &#125;  </code></pre><p>}</p><h4 id="4-MinioUtil工具类"><a href="#4-MinioUtil工具类" class="headerlink" title="4.MinioUtil工具类"></a>4.MinioUtil工具类</h4><p>package com.kob.backend.utils;  </p><p>@Component<br>@Slf4j<br>public class MinioUtil {<br>    @Autowired<br>    private MinioConfig prop;  </p><pre><code>@Resource  private MinioClient minioClient;  /**   * 查看存储bucket是否存在   * @return boolean   */  public Boolean bucketExists(String bucketName) &#123;      Boolean found;      try &#123;          found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());      &#125; catch (Exception e) &#123;          e.printStackTrace();          return false;      &#125;      return found;  &#125;  /**   * 创建存储bucket   * @return Boolean   */  public Boolean makeBucket(String bucketName) &#123;      try &#123;          minioClient.makeBucket(MakeBucketArgs.builder()                  .bucket(bucketName)                  .build());      &#125; catch (Exception e) &#123;          e.printStackTrace();          return false;      &#125;      return true;  &#125;  /**   * 删除存储bucket   * @return Boolean   */  public Boolean removeBucket(String bucketName) &#123;      try &#123;          minioClient.removeBucket(RemoveBucketArgs.builder()                  .bucket(bucketName)                  .build());      &#125; catch (Exception e) &#123;          e.printStackTrace();          return false;      &#125;      return true;  &#125;  /**   * 获取全部bucket   */  public List&lt;Bucket&gt; getAllBuckets() &#123;      try &#123;          List&lt;Bucket&gt; buckets = minioClient.listBuckets();          return buckets;      &#125; catch (Exception e) &#123;          e.printStackTrace();      &#125;      return null;  &#125;  // 获取当前时间  public String getNowDate(String dateFormat) &#123;      Date currentTime = new Date();      SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);      String dateString = formatter.format(currentTime);      return dateString;  &#125;  /**   * 文件上传   *   * @param file 文件   * @return Boolean   */  public String upload(MultipartFile file) &#123;      System.out.println(file);      String originalFilename = file.getOriginalFilename();      if (StringUtils.isBlank(originalFilename))&#123;          throw new RuntimeException();      &#125;      UUID uuid = UUID.randomUUID();      String uid = uuid.toString().substring(0, 10);      String fileName = uid + originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));      String objectName = getNowDate(&quot;dd-MM-yyyy&quot;) + &quot;/&quot; + fileName;  // 中间加个/ 意味着是在一个文件夹下      InputStream in = null;      try &#123;          in = file.getInputStream();          PutObjectArgs objectArgs = PutObjectArgs.builder()                  .bucket(prop.getBucketName())                  .object(objectName)                  .stream(in, in.available(), -1)                  .contentType(file.getContentType()).build();          //文件名称相同会覆盖          minioClient.putObject(objectArgs);      &#125; catch (Exception e) &#123;          e.printStackTrace();          return null;      &#125;finally &#123;          if (in != null) &#123;              try &#123;                  in.close();              &#125; catch (IOException e) &#123;                  e.printStackTrace();              &#125;          &#125;      &#125;      return objectName;  &#125;  /**   * 预览图片   * @param fileName   * @return   */  public String preview(String fileName)&#123;      // 查看文件地址      GetPresignedObjectUrlArgs build = new GetPresignedObjectUrlArgs().builder().bucket(prop.getBucketName()).object(fileName).method(Method.GET).build();      try &#123;          String url = minioClient.getPresignedObjectUrl(build);          return url;      &#125; catch (Exception e) &#123;          e.printStackTrace();      &#125;      return null;  &#125;  /**   * 文件下载   * @param fileName 文件名称   * @param res response   * @return Boolean   */  public void download(String fileName, HttpServletResponse res) &#123;      GetObjectArgs objectArgs = GetObjectArgs.builder().bucket(prop.getBucketName())              .object(fileName).build();      try (GetObjectResponse response = minioClient.getObject(objectArgs))&#123;          byte[] buf = new byte[1024];          int len;          try (FastByteArrayOutputStream os = new FastByteArrayOutputStream())&#123;              while ((len=response.read(buf))!=-1)&#123;                  os.write(buf,0,len);              &#125;              os.flush();              byte[] bytes = os.toByteArray();              res.setCharacterEncoding(&quot;utf-8&quot;);              // 设置强制下载不打开              // res.setContentType(&quot;application/force-download&quot;);              res.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot; + fileName);              try (ServletOutputStream stream = res.getOutputStream())&#123;                  stream.write(bytes);                  stream.flush();              &#125;          &#125;      &#125; catch (Exception e) &#123;          e.printStackTrace();      &#125;  &#125;  /**   * 查看文件对象   * @return 存储bucket内文件对象信息   */  public List&lt;Item&gt; listObjects() &#123;      Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(              ListObjectsArgs.builder().bucket(prop.getBucketName()).build());      List&lt;Item&gt; items = new ArrayList&lt;&gt;();      try &#123;          for (Result&lt;Item&gt; result : results) &#123;              items.add(result.get());          &#125;      &#125; catch (Exception e) &#123;          e.printStackTrace();          return null;      &#125;      return items;  &#125;  /**   * 删除   * @param fileName   * @return   * @throws Exception   */  public boolean remove(String fileName)&#123;      try &#123;          minioClient.removeObject( RemoveObjectArgs.builder().bucket(prop.getBucketName()).object(fileName).build());      &#125;catch (Exception e)&#123;          return false;      &#125;      return true;  &#125;  </code></pre><p>}  </p><h4 id="5-文件处理接口"><a href="#5-文件处理接口" class="headerlink" title="5.文件处理接口"></a>5.文件处理接口</h4><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><p><code>UploadImageService</code>层</p><p>package com.kob.backend.service.user.account;  </p><p>@Component<br>public interface UploadImageService {<br>    public JsonResult<JSONObject> uploadImage (MultipartFile file);<br>}</p><p><code>UploadImageServiceImpl</code>层</p><p>package com.kob.backend.service.impl.user.account;  </p><p>@Service<br>public class UploadImageServiceImpl implements UploadImageService {<br>    @Autowired<br>    private MinioUtil minioUtil;<br>    @Autowired<br>    private MinioConfig prop;<br>    @Override<br>    public JsonResult<JSONObject> uploadImage(MultipartFile file) {<br>        System.out.println(file);<br>        String objectName = minioUtil.upload(file);<br>        JSONObject resp = new JSONObject();<br>        if (null != objectName) {<br>            resp.put(“url”,(prop.getEndpoint() + “/“ + prop.getBucketName() + “/“ + objectName));<br>            return  new JsonResult&lt;&gt;(resp);<br>        }<br>        return new JsonResult&lt;&gt;(1,”上传失败”);<br>    }<br>}</p><p><code>UploadImageController</code>层</p><p>package com.kob.backend.controller.user.account;  </p><p>@RestController<br>@RequestMapping(“api/user/account/“)<br>public class UploadImageController {  </p><pre><code>@Autowired  private UploadImageService uploadImageService;  @PostMapping(&quot;uploadImage&quot;)  public JsonResult&lt;JSONObject&gt; uploadImage(@RequestBody MultipartFile file)&#123;      return  uploadImageService.uploadImage(file);  &#125;  </code></pre><p>}  </p><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><p>axio接口</p><p>export function uploadImage(formData: FormData) {<br>  return hyRequest.post&lt;IDataType&lt;{ url: string }&gt;&gt;({<br>    url: userAPI.uploadImage,<br>    data: formData,<br>    showLoading: false,<br>   // psot发送FormData类型的数据需将请求头设置为 multipart/form-data<br>    headers: { “Content-Type”: “multipart/form-data” },<br>  });<br>}</p><p>vue组件</p><template>        <el-upload          action="none"          :auto-upload="false"          :on-change="handleUploadChange"        >          <el-button type="primary">Click to upload</el-button>        </el-upload>  </template>    <script lang="ts" setup>  const handleUploadChange: UploadProps["onChange"] = async (    uploadFile,    uploadFiles  ) => {    let formData = new FormData();    formData.append("file", uploadFile.raw as any);    const res = await uploadImage(formData);    console.log(res);  };    </script>  <h2 id="上线服务"><a href="#上线服务" class="headerlink" title="上线服务"></a>上线服务</h2><h3 id="配置docker容器"><a href="#配置docker容器" class="headerlink" title="配置docker容器"></a>配置docker容器</h3><p>将<code>AC Terminal</code>里的<code>django_lesson:1.0</code>镜像传到服务器上</p><p><code>cd /var/lib/acwing/docker/images/</code></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314174452964.png" alt="image-20230314174452964"></p><p>然后在服务器上</p><h1 id="将镜像加载到本地"><a href="#将镜像加载到本地" class="headerlink" title="将镜像加载到本地"></a>将镜像加载到本地</h1><p>docker load -i django_lesson_1_0.tar   </p><h1 id="利用该镜像，创建并启动一个容器，开放相关kob项目所需的端口，并设置name为kob-docker-server"><a href="#利用该镜像，创建并启动一个容器，开放相关kob项目所需的端口，并设置name为kob-docker-server" class="headerlink" title="利用该镜像，创建并启动一个容器，开放相关kob项目所需的端口，并设置name为kob_docker_server"></a>利用该镜像，创建并启动一个容器，开放相关kob项目所需的端口，并设置name为kob_docker_server</h1><p>docker run -p 20000:22 -p 443:443 -p 80:80 -p 3030:3030 -p 3040:3040 -p 3050:3050 –name kob_docker_server -itd django_lesson:1.0  </p><h1 id="进入创建的docker容器"><a href="#进入创建的docker容器" class="headerlink" title="进入创建的docker容器"></a>进入创建的docker容器</h1><p>docker attach kob_docker_server    </p><h1 id="更新root用户密码"><a href="#更新root用户密码" class="headerlink" title="更新root用户密码"></a>更新root用户密码</h1><p>passwd </p><blockquote><p>这里腾讯云里也要开启20000端口</p></blockquote><p>为防止root用户权限过大，导致误操作，先在root账户下添加一个新用户</p><p>adduser chjm  # 创建用户chjm<br>usermod -aG chjm  # 给用户chjm分配sudo权限<br>adduser chjm sudo # 将用户名chjm添加到sudoers文件<br>su chjm  # 切换到chjm用户</p><p>然后<code>ctrl+p</code>,<code>ctrl+q</code>挂起，通过<code>ssh</code>进行连接，注意这里连接的端口号是<code>20000</code>，</p><p>然后将祖传配置传到<code>root</code>文件夹和<code>chjm</code>文件夹下</p><blockquote><p>这里登录root用户使用<code>xftp</code>传才有权限进入root目录</p></blockquote><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314181424294.png" alt="image-20230314181424294"></p><p>sudo cp .bashrc .vimrc .tmux.conf /root<br>sudo cp .bashrc .vimrc .tmux.conf /home/chjm</p><p>然后创建<code>/home/chjm/kob</code>文件夹，并在其中创建<code>backcloud</code>，<code>web</code>文件夹</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316105437026.png" alt="image-20230316105437026"></p><h3 id="安装、配置mysql"><a href="#安装、配置mysql" class="headerlink" title="安装、配置mysql"></a>安装、配置mysql</h3><p><strong>安装</strong></p><h1 id="先更新"><a href="#先更新" class="headerlink" title="先更新"></a>先更新</h1><p>sudo apt-get update   </p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>sudo apt-get install mysql-server  </p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>sudo service mysql start # 可以输入top 查看启动的进程  </p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p>sudo mysql -u root  </p><h1 id="在mysql下设置root用户的密码"><a href="#在mysql下设置root用户的密码" class="headerlink" title="在mysql下设置root用户的密码"></a>在mysql下设置root用户的密码</h1><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH caching_sha2_password BY ‘yourpasswd’;  # yourpasswd为要输入密码    </p><h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><p>exit</p><p><strong>登录<code>mysql</code>，创建<code>kob</code>数据库，并进入<code>kob</code></strong></p><h1 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h1><p>sudo mysql -u root -p  </p><h1 id="创建kob数据库"><a href="#创建kob数据库" class="headerlink" title="创建kob数据库"></a>创建kob数据库</h1><p>create database kob; # show databases; 查看当前所有数据库  </p><h1 id="进入kob数据库"><a href="#进入kob数据库" class="headerlink" title="进入kob数据库"></a>进入kob数据库</h1><p>use kob;  </p><p>show tables;  # 可以查看当前所有表</p><blockquote><p>注意 ：mysql里面输入命令行 最后都需要加<code>；</code></p></blockquote><p><strong>在<code>kob</code>数据库下创建表：</strong></p><p>复制<code>idea</code>生产的DDL</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230313211347346.png" alt="image-20230313211347346"></p><p>在云端创建sql文件，并将复制的DDL粘贴过去</p><p> sudo vim create_table.sql<br> :set paste<br> i<br> shift+insert</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230313211806888.png" alt="image-20230313211806888"></p><h1 id="密码登录mysql"><a href="#密码登录mysql" class="headerlink" title="密码登录mysql"></a>密码登录mysql</h1><p>sudo mysql -u root -p  </p><h1 id="进入kob数据库-1"><a href="#进入kob数据库-1" class="headerlink" title="进入kob数据库"></a>进入kob数据库</h1><p>use kob;  </p><h1 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h1><p>source /home/chjm/kob/create_table.sql;</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314183609263.png" alt="image-20230314183609263"></p><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><h1 id="先更新-1"><a href="#先更新-1" class="headerlink" title="先更新"></a>先更新</h1><p>sudo apt-get update      </p><h1 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h1><p>sudo apt-get install openjdk-8-jdk  </p><h1 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h1><p>java -version</p><h3 id="打包后端"><a href="#打包后端" class="headerlink" title="打包后端"></a>打包后端</h3><p><code>pom.xml</code>中添加配置：</p><p>三个服务都需要进行如下配置：</p><p>添加一行</p><p>// 打包的类型<br><packaging>jar</packaging></p><p>以及打包的相关配置</p><build>      <plugins>          <plugin>              <groupId>org.springframework.boot</groupId>              <artifactId>spring-boot-maven-plugin</artifactId>              <!--这里写上main方法所在类的路径-->              <configuration>                  <mainClass>com.kob.backend.BackendApplication</mainClass>              </configuration>              <executions>                  <execution>                      <goals>                          <goal>repackage</goal>                      </goals>                  </execution>              </executions>          </plugin>      </plugins>  </build>  <blockquote><p><mainClass>com.kob.backend.BackendApplication</mainClass> 要改为三个包主文件相符的路径</p></blockquote><p><strong>注意打包前修改下mysql数据库的账户和密码与服务器里数据库设置的要相匹配</strong></p><p>然后使用<code>maven</code>进行打包,会在三个文件夹里生产<code>target</code>目录</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314084612859.png" alt="image-20230314084612859"></p><p>将各自<code>target</code>中的<code>jar</code>文件传到服务器即可</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314091644554.png" alt="image-20230314091644554"></p><p>将三个<code>jar</code>文件移动到<code>chjm/kob/backendcloud</code></p><h1 id="将三个jar文件移动到当前目录"><a href="#将三个jar文件移动到当前目录" class="headerlink" title="将三个jar文件移动到当前目录"></a>将三个jar文件移动到当前目录</h1><p>cp ~/*.jar .</p><p>然后使用<code>tmux</code>开启三个窗口，分别运行三个包</p><p>运行java后端<br>java -jar 包名<br>sudo java -jar botrunningsystem-0.0.1-SNAPSHOT.jar  # 注意因为这个服务需要读取文件 所以需要夹sudo权限</p><h3 id="打包前端"><a href="#打包前端" class="headerlink" title="打包前端"></a>打包前端</h3><p>请求接口配置</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314203919574.png" alt="image-20230314203919574"></p><p>websocket配置，这里需要改为wss</p><blockquote><p>http协议下使用ws，在https协议下使用wss</p><p>WS一般默认是80端口，而WSS默认是443端口，大多数网站用的就是80和433端口</p></blockquote><p>在打包后的<code>index.html</code>中添加如下代码，意思是自动将http的不安全请求升级为https</p><meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"><p>然后将打包的dist文件夹内的内容复制到服务器端</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314204408094.png" alt="image-20230314204408094"></p><h3 id="设置nginx"><a href="#设置nginx" class="headerlink" title="设置nginx"></a>设置nginx</h3><p>部署<code>ssl</code>证书</p><p>在腾讯云申请后，点击下载，并选择<code>Nginx</code>的配置文件</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316091726912.png" alt="image-20230316091726912"></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314095742527.png" alt="image-20230314095742527"></p><p>下载后如图：</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316091703426.png" alt="image-20230316091703426"></p><p>将<code>.key</code>和<code>.pem</code>文件传到到云端<code>etc/nginx/cert/</code>文件夹下</p><h1 id="默认是没有cert文件夹的"><a href="#默认是没有cert文件夹的" class="headerlink" title="默认是没有cert文件夹的"></a>默认是没有cert文件夹的</h1><p>sudo mkdir cert</p><p>使用<code>xftp</code>传文件，<code>kob_docker_server</code>需要使用<code>root</code>账户登录<strong>才有权限</strong>进入<code>/etc</code>文件下</p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230316091807404.png" alt="image-20230316091807404"></p><p>将下列内容写入<code>/etc/nginx/.conf</code>配置文件中</p><p>user www-data;<br>worker_processes auto;<br>pid /run/nginx.pid;<br>include /etc/nginx/modules-enabled/*.conf;  </p><p>events {<br>    worker_connections 768;<br>    # multi_accept on;<br>}  </p><p>http {  </p><pre><code>##  # Basic Settings  ##  sendfile on;  tcp_nopush on;  tcp_nodelay on;  keepalive_timeout 65;  types_hash_max_size 2048;  # server_tokens off;  # server_names_hash_bucket_size 64;  # server_name_in_redirect off;  include /etc/nginx/mime.types;  default_type application/octet-stream;  ##  # SSL Settings  ##  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE  ssl_prefer_server_ciphers on;  ##  # Logging Settings  ##  access_log /var/log/nginx/access.log;  error_log /var/log/nginx/error.log;  ##  # Gzip Settings  ##  gzip on;  # gzip_vary on;  # gzip_proxied any;  # gzip_comp_level 6;  # gzip_buffers 16 8k;  # gzip_http_version 1.1;  # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;  ##  # Virtual Host Configs  ##  include /etc/nginx/conf.d/*.conf;  include /etc/nginx/sites-enabled/*;  server &#123;       listen 80;       server_name chjm.online;       rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;       &#125;  server &#123;       #SSL 默认访问端口号为 443       listen 443 ssl;       #请填写绑定证书的域名       server_name chjm.online;        #请填写证书文件的相对路径或绝对路径       ssl_certificate  cert/chjm.online_bundle.pem;        #请填写私钥文件的相对路径或绝对路径       ssl_certificate_key cert/chjm.online.key;        ssl_session_timeout 5m;       #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;       #请按照以下协议配置       ssl_protocols TLSv1.2 TLSv1.3;       ssl_prefer_server_ciphers on;       location / &#123;             #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。              #例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。             root /home/chjm/kob/web;               index index.html;              try_files $uri $uri/ /index.html;       &#125;            location /api &#123;              proxy_pass http://127.0.0.1:3030;          &#125;            location /websocket &#123;              proxy_pass http://127.0.0.1:3030;              proxy_set_header X-Real-IP $remote_addr;              proxy_set_header Host $http_host;              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;              proxy_http_version 1.1;              proxy_set_header Upgrade $http_upgrade;              proxy_set_header Connection &quot;upgrade&quot;;              proxy_read_timeout  36000s;          &#125;  &#125;  </code></pre><p>}</p><p>然后启动<code>nginx</code></p><p>sudo /etc/init.d/nginx start  # 启动  </p><p>sudo /etc/init.d/nginx reload # 重启动</p><p>若为<code>fail</code></p><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/image-20230314103040049.png" alt="image-20230314103040049"></p><p>可在<code>/var/log/nginxerror.log</code>查看报错信息。</p><p>cd /var/log/nginx<br>sudo vim error.log  </p><p>启动成功即可通过<a href="https://chjm.online/">https://chjm.online</a>访问部署的网站</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OGC标准</title>
      <link href="/2024/07/19/OGC%E6%A0%87%E5%87%86/"/>
      <url>/2024/07/19/OGC%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h1><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719153741.png" alt="image.png|869"></p><h3 id="WMS-服务"><a href="#WMS-服务" class="headerlink" title="WMS 服务"></a>WMS 服务</h3><p>WMS 服务全称是 Web Map Service （web 地图服务），目前 OGC 提供的 WMS 最新版本为1.3.0，并提供了如下的操作接口：</p><ul><li>GetCapabilities：获取服务中的要素及支持的操作<br>  请求格式支持 KVP 和 SOAP，其主要参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719153857.png" alt="image.png"></li><li>GetMap：获取地图数据<br>  请求格式支持 KVP 和 SOAP，其主要参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719153917.png" alt="image.png"></li><li>GetFeatureInfo：获取 getMap 响应地图上某一点的特征数据信息<br>  请求格式支持 KVP 和 SOAP，其主要参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721374774440.png" alt="QQ_1721374774440.png"><h3 id="WFS-服务"><a href="#WFS-服务" class="headerlink" title="WFS 服务"></a>WFS 服务</h3>WFS 服务，全称是 Web Feature Service (web 要素服务)，目前 OGC 提供的 WFS 最新版本为2.0.2，并且提供如下几种操作：</li><li>GetCapabilities： 获取服务中的要素及支持的操作<br>  请求格式支持 KVP 和 SOAP，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721374851406.png" alt="QQ_1721374851406.png"></li><li>DescribeFeatureType： 获取地理要素类型的 GML 应用模式描述文档<br>  请求格式支持 KVP 和 SOAP，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721374908935.png" alt="QQ_1721374908935.png"></li><li>GetFeature： 根据条件查询地理要素信息<br>  请求格式支持 KVP 和 SOAP，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719154239.png"></li></ul><h3 id="WCS-服务"><a href="#WCS-服务" class="headerlink" title="WCS 服务"></a>WCS 服务</h3><p>WCS 服务，全称为 Web Coverage Service（web 栅格服务），目前 OGC 提供的 WCS 的最新版本为2.1，并提供了如下几种操作：</p><ul><li>Getcapabilities: 获取服务中的要素及支持的操作<br>  请求格式支持 KVP 和 SOAP，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719154320.png" alt="image.png"></li><li>DescribeCoverage: 返回标识覆盖范围的文档描述<br>  请求格式支持 KVP 和 SOAP，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719154341.png" alt="image.png"></li><li>GetCoverage: 获取服务器上元数据与请求数据的覆盖数据<br>  请求格式支持 KVP 和 SOAP，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719154402.png" alt="image.png"></li></ul><h3 id="WMTS-服务"><a href="#WMTS-服务" class="headerlink" title="WMTS 服务"></a>WMTS 服务</h3><p>WMTS 服务，全称是 Web Map Tile Service (web 地图切片服务)，目前 OGC 提供的最新版本是1.0.0，WMTS 是 OGC 首个支持 restful 风格的服务标准，提供了如下几种操作：</p><ul><li>GetCapabilities：获取服务的<a href="https://so.csdn.net/so/search?q=%E5%85%83%E6%95%B0%E6%8D%AE&spm=1001.2101.3001.7020">元数据</a>信息<br>  请求格式支持 KVP，SOAP 和 RESTFUL，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719154421.png" alt="image.png"></li><li>GetTile：获取服务的切片信息<br>  请求格式支持 KVP，SOAP 和 RESTFUL，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721375085831.png" alt="QQ_1721375085831.png"></li><li>GetFeatureInfo：获取点选的要素信息<br>  请求格式支持 KVP，SOAP 和 RESTFUL，其请求参数如下：<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719154506.png" alt="image.png"></li></ul><h1 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h1><h2 id="一、什么是-OGC？"><a href="#一、什么是-OGC？" class="headerlink" title="一、什么是 OGC？"></a>一、什么是 OGC？</h2><p><a href="http://www.opengeospatial.org/">OGC</a>，全称是开放<strong>地理空间信息联盟</strong>(Open Geospatial Consortium)，是一个非盈利的国际标准组织，它制定了数据和服务的一系列标准，GIS厂商按照这个标准进行开发可保证<strong>空间数据</strong>的互操作。（来源<a href="https://baike.baidu.com/item/OGC/6466060">百度百科</a>）</p><h2 id="二、OGC-定义了些什么东西？"><a href="#二、OGC-定义了些什么东西？" class="headerlink" title="二、OGC 定义了些什么东西？"></a>二、OGC 定义了些什么东西？</h2><p>OGC 基于 http 或者说是 web 的空间数据操作技术，主要涉及 Web Service 的相关技术。与 ISO/TC211一同推出</p><ul><li>基于 Web 服务（XML）的空间数据互操作实现规范（<strong>本文主要阐述</strong>）</li><li>用于空间数据传输与转换的地理信息标记语言 GML</li><li>提出了一个能无缝集成各种在线空间处理和位置服务的框架即 OWS (OGC Web Service)</li></ul><blockquote><p><strong>意义</strong>：使得分布式空间处理系统能够通过 XML 和 HTTP 技术进行交互，并为各种在线空间数据资源、来自传感器的信息、空间处理服务和位置服务，基于 Web 的发现、访问、集成、分析、利用和可视化提供互操作框架。</p></blockquote><h2 id="三、基于-Web-服务（XML）的空间数据互操作实现规范"><a href="#三、基于-Web-服务（XML）的空间数据互操作实现规范" class="headerlink" title="三、基于 Web 服务（XML）的空间数据互操作实现规范"></a>三、基于 Web 服务（XML）的空间数据互操作实现规范</h2><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240719153741.png" alt="image.png|869"></p><h3 id="3-1-WMS"><a href="#3-1-WMS" class="headerlink" title="3.1 WMS"></a>3.1 WMS</h3><h4 id="3-1-1-定义"><a href="#3-1-1-定义" class="headerlink" title="3.1.1 定义"></a>3.1.1 定义</h4><ul><li>Web 地图服务（WMS）利用具有地理空间位置信息的数据制作地图</li><li>一个 WMS 可以动态地生成具有地理参考数据的地图</li><li>这些地图通常用 GIF、JPEG 或 PNG 等图像格式，或者 SVG、KML、VML 和 WebCGM 等矢量图形格式来表现。</li><li>使用者通过指定的参数获取相应的地图图片。<h4 id="3-1-2-接口"><a href="#3-1-2-接口" class="headerlink" title="3.1.2 接口"></a>3.1.2 接口</h4></li></ul><table><thead><tr><th align="left">接口名称</th><th align="left">接口说明</th></tr></thead><tbody><tr><td align="left">GetCapabilities</td><td align="left">返回服务级元数据，它是对服务信息内容和要求参数的一种描述</td></tr><tr><td align="left">GetMap</td><td align="left">获取地图图片。该操作根据客户端发出的请求参数在服务端进行检索，服务器端返回一个地图图像，其地理空间参数和大小参数是已经明确定义的，返回的地图图像可以是 GIF、JPEG、PNG 或 SVG 格式。</td></tr><tr><td align="left">GetFeatureinfo</td><td align="left">返回显示在地图上的某些特殊要素的信息。该操作根据用户所请求的 X、Y 坐标或感兴趣的图层，返回地图上某些特殊要素的信息，信息以 HTML，GML 或 ASCII 的格式表示。</td></tr></tbody></table><h5 id="3-1-2-1-GetCapabilities-操作请求方法实现参数"><a href="#3-1-2-1-GetCapabilities-操作请求方法实现参数" class="headerlink" title="3.1.2.1 GetCapabilities 操作请求方法实现参数"></a>3.1.2.1 GetCapabilities 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型值为“WMS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作名称，值为“GetCapabilities”</td></tr><tr><td>version</td><td>0或1个(可选)</td><td>字符类型，值为请求的 WMS 的版本号</td></tr><tr><td>format</td><td>0或1个(可选)</td><td>MIME 类型，值为服务元数据的输出格式</td></tr><tr><td>updateSequence</td><td>0或1个(可选)</td><td>字符类型，可取的值有 none、any、equal、lower、higher，用来表示缓存数据更新的方式</td></tr></tbody></table><h5 id="3-1-2-2-GetMap-操作请求方法实现参数"><a href="#3-1-2-2-GetMap-操作请求方法实现参数" class="headerlink" title="3.1.2.2 GetMap 操作请求方法实现参数"></a>3.1.2.2 GetMap 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型标识值为“WMS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，值为“GetMap”</td></tr><tr><td>version</td><td>1个(必选)</td><td>字符类型，值为请求的 WMS 的版本号</td></tr><tr><td>layers</td><td>1个(必选)</td><td>字符类型，值为一个或多个地图图层列表，多个图层之间用”,”隔开</td></tr><tr><td>styles</td><td>1个(必选)</td><td>字符类型，值为请求图层的地图渲染样式</td></tr><tr><td>CRS</td><td>1个(必选)</td><td>字符类型，值为坐标参照系统</td></tr><tr><td>BBOX</td><td>1个(必选)</td><td>Wkt 格式，值为某个 CRS 下的地图边界范围的坐标序列</td></tr><tr><td>width</td><td>1个(必选)</td><td>整型类型，值为地图图片的像素宽度</td></tr><tr><td>height</td><td>1个(必选)</td><td>整型类型，值为地图图片的像素高度</td></tr><tr><td>format</td><td>1个(必选)</td><td>字符类型，值为地图的输出格式</td></tr><tr><td>transparent</td><td>0或1个(可选)</td><td>字符类型，值为 true 或者 false，用来表示地图图层是否透明(默认情况下是不透明的)</td></tr><tr><td>bgcolor</td><td>0或1个(可选)</td><td>值为十六进制的 RGB 值，表示地图的背景颜色</td></tr><tr><td>exceptions</td><td>0或1个(可选)</td><td>值为 WMS 的异常信息报告的格式(默认情况下是 XML 格式)</td></tr><tr><td>time</td><td>0或1个(可选)</td><td>时间类型，值为时间值，表示需要在图层中有时间信息</td></tr><tr><td>elevation</td><td>0或1个(可选)</td><td>数字类型，值为高程值，表示需要在图层中有高程信息</td></tr></tbody></table><h5 id="3-1-2-3-GetFeatureInfo-操作请求方法实现参数"><a href="#3-1-2-3-GetFeatureInfo-操作请求方法实现参数" class="headerlink" title="3.1.2.3 GetFeatureInfo 操作请求方法实现参数"></a>3.1.2.3 GetFeatureInfo 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型标识值为“WMS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，值为“GetFeatureInfo”</td></tr><tr><td>version</td><td>1个(必选)</td><td>字符类型，值为请求的 WMS 的版本号</td></tr><tr><td>map request part</td><td>1个(必选)</td><td>字符类型，值为获得地图的部分操作参数</td></tr><tr><td>query_layers</td><td>1个(必选)</td><td>字符类型，值为查询的一个或多个地图图层列表，多个图层之间用”,”隔开</td></tr><tr><td>info_format</td><td>1个(必选)</td><td>MIME 类型，值为请求信息的返回类型</td></tr><tr><td>I</td><td>1个(必选)</td><td>整型类型，值为待查询点的在地图图片上的像素列号</td></tr><tr><td>J</td><td>1个(必选)</td><td>整型类型，值为待查询点的在地图图片上的像素行号</td></tr><tr><td>feature_count</td><td>0或1个(可选)</td><td>整型类型，值为返回信息中的要素的个数(默认是1)</td></tr><tr><td>exceptions</td><td>0或1个(可选)</td><td>值为 WMS 的异常信息报告的格式(默认情况下是 XML 格式)</td></tr></tbody></table><h3 id="3-2WFS"><a href="#3-2WFS" class="headerlink" title="3.2WFS"></a>3.2WFS</h3><h4 id="3-2-1-定义"><a href="#3-2-1-定义" class="headerlink" title="3.2.1 定义"></a>3.2.1 定义</h4><ul><li>Web 要素服务（WFS）返回的是要素级的 GML 编码，并提供对要素的增加、修改、删除等事务操作，是对 Web 地图服务的进一步深入</li><li>回结果的是 XML 格式的 WFS 服务元数据文档<h4 id="3-2-2-接口"><a href="#3-2-2-接口" class="headerlink" title="3.2.2 接口"></a>3.2.2 接口</h4></li></ul><table><thead><tr><th>接口名称</th><th>接口说明</th></tr></thead><tbody><tr><td>GetCapabilities</td><td>GetCapabilities 请求用于查询 WFS 服务的能力信息，包括支持的操作、支持的格式、空间坐标、包含的资源等。它主要的目的是使客户端在使用 GetFeature 请求前可以对 WFS 服务有一个基本的了解，从而可以设置正确的参数。</td></tr><tr><td>DescribeFeatureType</td><td>返回描述可以提供服务的任何要素结构的 XML 文档，即图层描述信息</td></tr><tr><td>GetFeature</td><td>为一个获取要素实例的请求提供服务，通过 GetFeature 操作可以由指定的属性条件、空间条件或者两者叠加的条件进行空间查询。</td></tr><tr><td>Transaction</td><td>为事务请求提供服务，使客户端可对服务器端所提供的地图要素类执插入，更新，删除等命令</td></tr><tr><td>GetGmlObject</td><td>通过 XLink 获取 GML 对象</td></tr><tr><td>LockFeature</td><td>处理在一个事务期间对一个或多个要素类型实例上锁的请求</td></tr></tbody></table><h5 id="3-2-2-1-GetCapabilities-操作请求方法实现参数"><a href="#3-2-2-1-GetCapabilities-操作请求方法实现参数" class="headerlink" title="3.2.2.1 GetCapabilities 操作请求方法实现参数"></a>3.2.2.1 GetCapabilities 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型值为“WFS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作名称，值为“GetCapabilities”</td></tr><tr><td>versions</td><td>0或1个(可选)</td><td>字符类型，值为请求的 WFS 的版本号</td></tr></tbody></table><h5 id="3-2-2-2-DescribeFeatureType-操作请求方法实现参数"><a href="#3-2-2-2-DescribeFeatureType-操作请求方法实现参数" class="headerlink" title="3.2.2.2 DescribeFeatureType 操作请求方法实现参数"></a>3.2.2.2 DescribeFeatureType 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型值为“WFS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作名称，值为“DescribeFeatureType”</td></tr><tr><td>typeName</td><td>0或1个(可选)</td><td>字符类型，值为要素类型的列表，多个值之间用“，”隔开，默认解析包括的全部要素类型</td></tr><tr><td>outputFormat</td><td>0或1个(可选)</td><td>MIME 类型，值为输出格式</td></tr></tbody></table><h5 id="3-2-2-3-GetFeature-操作请求方法实现参数"><a href="#3-2-2-3-GetFeature-操作请求方法实现参数" class="headerlink" title="3.2.2.3 GetFeature 操作请求方法实现参数"></a>3.2.2.3 GetFeature 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型标识值为“WFS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作值为“GetFeature”</td></tr><tr><td>typeName</td><td>1个(必选)</td><td>字符类型，值为请求的要素类型的名称，多个名称之间用“，”隔开</td></tr><tr><td>version</td><td>0或1个(可选)</td><td>字符类型，值为请求的 WFS 的版本号</td></tr><tr><td>outputFormat</td><td>0或1个(可选)</td><td>MIME 类型，值为输出格式</td></tr><tr><td>resultType</td><td>0或1个(可选)</td><td>字符类型，值为请求的结果类型</td></tr><tr><td>propertyName</td><td>0或1个(可选)</td><td>字符类型，值为请求要素的属性名，多个值之间用“，”隔开</td></tr><tr><td>featureVersion</td><td>0或1个(可选)</td><td>字符类型，值为要素的版本，值为 ALL 返回请求的要素的所有版本，没有值默认为返回请求要素的最新版本</td></tr><tr><td>maxFeature</td><td>0或1个(可选)</td><td>整型类型，值为请求要素的最大数，默认值为满足查询的所有结果集</td></tr><tr><td>expiry</td><td>0或1个(可选)</td><td>数字类型，要素被锁定的时间</td></tr><tr><td>SRSName</td><td>0或1个(可选)</td><td>字符类型，值为坐标系统名</td></tr><tr><td>featureID</td><td>0或1个(可选)</td><td>字符类型，值为要素的 ID，多个 ID 之间用“，”隔开</td></tr><tr><td>filter</td><td>0或1个(可选)</td><td>请求要素的过滤条件</td></tr><tr><td>bBox</td><td>0或1个(可选)</td><td>Wkt 格式，请求指定要素查询范围，可以替代 featureId 和 filter 参数</td></tr><tr><td>sortby</td><td>0或1个(可选)</td><td>字符类型，查询结果属性值的排序依据</td></tr></tbody></table><h3 id="3-3WCS"><a href="#3-3WCS" class="headerlink" title="3.3WCS"></a>3.3WCS</h3><h4 id="3-3-1-定义"><a href="#3-3-1-定义" class="headerlink" title="3.3.1 定义"></a>3.3.1 定义</h4><ul><li>Web 栅格服务面向空间影像数据</li><li>将包含地理位置值的地理空间数据作为“栅格（Coverage）”在网上相互交换</li><li>允许用户访问“Coverage”数据，如卫星影像、数字高程数据等，也就是栅格数据<h4 id="3-3-2-接口"><a href="#3-3-2-接口" class="headerlink" title="3.3.2 接口"></a>3.3.2 接口</h4></li></ul><table><thead><tr><th>接口名称</th><th>接口说明</th></tr></thead><tbody><tr><td>GetCapabilities</td><td>返回描述服务和数据集的 XML 文档</td></tr><tr><td>DescribeCoverage</td><td>在 GetCapabilities 确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的栅格格式返回地理位置的值或属性</td></tr><tr><td>GetCoverage</td><td>允许客户端请求由具体的 WCS 服务器提供的任一覆盖层的完全描述</td></tr></tbody></table><h5 id="3-3-2-1-GetCapabilities-操作请求方法实现参数"><a href="#3-3-2-1-GetCapabilities-操作请求方法实现参数" class="headerlink" title="3.3.2.1 GetCapabilities 操作请求方法实现参数"></a>3.3.2.1 GetCapabilities 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>SERVICE</td><td>1个（必选）</td><td>字符类型，服务类型为“WCS”</td></tr><tr><td>REQUEST</td><td>1个（必选）</td><td>字符类型，请求的操作名称，值为“GetCapabilities”</td></tr><tr><td>ACCEPTVERSIONS</td><td>0或1个（可选）</td><td>字符类型，值为请求的 WMTS 的版本号</td></tr><tr><td>SECTIONS</td><td>0或1个（可选）</td><td>字符类型，请求元数据文档0或多个节的名称，多个名称之间用“，”隔开，不须按顺序排列。值为空默认返回整个元数据文档</td></tr><tr><td>UPDATESEQUENCE</td><td>0或1个（可选）</td><td>字符类型，值为 increased，为空时默认返回最新的元数据文档</td></tr><tr><td>ACCEPTFORMATS</td><td>0或1个（可选）</td><td>字符类型，接受的格式</td></tr></tbody></table><h5 id="3-3-2-2-DescribeCoverage-操作请求方法实现参数"><a href="#3-3-2-2-DescribeCoverage-操作请求方法实现参数" class="headerlink" title="3.3.2.2 DescribeCoverage 操作请求方法实现参数"></a>3.3.2.2 DescribeCoverage 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>VERSION</td><td>1个（必选）</td><td>字符类型，值为请求的 WCS 的版本号</td></tr><tr><td>SERVICE</td><td>1个（必选）</td><td>字符类型，服务类型为“WCS”</td></tr><tr><td>REQUEST</td><td>1个（必选）</td><td>字符类型，请求的操作名称，值为“DescribeCoverage”</td></tr><tr><td>IDENTIFIERS</td><td>1个（必选）</td><td>字符类型，标识符</td></tr></tbody></table><h5 id="3-3-2-3-GetCoverage-操作请求方法实现参数"><a href="#3-3-2-3-GetCoverage-操作请求方法实现参数" class="headerlink" title="3.3.2.3 GetCoverage 操作请求方法实现参数"></a>3.3.2.3 GetCoverage 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>VERSION</td><td>1个（必选）</td><td>字符类型，值为请求的 WCS 的版本号</td></tr><tr><td>SERVICE</td><td>1个（必选）</td><td>字符类型，服务类型为“WCS”</td></tr><tr><td>REQUEST</td><td>1个（必选）</td><td>字符类型，请求的操作名称，值为“GetCoverage”</td></tr><tr><td>coverage</td><td>1个（必选）</td><td>字符类型，请求的图层名称</td></tr><tr><td>BBOX</td><td>1个（必选）</td><td>字符类型，请求的图层显示范围</td></tr><tr><td>CRS</td><td>1个（必选）</td><td>字符类型，请求的坐标系代码</td></tr><tr><td>FORMAT</td><td>1个（必选）</td><td>字符类型，请求图片格式</td></tr></tbody></table><h3 id="3-4WMTS"><a href="#3-4WMTS" class="headerlink" title="3.4WMTS"></a>3.4WMTS</h3><h4 id="3-4-1-定义"><a href="#3-4-1-定义" class="headerlink" title="3.4.1 定义"></a>3.4.1 定义</h4><ul><li>和 WMS 并列的重要 OGC 规范之一</li><li>采用缓存技术能够缓解 WebGIS 服务器端数据处理的压力，提高交互响应速度</li><li>目前各种缓存技术相互兼容的一种方法<h4 id="3-4-2-接口"><a href="#3-4-2-接口" class="headerlink" title="3.4.2 接口"></a>3.4.2 接口</h4></li></ul><table><thead><tr><th>接口名称</th><th>接口描述</th></tr></thead><tbody><tr><td>GetCapabilities</td><td>获取 WMTS 的能力文档（即元数据文档），里面包含服务的所有信息</td></tr><tr><td>GetTile</td><td>获取地图瓦片。该操作根据客户端发出的请求参数在服务端进行检索，服务器端返回地图瓦片图像。</td></tr><tr><td>GetFeatureInfo</td><td>通过在 WMTS 图层上指定一定的条件，返回指定的地图瓦片内容对应的要素信息</td></tr></tbody></table><h5 id="3-4-2-1-GetCapabilities-操作请求方法实现参数"><a href="#3-4-2-1-GetCapabilities-操作请求方法实现参数" class="headerlink" title="3.4.2.1 GetCapabilities 操作请求方法实现参数"></a>3.4.2.1 GetCapabilities 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型值为“WMTS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作名称，值为“GetCapabilities”</td></tr><tr><td>acceptVersions</td><td>0或1个(可选)</td><td>字符类型，值为请求的 WMTS 的版本号</td></tr><tr><td>sections</td><td>0或1个(可选)</td><td>字符类型，请求元数据文档0或多个节的名称，多个名称之间用“，”隔开，不须按顺序排列。值为空默认返回整个元数据文档</td></tr><tr><td>updateSequence</td><td>0或1个(可选)</td><td>字符类型，值为 increased，为空时默认返回最新的元数据文档</td></tr><tr><td>acceptFormat</td><td>0或1个(可选)</td><td>MIME 类型，值为服务元数据的输出格式</td></tr></tbody></table><h5 id="3-4-2-2-GetTile-操作请求方法实现参数"><a href="#3-4-2-2-GetTile-操作请求方法实现参数" class="headerlink" title="3.4.2.2 GetTile 操作请求方法实现参数"></a>3.4.2.2 GetTile 操作请求方法实现参数</h5><table><thead><tr><th>参数名称</th><th>参数个数</th><th>参数类型和值</th></tr></thead><tbody><tr><td>service</td><td>1个(必选)</td><td>字符类型，服务类型标识值为“WMTS”</td></tr><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作值为“GetTile”</td></tr><tr><td>version</td><td>1个(必选)</td><td>字符类型，值为请求的 WMTS 的版本号</td></tr><tr><td>layer</td><td>1个(必选)</td><td>字符类型，值为请求的图层名称</td></tr><tr><td>style</td><td>1个(必选)</td><td>字符类型，值为请求图层的渲染样式</td></tr><tr><td>format</td><td>1个(必选)</td><td>字符类型，值为瓦片地图的输出格式</td></tr><tr><td>tileMatrixSet</td><td>1个(必选)</td><td>字符类型，瓦片矩阵数据集，其值在服务的元数据文档中指定</td></tr><tr><td>tileMatrix</td><td>1个(必选)</td><td>字符类型，瓦片矩阵，其值在服务的元数据文档中指定</td></tr><tr><td>tileRow</td><td>1个(必选)</td><td>整型类型，值为大于0的整数，表示瓦片矩阵的行号</td></tr><tr><td>tileCol</td><td>1个(必选)</td><td>整型类型，值为大于0的整数，表示瓦片矩阵的列号</td></tr><tr><td>Other sample dimensions</td><td>0或1个(可选)</td><td>字符类型，其他允许的参数</td></tr></tbody></table><h5 id="3-4-2-3-GetFeatureInfo-操作请求方法实现参数"><a href="#3-4-2-3-GetFeatureInfo-操作请求方法实现参数" class="headerlink" title="3.4.2.3 GetFeatureInfo 操作请求方法实现参数"></a>3.4.2.3 GetFeatureInfo 操作请求方法实现参数</h5><table><thead><tr><th>service</th><th>1个(必选)</th><th>字符类型，服务类型值为“WMTS”</th></tr></thead><tbody><tr><td>request</td><td>1个(必选)</td><td>字符类型，请求的操作值为“GetFeatureInfo”</td></tr><tr><td>version</td><td>1个(必选)</td><td>字符类型，值为请求的 WMTS 的版本号</td></tr><tr><td>J</td><td>1个(必选)</td><td>整型类型，值为大于0的整数，表示瓦片上一指定像素点的行号</td></tr><tr><td>I</td><td>1个(必选)</td><td>整型类型，值为大于0的整数，表示瓦片上一指定像素点的列号</td></tr><tr><td>info_format</td><td>1个(必选)</td><td>MIME 类型，值为请求信息的返回类型</td></tr><tr><td>layer, style, format, Sample dimension, tileMatrixSet, tileMatrix, tileRow, tileCol</td><td>1个(必选)</td><td>这些参数的值应与请求 GetTile 的相应参数保持一致</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geoserver_learn</title>
      <link href="/2024/07/19/geoserver_learn/"/>
      <url>/2024/07/19/geoserver_learn/</url>
      
        <content type="html"><![CDATA[<p>TARGET DECK: Temp</p><h2 id="geoserver-实现跨域"><a href="#geoserver-实现跨域" class="headerlink" title="geoserver 实现跨域"></a>geoserver 实现跨域</h2><p>在 tomcat 服务部署文件中 找到 Geoserver 服务安装目录下 WEB-INF 文件夹的 web.xml 文件（D:…\apache-tomcat-9.0.41\webapps\geoserver\WEB-INF\web.xml）<br>找到下面两段被注释代码，并解除注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Uncomment following filter to enable CORS <span class="keyword">in</span> Tomcat. Do not forget the second config block further down.</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cross-origin<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.origins<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.methods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,PUT,DELETE,HEAD,OPTIONS<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span></span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- Uncomment following filter to enable CORS </span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cross-origin<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span></span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>上面的第一段代码实现 <code>在tomcat服务器上，允许GeoServer跨域访问的</code>。在该web.xml文件中，同样注释了 <code>Jett服务器上，允许GeoServer跨域访问</code> 的代码，经测试，只能取消相应服务器的 <code>允许跨域访问</code> 注释，不然会出现不能运行 GeoServer 服务的问题<br>上述方法是修改 GeoServer 的配置实现跨域，也可以通过修改 tomcat 服务实现允许访问，方法如下：</p><ol><li>下载 cors-filter.jar 和 java-property-utils.jar，地址如下<br> <a href="https://mvnrepository.com/artifact/com.thetransactioncompany/cors-filter/2.9.1">https://mvnrepository.com/artifact/com.thetransactioncompany/cors-filter/2.9.1</a><br> <a href="https://mvnrepository.com/artifact/com.thetransactioncompany/java-property-utils/1.16">https://mvnrepository.com/artifact/com.thetransactioncompany/java-property-utils/1.16</a></li><li> 将下载的两个 jar 包 拷贝至 tomcat 的安装路径下 lib 文件夹中，如：D:…\apache-tomcat-9.0.41\lib</li></ol><p>最后，重启 tomcat，解决问题</p><h2 id="geoserver-使用QGIS-保存的图层样式"><a href="#geoserver-使用QGIS-保存的图层样式" class="headerlink" title="geoserver 使用QGIS 保存的图层样式"></a>geoserver 使用QGIS 保存的图层样式</h2><p>导出矢量图层样式<br>右击图层，选择属性按钮<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721370014161.png" alt="QQ_1721370014161.png|634"></p><p>使用 SLD4raster 导出栅格数据样式<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721371478756.png" alt="QQ_1721371478756.png|624"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/QQ_1721371610113.png" alt="QQ_1721371610113.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS红宝书学习</title>
      <link href="/2024/07/13/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/13/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JS红宝书学习"><a href="#JS红宝书学习" class="headerlink" title="JS红宝书学习"></a>JS红宝书学习</h1><h2 id="第一章-什么是-JavaScript"><a href="#第一章-什么是-JavaScript" class="headerlink" title="第一章 什么是 JavaScript"></a>第一章 什么是 JavaScript</h2><p>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。</p><ul><li>ECMAScript：由 ECMA-262定义并提供核心功能。</li><li>文档对象模型（DOM）：提供与网页内容交互的方法和接口。<ul><li>DOM通过创建表示文档的树</li><li>DOM Core和DOM HTML</li></ul></li><li>浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。<h2 id="第二章-HTML-中的-JavaScript"><a href="#第二章-HTML-中的-JavaScript" class="headerlink" title="第二章 HTML 中的 JavaScript"></a>第二章 HTML 中的 JavaScript</h2><h3 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a>&lt;script&gt;元素</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4>1、包含在&lt;script&gt;内的代码会被从上到下解释<br>2、标签位置：放在页面之前 -&gt; 页面会在处理 JavaScript 代码之前完全渲染页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里是页面内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4>1、src</li><li>只会下载并执行脚本文件，从而忽略标签内代码</li><li>可以是路径或者 URL<br>2、defer 推迟执行脚本<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里是页面内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>脚本会被延迟到整个页面都解析完毕后再运行，即立即下载，但延迟执行。</li><li>标记为 defer 的脚本按照它们出现的次序延迟执行，重点在于它们之间 可能存在依赖关系。</li><li>第一个推迟的脚本会在第二个推迟的脚本之前执行，而且两者都会在 DOMContentLoaded 事件之前执行。<br>3、async 异步执行脚本</li><li>脚本会被延迟到整个页面都解析完毕后再运行，即立即下载，但异步执行。</li><li>标记为 async 的脚本并不保证能按照它们出现的次序执行，重点在于它们之间没有依赖关系</li><li>异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded之前或之后<br>4、动态加载脚本<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4>虽然可以直接在 HTML 文件中嵌入 JavaScript 代码，但通常认为最佳实践是尽可能将 JavaScript 代码放在外部文件中。不过这个<br>最佳实践并不是明确的强制性规则。推荐使用外部文件的理由如下。</li><li>可维护性。JavaScript 代码如果分散到很多 HTML 页面，会导致维护困难。而用一个目录保存所有 JavaScript 文件，则更容易维护，这样开发者就可以独立于使用它们的 HTML 页面来编辑代码。</li><li>缓存。浏览器会根据特定的设置缓存所有外部链接的 JavaScript 文件，<strong>这意味着如果两个页面都用到同一个文件，则该文件只需下载一次。这最终意味着页面加载更快。</strong></li><li>适应未来。通过把 JavaScript 放到外部文件中，就不必考虑用 XHTML 或前面提到的注释黑科技。包含外部 JavaScript 文件的语法在 HTML 和 XHTML 中是一样的。</li></ul><h3 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h3><p>混杂模式（quirks mode）、标准模式（standards mode）、准标准模式（almost standards mode）</p><p>H5中，标准模式通过下列文档类型声明开启：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML5 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt;元素"></a>&lt;noscript&gt;元素</h3><p>&lt;noscript&gt;元素可以包含任何可以出现在&lt;body&gt;中的HTML元素，&lt;script&gt;除外。<br>在下列两种情况下，浏览器将显示包含在&lt;noscript&gt;中的内容：</p><ul><li>浏览器不支持脚本；</li><li>浏览器对脚本的支持被关闭。<br>任何一个条件被满足，包含在&lt;noscript&gt;中的内容就会被渲染。否则，浏览器不会渲染&lt;noscript&gt;中的内容。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This page requires a JavaScript-enabled browser.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。<h2 id="第三章-语言基础"><a href="#第三章-语言基础" class="headerlink" title="第三章 语言基础"></a>第三章 语言基础</h2><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3>1、区分大小写<br>2、标识符使用驼峰大小写形式，即第一个单词的首字母小写，后面每个单词的首字母大写<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3></li><li>要对整个脚本启用严格模式，在脚本开头加上这一行：<br><code>&quot;use strict&quot;;</code></li><li>也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明变量的关键字"><a href="#声明变量的关键字" class="headerlink" title="声明变量的关键字"></a>声明变量的关键字</h3></li></ul><p><strong>var</strong></p><ul><li>函数作用域</li><li>声明提升</li><li>同一作用域可重复声明 <em>由于声明会被提升，JS引擎会自动将多余的声明在作用域顶部合并为一个声明</em></li><li>使用 var在全局作用域中声明的变量会成为 window 对象的属性</li></ul><p><strong>let</strong></p><ul><li>块作用域（<strong>任何一对花括号中的语句集都属于一个块</strong>）<em>块作用域是函数作用域的子集</em></li><li>无声明提升( 暂时性死区)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 会被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined </span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>; </span><br><span class="line"><span class="comment">// age 不会被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError：age 没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure></li><li>同一作用域不可重复声明，但可以嵌套声明 <em>因为无声明提升</em></li><li>使用 let 在全局作用域中声明的变量不会成为 window 对象的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// &#x27;Matt&#x27; </span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>for 循环中的 let 声明<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>) </span><br><span class="line">&#125;   <span class="comment">// 会输出 5、5、5、5、5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>) </span><br><span class="line">&#125;   <span class="comment">// 会输出 0、1、2、3、4</span></span><br></pre></td></tr></table></figure>  之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。<br>  而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。</li></ul><p><strong>const</strong></p><ul><li>const 的行为与 let 基本相同，唯一一个重要的区别是用它<strong>声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误</strong>。</li><li>const 声明的限制只适用于它指向的变量的引用。换句话说，<strong>如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制</strong>。</li><li><strong>JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例</strong>，虽然 const 变量跟 let 变量很相似，但是不能用 const 来声明迭代变量（因为迭代变量会自增）：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>不过，如果你只想用 const 声明一个不会被修改的 for 循环变量，那也是可以的。也就是说，每<br>次迭代只是创建一个新变量。<strong>这对 for-of 和 for-in 循环特别有意义</strong>：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(j); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(key); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// a, b </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(value); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>6种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol<br>1种复杂数据类型： Object（对象）<h4 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;some string&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> message); <span class="comment">// &quot;string&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(message)); <span class="comment">// &quot;string&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">95</span>); <span class="comment">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure></li><li>对未初始化的变量调用 typeof 时，返回的结果是”undefined”<br>对未声明的变量调用 typeof 时，返回的结果还是”undefined”</li><li>逻辑上讲，null 值表示一个空对象指针，所以typeof 传一个 null 会返回”object”<h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4></li><li><strong>浮点数</strong></li><li><strong>值的范围</strong><br>  Infinity<br>  isFinite()函数</li><li><strong>NaN</strong><br>  任何涉及 NaN 的操作始终返回 NaN<br>  NaN 不等于包括 NaN 在内的任何值<br>  isNaN()函数  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// false，10 是数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// false，可以转换为数值 10 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)); <span class="comment">// true，不可以转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">// false，可以转换为数值 1</span></span><br></pre></td></tr></table></figure></li><li><strong>数值转换</strong><br> Number()：null返回 0、undefined返回 NaN、<em>空字符串返回0</em><br> parseInt()：接收第二个参数用于指定底数（进制数）、<em>空字符串返回 NaN</em><br> parseFloat()：只解析十进制值、”22.34.5”将转换成 22.34<blockquote><p>对对象调用上述方法，则先调用对象的 valueOf（）方法，对其返回值进行转换，如果转换结果是 NaN，则再调用 toString()方法，对其返回值进行转换。</p></blockquote><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><h5 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h5>ECMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lang = <span class="string">&quot;Java&quot;</span>; </span><br><span class="line">lang = lang + <span class="string">&quot;Script&quot;</span>; </span><br></pre></td></tr></table></figure>这里，变量 lang 一开始包含字符串”Java”。紧接着，lang 被重新定义为包含”Java”和”Script”的组合，也就是”JavaScript”。整个过程首先会分配一个足够容纳 10 个字符的空间，然后填充上”Java”和”Script”。最后销毁原始的字符串”Java”和字符串”Script”<h5 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h5></li></ul><p><strong>toString()方法</strong><br>toString()方法可见于数值、布尔值、对象和字符串值。（没错，字符串值也有 toString()方法，该方法只是简单地返回自身的一个副本。）null 和 undefined 值没有 toString()方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">11</span>; </span><br><span class="line"><span class="keyword">let</span> ageAsString = age.toString(); <span class="comment">// 字符串&quot;11&quot; </span></span><br><span class="line"><span class="keyword">let</span> found = <span class="literal">true</span>; </span><br><span class="line"><span class="keyword">let</span> foundAsString = found.toString(); <span class="comment">// 字符串&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p><strong>String()函数</strong></p><ul><li>如果值有 toString()方法，则调用该方法（不传参数）并返回结果。</li><li>如果值是 null，返回”null”。</li><li>如果值是 undefined，返回”undefined”。<h5 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在，可以用模板字面量这样实现：</span></span><br><span class="line"><span class="keyword">let</span> interpolatedTemplateLiteral = </span><br><span class="line"> <span class="string">`<span class="subst">$&#123; value &#125;</span> to the <span class="subst">$&#123; exponent &#125;</span> power is <span class="subst">$&#123; value * value &#125;</span>`</span>;</span><br></pre></td></tr></table></figure></li><li>任何插入的变量也会从它们最接近的作用域中取值</li><li>所有插入的值都会使用 toString()强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123; <span class="string">` World `</span> &#125;</span>!`</span>); <span class="comment">// Hello, World! </span></span><br><span class="line"><span class="comment">// 将表达式转换为字符串时会调用 toString()：</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;World&#x27;</span> &#125;; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123; foo &#125;</span>!`</span>); <span class="comment">// Hello, World! </span></span><br><span class="line"><span class="comment">// 在插值表达式中可以调用函数和方法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">word</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123; word[<span class="number">0</span>].toUpperCase() &#125;</span><span class="subst">$&#123; word.slice(<span class="number">1</span>) &#125;</span>`</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; capitalize(<span class="string">&#x27;hello&#x27;</span>) &#125;</span>, <span class="subst">$&#123; capitalize(<span class="string">&#x27;world&#x27;</span>) &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure><h5 id="模板字面量标签函数"><a href="#模板字面量标签函数" class="headerlink" title="模板字面量标签函数"></a>模板字面量标签函数</h5>模板字面量也支持定义标签函数（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>; </span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, aValExpression, bValExpression, sumExpression</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(strings);  <span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;] </span></span><br><span class="line"> <span class="built_in">console</span>.log(aValExpression);  <span class="comment">// 6 </span></span><br><span class="line"> <span class="built_in">console</span>.log(bValExpression);  <span class="comment">// 9 </span></span><br><span class="line"> <span class="built_in">console</span>.log(sumExpression);  <span class="comment">// 15 </span></span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> untaggedResult = <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>; </span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(untaggedResult); <span class="comment">// &quot;6 + 9 = 15&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot;</span></span><br></pre></td></tr></table></figure>因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）将它们收集到一个<br>数组中：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>; </span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, ...expressions</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(strings); </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">const</span> expression <span class="keyword">of</span> expressions) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(expression); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>; </span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;] </span></span><br><span class="line"><span class="comment">// 6 </span></span><br><span class="line"><span class="comment">// 9 </span></span><br><span class="line"><span class="comment">// 15 </span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot;</span></span><br></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h4><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4>ECMAScript中的所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位表示，而是先把值转换为<strong>32 位</strong>整数，再进行位操作，之后再把结果转换为 64 位。</li></ul><p><strong>有符号整数</strong>使用 32 位的前 31 位表示整数值。第 32 位表示数值的符号，如 0 表示正，1 表示负。<br><strong>负值</strong>以一种称为<strong>二补数（或补码</strong>的二进制编码存储。一个数值的二补数通过如下 3 个步骤计算得到：<br> (1) 确定绝对值的二进制表示（如，对于18，先确定 18 的二进制表示）；<br> (2) 找到数值的一补数（或反码），换句话说，就是每个 0 都变成 1，每个 1 都变成 0；<br> (3) 给结果加 1。</p><h4 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h4><ul><li>逻辑非</li><li>逻辑与</li><li>逻辑或<h4 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h4></li><li>乘法操作符</li><li>除法操作符</li><li>取模操作符<h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4>ECMAScript 7 新增了指数操作符，<strong>Math.pow()</strong> 现在有了自己的操作符**，结果是一样的：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 9 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">16</span>, <span class="number">0.5</span>); <span class="comment">// 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span>** <span class="number">0.5</span>); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure>不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squared = <span class="number">3</span>; </span><br><span class="line">squared **= <span class="number">2</span>; </span><br><span class="line"><span class="built_in">console</span>.log(squared); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h4 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h4><h4 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h4>关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），用法跟数学课上学的一样。这几个操作符都返回布尔值。</li><li>如果操作数都是数值，则执行数值比较。</li><li>如果操作数都是字符串，则逐个比较字符串中对应字符的编码。</li><li>如果有任一操作数是数值，则将另一个操作数转换为数值，执行数值比较。</li><li>如果有任一操作数是对象，则调用其 valueOf()方法，取得结果后再根据前面的规则执行比较。</li><li>如果没有 valueOf()操作符，则调用 toString()方法，取得结果后再根据前面的规则执行比较。</li><li>如果有任一操作数是布尔值，则将其转换为数值再执行比较。<h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4></li></ul><p><strong>等于和不等于</strong><br> 这两个操作符都<em>会先进行类型转换</em>（通常称为强制类型转换）再确定操作数是否相等<br><strong>全等和不全等</strong><br> 这两个操作符<em>不会进行类型转换</em>（通常称为强制类型转换）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> != <span class="number">55</span>); <span class="comment">// false，转换后相等</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="string">&quot;55&quot;</span> !== <span class="number">55</span>); <span class="comment">// true，不相等，因为数据类型不同</span></span><br></pre></td></tr></table></figure><h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = boolean_expression ? true_value : false_value;</span><br></pre></td></tr></table></figure><h4 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h4><h4 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h4><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><h4 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h4><p>循环体内的代码至少执行一次</p><h4 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h4><p>while 循环体内的代码有可能不会执行</p><h4 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h4><h4 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h4><p>for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号键属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">in</span> <span class="built_in">window</span>) &#123; </span><br><span class="line"> <span class="built_in">document</span>.write(propName); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了确保局部变量不被修改，推荐使用 const</p><h4 id="for-of-语句"><a href="#for-of-语句" class="headerlink" title="for-of 语句"></a>for-of 语句</h4><p>for-of 语句是一种严格的迭代语句，用于遍历可迭代对象的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]) &#123; </span><br><span class="line"> <span class="built_in">document</span>.write(el); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了确保局部变量不被修改，推荐使用 const</p><h4 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(i); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h4><p>break 语句用于立即退出循环，强制执行循环后的下一条语句。<br>continue 语句也用于立即退出循环，但会再次从循环顶部开始执行</p><h4 id="with-语句-不推荐使用"><a href="#with-语句-不推荐使用" class="headerlink" title="with 语句  (不推荐使用)"></a>with 语句  (不推荐使用)</h4><h4 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="string">&quot;hello world&quot;</span>) &#123; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot; world&quot;</span>: </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Greeting was found.&quot;</span>); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&quot;goodbye&quot;</span>: </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Closing was found.&quot;</span>); </span><br><span class="line"> <span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">default</span>: </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Unexpected message was found.&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四章-变量、作用域与内存"><a href="#第四章-变量、作用域与内存" class="headerlink" title="第四章 变量、作用域与内存"></a>第四章 变量、作用域与内存</h2><h3 id="原始值与引用值"><a href="#原始值与引用值" class="headerlink" title="原始值与引用值"></a>原始值与引用值</h3><p><strong>原始值</strong>（primitive value）就是最简单的数据，保存原始值的变量是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。<br><strong>引用值</strong>（reference value）则是由多个值构成的对象，保存引用值的变量是按引用（by reference）访问的，<br>在操作对象时，实际上操作的是对该对象的引用（reference）而非实际的对象本身。</p><p>注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会<br>创建一个 Object 类型的实例，但其行为类似原始值。下面来看看这两种初始化方式的差异：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name1 = <span class="string">&quot;Nicholas&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> name2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;Matt&quot;</span>); </span><br><span class="line">name1.age = <span class="number">27</span>; </span><br><span class="line">name2.age = <span class="number">26</span>; </span><br><span class="line"><span class="built_in">console</span>.log(name1.age); <span class="comment">// undefined </span></span><br><span class="line"><span class="built_in">console</span>.log(name2.age); <span class="comment">// 26 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name1); <span class="comment">// string </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name2); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h4 id="复制值时"><a href="#复制值时" class="headerlink" title="复制值时"></a>复制值时</h4><p><strong>原始值的复制</strong><br>复制的是值，两个变量可以独立使用，互不干扰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span>; </span><br><span class="line"><span class="keyword">let</span> num2 = num1; </span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240714105838.png" alt="image.png|180"><br><strong>引用值的复制</strong><br>复制的是指针，一个对象上面的变化会在另一个对象上反映出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line"><span class="keyword">let</span> obj2 = obj1; </span><br><span class="line">obj1.name = <span class="string">&quot;Nicholas&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240714105954.png" alt="image.png"></p><h4 id="传递参数时"><a href="#传递参数时" class="headerlink" title="传递参数时"></a>传递参数时</h4><p>ECMAScript 中所有函数的参数都是按值传递的<br><strong>原始值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">num</span>) </span>&#123; </span><br><span class="line"> num += <span class="number">10</span>; </span><br><span class="line"> <span class="keyword">return</span> num; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> count = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> result = addTen(count); </span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 20，没有变化</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>函数 addTen()有一个参数 num，它其实是一个局部变量。在调用时，变量 count 作为参数传入。count 的值是 20，这个值被复制到参数 num 以便在 addTen()内部使用。在函数内部，参数 num的值被加上了 10，但这不会影响函数外部的原始变量 count。参数 num 和变量 count 互不干扰<br><strong>引用值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line"> obj.name = <span class="string">&quot;Nicholas&quot;</span>; </span><br><span class="line"> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line"> obj.name = <span class="string">&quot;Greg&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">setName(person); </span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p>当 obj 在函数内部被重写时，它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁了</p><h4 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h4><p>typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式</p><p>如果变量是给定引用类型（由其原型链决定）的实例，则 instanceof 操作符返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// 变量 person 是 Object 吗？</span></span><br><span class="line"><span class="built_in">console</span>.log(colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// 变量 colors 是 Array 吗？</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>); <span class="comment">// 变量 pattern 是 RegExp 吗？</span></span><br></pre></td></tr></table></figure><h3 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h3>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion学习</title>
      <link href="/2024/07/13/Notion%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/13/Notion%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1EP4y1s7Bp/?spm_id_from=333.999.0.0&vd_source=24e1f88288ffbace998812c2966fe8fe">【Notion公开课 课时1】知识管理神器——Notion保姆级教程 课时1 认识Notion 印象笔记最佳替代品 持续更新中 by 清单控沙牛_哔哩哔哩_bilibili</a></p><h2 id="⻚⾯模块"><a href="#⻚⾯模块" class="headerlink" title="⻚⾯模块"></a>⻚⾯模块</h2><h3 id="基础排版"><a href="#基础排版" class="headerlink" title="基础排版"></a>基础排版</h3><ul><li>⽂本（Text）<ul><li>每个段落皆为区块</li></ul></li><li>⻚⾯（Page）</li><li>待办事项列表（Todo list）</li><li>分级标题（H1 - H3）<ul><li>快捷符号：#</li></ul></li><li>⽆序列表（Bulleted list）<ul><li>快捷符号：*</li></ul></li><li>有序列表（Numbered list）<ul><li>快捷符号：1.</li></ul></li><li>折叠列表（Toggle list）<ul><li>快捷符号：&gt;</li><li>场景：问题和答案</li></ul></li><li>引⽤（Quote）</li><li>分割线（Divider）</li><li>链接到⻚⾯（Link to page）</li><li>标注（Callout）<h3 id="元素的转换和样式"><a href="#元素的转换和样式" class="headerlink" title="元素的转换和样式"></a>元素的转换和样式</h3></li><li>List –&gt; Todo list</li><li>样式：⽂本和背景颜⾊ </li><li>Tip：⾃⼰的笔记样式表<h3 id="⾏内模块"><a href="#⾏内模块" class="headerlink" title="⾏内模块"></a>⾏内模块</h3></li><li>提及⼈员（Mention a person）<ul><li>快捷符号（@）</li></ul></li><li>提及⻚⾯（Mention a page）<ul><li>快捷符号（@）</li><li>Tip：可输⼊⽂本搜索⻚⾯</li></ul></li><li>⽇期或提醒（Date or reminder）<ul><li>快捷符号：@mm.dd.yyyy</li></ul></li><li>表情（Emoji）</li><li>公式（Inline equation）<h3 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h3></li><li>图⽚（⽀持复制）</li><li>书签</li><li>视频</li><li>⾳频</li><li>代码</li><li>⽂件<h3 id="嵌⼊块"><a href="#嵌⼊块" class="headerlink" title="嵌⼊块"></a>嵌⼊块</h3><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131037616.png" alt="image.png|400"><h3 id="⾼级块"><a href="#⾼级块" class="headerlink" title="⾼级块"></a>⾼级块</h3></li><li>⽬录<ul><li><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131316362.png"></li></ul></li><li>⽅程式块</li><li>模板按钮</li><li>导航栏</li><li>同步块</li></ul><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131330894.png" alt="image.png"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><h4 id="13个模块"><a href="#13个模块" class="headerlink" title="13个模块"></a>13个模块</h4><p>整页<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131334416.png" alt="image.png"><br>内嵌<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131334284.png" alt="image.png"></p><h4 id="6种类型"><a href="#6种类型" class="headerlink" title="6种类型"></a>6种类型</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131336451.png" alt="image.png"></p><h3 id="数据库的要素"><a href="#数据库的要素" class="headerlink" title="数据库的要素"></a>数据库的要素</h3><ul><li>属性：展现什么</li><li>视图：怎样展现</li><li>模板：快速编辑</li></ul><h3 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h3><ul><li>模板</li><li>筛选</li><li>排序</li><li>创建数据库的链接-&gt;筛选</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 元技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm下载与使用</title>
      <link href="/2024/07/13/nvm%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/07/13/nvm%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><h3 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1. 下载地址"></a>1. 下载地址</h3><p><a href="https://github.com/coreybutler/nvm-windows/releases">Site Unreachable</a><br>![[Pasted image 20240116162233.png|475]]</p><h3 id="2-两个路径"><a href="#2-两个路径" class="headerlink" title="2. 两个路径"></a>2. 两个路径</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401161625479.png" alt="image.png|475"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401161626799.png" alt="image.png|475"></p><h3 id="3-安装好后，查看一下对应的文件夹及环境变量（环境变量自动配置）"><a href="#3-安装好后，查看一下对应的文件夹及环境变量（环境变量自动配置）" class="headerlink" title="3. 安装好后，查看一下对应的文件夹及环境变量（环境变量自动配置）"></a>3. 安装好后，查看一下对应的文件夹及环境变量（环境变量自动配置）</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401161627385.png" alt="image.png"></p><h3 id="4-nvm-换镜像源"><a href="#4-nvm-换镜像源" class="headerlink" title="4. nvm 换镜像源"></a>4. nvm 换镜像源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h3 id="5-安装所需的-node-版本"><a href="#5-安装所需的-node-版本" class="headerlink" title="5. 安装所需的 node 版本"></a>5. 安装所需的 node 版本</h3><p><code>nvm list available</code> 查看当前可用版本<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401161630347.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.20.0 下载</span><br><span class="line">nvm use 16.20.0 切换到已安装的版本</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nvm install &lt;version&gt;        <span class="comment">//安装指定版本的 Node.js。</span></span><br><span class="line">#例如，nvm install <span class="number">16.20</span><span class="number">.0</span> 将安装 Node.js 的 <span class="number">16.20</span><span class="number">.0</span> 版本。</span><br><span class="line">nvm use &lt;version&gt;            <span class="comment">//切换使用指定版本的 Node.js。</span></span><br><span class="line">#例如，nvm use <span class="number">16.20</span><span class="number">.0</span> 将设置当前会话中使用 Node.js 的 <span class="number">16.20</span><span class="number">.0</span> 版本。</span><br><span class="line">nvm list                     <span class="comment">//列出已安装的所有 Node.js 版本。</span></span><br><span class="line">#例如，nvm list 它将显示已安装的版本列表，并在当前使用的版本旁边加上一个箭头标记。</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt;   <span class="comment">//创建一个别名以便更方便地引用特定的 Node.js 版本。</span></span><br><span class="line">#例如，nvm alias <span class="keyword">default</span> <span class="number">16.20</span><span class="number">.0</span> 将创建一个名为 <span class="string">&quot;default&quot;</span> 的别名，指向 Node.js 的 <span class="number">16.20</span><span class="number">.0</span> 版本。</span><br><span class="line">nvm uninstall &lt;version&gt;      <span class="comment">//卸载指定的 Node.js 版本。</span></span><br><span class="line">#例如，nvm uninstall <span class="number">16.20</span><span class="number">.0</span> 将卸载 Node.js 的 <span class="number">16.20</span><span class="number">.0</span> 版本。</span><br><span class="line">nvm current                  <span class="comment">//显示当前正在使用的 Node.js 版本。</span></span><br><span class="line">#例如，nvm current 将显示正使用的V16<span class="number">.20</span><span class="number">.0</span> 版本</span><br><span class="line">nvm use <span class="keyword">default</span>              <span class="comment">//切换到默认的 Node.js 版本（由 nvm alias 命令设置的别名）。</span></span><br><span class="line">#例如，nvm use <span class="keyword">default</span> 将切换到刚刚设置<span class="keyword">default</span>别名的<span class="number">16.20</span><span class="number">.0</span>版本</span><br><span class="line">nvm exec &lt;version&gt; &lt;command&gt; <span class="comment">//在指定版本的 Node.js 环境中执行特定的命令。</span></span><br><span class="line">#例如，nvm exec <span class="number">16.20</span><span class="number">.0</span> node app.js 将使用 Node.js 的 <span class="number">16.20</span><span class="number">.0</span> 版本来运行 app.js 文件。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 元技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ob使用笔记</title>
      <link href="/2024/07/13/ob%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/13/ob%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-链接"><a href="#1-链接" class="headerlink" title="1. 链接"></a>1. 链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.[[title]]</span><br><span class="line">2.[[title#段名]]</span><br><span class="line">3.[[title#^块名]]</span><br><span class="line">4.[[title#^块名|别名]]</span><br><span class="line">5.![[title#^块名|别名]]     展现在当前页面</span><br></pre></td></tr></table></figure><h2 id="2-搜索"><a href="#2-搜索" class="headerlink" title="2. 搜索"></a>2. 搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">搜索当前文档：Ctrl + F</span><br><span class="line">搜索整个资料库：Ctrl/Cmd + Shfift + F</span><br><span class="line"></span><br><span class="line">搜索技巧</span><br><span class="line">搜索包含多个关键词的文档（空格间隔，与）</span><br><span class="line">搜索包含某一个关键词的文档（OR，或）</span><br><span class="line"></span><br><span class="line">指定搜索范围</span><br><span class="line">文件名中包含word——file:word</span><br><span class="line">文本内容包含word——content:word</span><br><span class="line">标签文章内包含word——tag:#tag:word</span><br><span class="line"></span><br><span class="line">同一行中的多个关键词——line：word1 word2</span><br><span class="line">同一章节中的多个关键词——section：word1 word2</span><br><span class="line">同一段落（块）中的多个关键词——block：word1 word2</span><br><span class="line"></span><br><span class="line">搜索任务</span><br><span class="line">搜索所有任务——task:&quot;&quot;</span><br><span class="line">搜索未完成任务——task-todo:&quot;&quot;</span><br><span class="line">搜索已完成任务——task-done:&quot;&quot;</span><br><span class="line"></span><br><span class="line">引用搜索内容</span><br><span class="line">```query</span><br><span class="line">file:word</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3. 已设置的快捷键</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> ctrl + shift + C  折叠右边<br> ctrl + shift + V  折叠左边<br> ctrl + shift + [  拆分左右<br> ctrl + shift + ]  拆分上下<br> alt + E 展开/折叠当前行<br> alt + F 展开所有</p><p> alt + 3 插入内链<br> alt + C 插入代码块<br> alt + B 插入引用<br> ctrl + t  插入模板</p><p> ctrl + N  新建文件</p><p> ctrl + shift + G  关系图谱：打开局部关系图<br> ctrl + G  关系图谱：打开全部关系图<br> ctrl + W  关闭当前标签页<br> ctrl + Q  源码/视图切换</p><p> ctrl + shift + Z  suffing获取浏览器当前时间戳</p><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 元技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元技能 - 完整系统</title>
      <link href="/2024/07/13/%E5%85%83%E6%8A%80%E8%83%BD%20-%20%E5%AE%8C%E6%95%B4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/13/%E5%85%83%E6%8A%80%E8%83%BD%20-%20%E5%AE%8C%E6%95%B4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="信息库-joplin"><a href="#信息库-joplin" class="headerlink" title="信息库 - joplin"></a>信息库 - joplin</h2><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><ul><li>00_Inbox 收件箱</li><li>00_Tmp 不需要的暂存信息</li><li>01_学习</li><li>02_项目<h3 id="笔记规则"><a href="#笔记规则" class="headerlink" title="笔记规则"></a>笔记规则</h3><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131917912.png" alt="image.png"></li></ul><h2 id="管理系统-Notion"><a href="#管理系统-Notion" class="headerlink" title="管理系统 - Notion"></a>管理系统 - Notion</h2><h3 id="整体结构-1"><a href="#整体结构-1" class="headerlink" title="整体结构"></a>整体结构</h3><ul><li>00_Inbox 临时记录/收件箱</li><li>00_ING 正在处理的项目<ul><li>PJ_考研</li><li>PJ_学习_java</li></ul></li><li>00_TMP 不需要的暂存信息</li><li>01_学习记录<ul><li>01_阅读记录（数据库呈现）</li><li>02_课程记录（数据库呈现）</li><li>03_文献记录（数据库呈现）</li></ul></li><li>02_项目记录<ul><li>PJ_考研</li><li>PJ_学习_java</li></ul></li><li>03_折腾记录</li></ul><h3 id="笔记规则-1"><a href="#笔记规则-1" class="headerlink" title="笔记规则"></a>笔记规则</h3><ol><li>一、二级页面需设置封面以及图标</li><li>收集类内容在前，思考类内容其次，详细信息最后</li><li>通常情况下，所有内容最多使用至三级标题</li><li>文档中，标题须根据级别使用背景色，如下：<ul><li>一级标题 Red</li><li>二级标题 Blue</li><li>三级标题 Green</li></ul></li></ol><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><h4 id="底层方法"><a href="#底层方法" class="headerlink" title="底层方法"></a>底层方法</h4><p>OKR 工作法<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141230571.png" alt="image.png|475"><br>GTD<br>第一步：工具 notion<br>第二步：将所有事情不做评判的全部记录到工具上<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141236972.png" alt="image.png|450"><br>第三步：在每天固定时间或需要时处理—分类/分解—参考资料清单/将来也许清单/项目清单/执行清单<br>例如：</p><ul><li>参考资料清单（一篇看到的不错的文章）；</li><li>将来也许清单（想去 xx 玩）；</li><li>项目清单（制作 notion 视频）；</li><li>执行清单（分解制作 notion 视频任务）<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141239108.png" alt="image.png|450"></li></ul><p>执行清单：</p><ul><li>经过分解的，能一步完成的事情；</li><li>用番茄工作法预估工作时间（番茄钟里只做一件事）<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141241828.png" alt="image.png|375"><br>第四步：每周整理复盘<h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141251774.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141253499.png" alt="image.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 元技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滴答清单使用技巧</title>
      <link href="/2024/07/13/%E6%BB%B4%E7%AD%94%E6%B8%85%E5%8D%95%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/13/%E6%BB%B4%E7%AD%94%E6%B8%85%E5%8D%95%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 状态标签</span><br><span class="line">!focus </span><br><span class="line">!review </span><br><span class="line">!todo</span><br><span class="line">2. 番茄数标签</span><br><span class="line">xpomo</span><br><span class="line">3. 清单类别</span><br><span class="line">checklist </span><br><span class="line">memolist </span><br><span class="line">flowlis</span><br></pre></td></tr></table></figure><h2 id="快速添加-alt-shift-D"><a href="#快速添加-alt-shift-D" class="headerlink" title="快速添加(alt+shift+D)"></a>快速添加(alt+shift+D)</h2><pre><code>1. 全局快捷键 符号（英文状态）     !：优先级     #：标签     ~ ^：清单 编号的意义     @：人员     *：到期日 2. 智能识别     单次        日         周x         月x     循环         每天         每周        每月         农历</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 元技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙牛清单-元技能实训课</title>
      <link href="/2024/07/13/%E6%B2%99%E7%89%9B%E6%B8%85%E5%8D%95-%E5%85%83%E6%8A%80%E8%83%BD%E5%AE%9E%E8%AE%AD%E8%AF%BE/"/>
      <url>/2024/07/13/%E6%B2%99%E7%89%9B%E6%B8%85%E5%8D%95-%E5%85%83%E6%8A%80%E8%83%BD%E5%AE%9E%E8%AE%AD%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-知识管理"><a href="#1-知识管理" class="headerlink" title="1. 知识管理"></a>1. 知识管理</h2><h3 id="知识管理的认知"><a href="#知识管理的认知" class="headerlink" title="知识管理的认知"></a>知识管理的认知</h3><p><strong>知识管理 ＝ 知识 + 管理</strong></p><ul><li>能够解决具体问题的信息，才是知识</li><li>知识的四个象限<br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401090913936.png" alt="image.png"></li><li>两个资料库：知识库，信息库</li></ul><p><strong>知识管理的最佳方案</strong></p><ul><li>用不同的工具，管理不同类型的知识和信息</li><li>建立包含规则和流程的系统，尽可能少管理</li><li>使用资料库</li><li>以使用为目的</li></ul><p><strong>总结</strong></p><ul><li>知识管理 = 知识 + 管理</li><li>知识 = 知识库 + 信息库</li><li>管理 = 规则 + 流程</li></ul><h3 id="知识管理的步骤"><a href="#知识管理的步骤" class="headerlink" title="知识管理的步骤"></a>知识管理的步骤</h3><ul><li><strong>学习知识</strong><br>  <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401090929743.png" alt="image.png"></li><li><strong>保存知识</strong><br>  用文件系统+资料库的方式，呈现知识库和信息库</li><li><strong>使用知识</strong><br>  只有能够解决具体问题或改变行动的信息，才是知识</li><li><strong>共享知识</strong><br>  用通俗易懂的语言分享给别人</li><li><strong>创新知识</strong><ul><li>创新，绝不是拍脑袋</li><li>主题阅读</li><li>使用知识</li><li>共享知识</li></ul></li></ul><p><strong>总结</strong><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401090939835.png" alt="image.png"></p><h3 id="建设知识管理系统的目标和思路"><a href="#建设知识管理系统的目标和思路" class="headerlink" title="建设知识管理系统的目标和思路"></a>建设知识管理系统的目标和思路</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401090944238.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401090949270.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401090956161.png" alt="image.png"></p><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><h4 id="1-利用Joplin收集形成信息库"><a href="#1-利用Joplin收集形成信息库" class="headerlink" title="1. 利用Joplin收集形成信息库"></a>1. 利用Joplin收集形成信息库</h4><h5 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1 分类"></a>1.1 分类</h5><ul><li>学习信息库</li><li>想法信息库</li><li>备用信息库</li><li>个人信息库</li><li>家庭信息库</li></ul><h5 id="1-2-流程"><a href="#1-2-流程" class="headerlink" title="1.2 流程"></a>1.2 流程</h5><ul><li>收集</li><li>整理</li><li>使用</li><li>处理<ul><li>知识库</li><li>存档</li><li>删除<h4 id="2-利用obsidian学习形成知识库"><a href="#2-利用obsidian学习形成知识库" class="headerlink" title="2. 利用obsidian学习形成知识库"></a>2. 利用obsidian学习形成知识库</h4><h5 id="2-1-学习课程"><a href="#2-1-学习课程" class="headerlink" title="2.1 学习课程"></a>2.1 学习课程</h5></li></ul></li></ul><ol><li>快速记下关键词</li><li>事后整理<ul><li><strong>三维结构</strong><ul><li>是什么？– What？</li><li>有什么用？– Why？</li><li>如何做？– How？</li></ul></li><li>链接</li><li>切图<h5 id="2-2-阅读"><a href="#2-2-阅读" class="headerlink" title="2.2 阅读"></a>2.2 阅读</h5></li></ul></li></ol><ul><li>层级清单笔记</li><li>两种笔记<ul><li>过程中<ul><li>记录</li></ul></li><li>阅读后<ul><li>整理</li><li>回想清单</li></ul></li></ul></li></ul><h5 id="2-3-写作"><a href="#2-3-写作" class="headerlink" title="2.3 写作"></a>2.3 写作</h5><ul><li>场景<ul><li>学习后的输出<ul><li>长文</li><li>思考笔记</li><li>经验分享文章</li></ul></li></ul></li><li>流程<ul><li>列出结构清单—-纸笔/思维导图</li><li>Ob成文</li><li>片段提炼<ul><li>分类</li><li>复用</li></ul></li></ul></li><li><strong>技巧</strong><ul><li>先列出想法</li><li>将想法分类</li><li>将类别排序</li></ul></li></ul><h5 id="2-4-计划-amp-复盘"><a href="#2-4-计划-amp-复盘" class="headerlink" title="2.4 计划 &amp; 复盘"></a>2.4 计划 &amp; 复盘</h5><h6 id="整体思路-1"><a href="#整体思路-1" class="headerlink" title="整体思路"></a>整体思路</h6><ul><li>以周为单位</li><li>每周末对本周进行复盘、对下一周进行计划</li><li>将工作和学习的过程完整体现出来<h6 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h6></li><li>计划<ol><li>MIT：下一周最重要的几件事</li><li>日程：下一周有着明确日期的事情</li><li>其他事项：下一周需要完成的其他事</li></ol></li><li>周记录：用链接的方式对本周做的事进行一个总结<ul><li><input checked="" disabled="" type="checkbox"> [[20240109_周二]] 学习了xxxx</li></ul></li><li>周复盘<ul><li>思考：取得的结果不太满意-&gt;如何改进</li><li>经验：可以复用的东西</li><li>后期待办：还未完成/不太完美</li></ul></li></ul><h5 id="2-5-如何管理知识"><a href="#2-5-如何管理知识" class="headerlink" title="2.5 如何管理知识"></a>2.5 如何管理知识</h5><ul><li><p>文件夹</p><ul><li>用途：is</li></ul></li><li><p>标签</p><ul><li>用途：has</li><li><strong>分类</strong><ul><li>属性标签</li><li>状态标签<ul><li>input 收集的信息</li><li>todo：需要尽快处理的</li><li>review：需要回顾的</li><li>focus：需要特别关注的</li><li>tmp：临时文件</li></ul></li><li>价值标签<ul><li>★</li><li>★★</li><li>★★★</li></ul></li></ul></li></ul></li><li><p>标注/重点标记·</p><pre><code>==这是一个标注==</code></pre></li><li><p>片段提取：提取可复用的东西</p></li><li></li></ul><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131654043.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131655419.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131902107.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131655433.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131655795.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131657731.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401131657966.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/20240113165613.png" alt="image.png"></p><h2 id="2-高效学习"><a href="#2-高效学习" class="headerlink" title="2. 高效学习"></a>2. 高效学习</h2><h3 id="训练专注力的方法"><a href="#训练专注力的方法" class="headerlink" title="训练专注力的方法"></a>训练专注力的方法</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401101453835.png" alt="image.png"><br><strong>冥想</strong></p><h3 id="六种重要的思维"><a href="#六种重要的思维" class="headerlink" title="六种重要的思维"></a>六种重要的思维</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401101456472.png" alt="image.png"></p><ul><li>全局思维<ul><li>学习的目标是什么？</li><li>通过什么方式学习？</li><li>从哪些书入书？</li><li>花多少的时间？</li></ul></li><li>记录思维<ul><li>学习前 - 全局思维</li><li>学习中 - 记笔记</li><li>学习后 - 复盘</li></ul></li><li>规范思维<ul><li>学习的流程规范</li><li>知识结构的规范</li><li>笔记的规范</li></ul></li><li>统计思维<ul><li>学习xx花了多少时间？</li><li>学习xx的效果怎么样？</li><li>是什么影响了学习效果？</li><li>改变它，学习效果能否提升？</li></ul></li><li>分享思维<ul><li>回想知识</li><li>组织结构</li><li>设想问题</li></ul></li><li>复盘思维<ul><li>学习了哪些知识？</li><li>他们的三维结构是怎样的？</li><li>我如何应用它们？</li><li>跟我之前的知识有何关联？</li></ul></li></ul><h3 id="清单学习法"><a href="#清单学习法" class="headerlink" title="清单学习法"></a>清单学习法</h3><p><strong>主要思想：依靠清单(关键字)来回忆内容 -&gt; 让大脑思考起来</strong></p><ul><li>工具<ul><li>A4方格纸（notability）</li><li>三种颜色的笔<ul><li>第一种颜色：原始记录 - 黑</li><li>第二种颜色：标记 - 红<ul><li>▲ ：代表重点</li><li>！：代表要注意的地方</li><li>？：代表有问题的地方</li></ul></li><li>第三种颜色：复习时的新思考 - 蓝</li></ul></li></ul></li><li>整体流程<ol><li>记录<ul><li>层级</li><li>关键词</li></ul></li><li>回想<ul><li>艾宾浩斯记忆曲线</li></ul></li></ol></li></ul><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401101542459.png" alt="image.png"><br>注意知识点之间的联系可以对其进行标记、引用<br><strong>三维结构</strong><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401101510578.png" alt="image.png"></p><h3 id="整体思路-2"><a href="#整体思路-2" class="headerlink" title="整体思路"></a>整体思路</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401101554574.png" alt="image.png"></p><ol><li>收集 -&gt; 形成信息库(Joplin)</li><li>学习<ul><li>课程/书籍 -&gt; 记录清单笔记</li><li>文章 -&gt; 进行脱水，精简为对我有用的知识</li></ul></li><li>整理/精简</li><li>记忆 <ul><li>利用清单笔记进行回想(艾宾浩斯记忆曲线)</li><li>利用Anki记忆特别需要记忆的东西 </li></ul></li><li>实践<ul><li>运用所记忆的知识点</li></ul></li><li>输出</li></ol><h3 id="关于阅读"><a href="#关于阅读" class="headerlink" title="关于阅读"></a>关于阅读</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111512804.png" alt="image.png|500"></p><h4 id="阅读的时间-：建议一周左右"><a href="#阅读的时间-：建议一周左右" class="headerlink" title="阅读的时间 ：建议一周左右"></a>阅读的时间 ：建议一周左右</h4><h4 id="阅读速度"><a href="#阅读速度" class="headerlink" title="阅读速度"></a><strong>阅读速度</strong></h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111526166.png" alt="image.png|500"></p><ul><li>指读法：刻意提升手指的移动速度</li><li>3-2-1练习法<ul><li>3分钟读3页</li><li>2分钟再读这3页</li><li>1分钟再读这3页</li></ul></li><li>2-2-2练习法<ul><li>2分钟读2页</li><li>再2分钟读4页</li><li>再2分钟读6页</li></ul></li><li>2000字/分钟练习法<ul><li>1分钟读2000字 (大概4页)</li></ul></li></ul><h4 id="阅读的技巧"><a href="#阅读的技巧" class="headerlink" title="阅读的技巧"></a>阅读的技巧</h4><p><strong>每天记得回想</strong><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111533055.png" alt="image.png|450"></p><h4 id="四个层次"><a href="#四个层次" class="headerlink" title="四个层次"></a>四个层次</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111517400.png" alt="image.png|252"></p><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111523382.png" alt="image.png|272"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111524791.png" alt="image.png|272"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111524211.png" alt="image.png|286"><br>Step 4. 每天回想<br>Step 5. 主题阅读<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111856080.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111859359.png" alt="image.png|220"><br>学习目的<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111921579.png" alt="image.png|475"><br>为什么要打造学习的系统？<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401111923380.png" alt="image.png|274"></p><h3 id="整体-notion-的学习系统"><a href="#整体-notion-的学习系统" class="headerlink" title="整体 notion 的学习系统"></a>整体 notion 的学习系统</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112110538.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112111524.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112112244.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112110138.png" alt="image.png"></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="学习记录页面"><a href="#学习记录页面" class="headerlink" title="学习记录页面"></a>学习记录页面</h5><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112112047.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112113671.png" alt="image.png"></p><h5 id="计划表中某一个计划页面"><a href="#计划表中某一个计划页面" class="headerlink" title="计划表中某一个计划页面"></a>计划表中某一个计划页面</h5><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112116981.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112116341.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112117798.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112118629.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112121150.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112122174.png" alt="image.png"><br>注意事项：4. 参考资料可以用 Joplin 对单个文章导出外部链接</p><h5 id="要阅读的书中某一本书"><a href="#要阅读的书中某一本书" class="headerlink" title="要阅读的书中某一本书"></a>要阅读的书中某一本书</h5><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112124386.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112125412.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112125445.png" alt="image.png"><br>知识库的页面<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401112131056.png" alt="image.png"></p><h2 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401120901883.png" alt="image.png|165"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401120906635.png" alt="image.png"><br>Tip：有提示的清单</p><h3 id="列成清单"><a href="#列成清单" class="headerlink" title="列成清单"></a>列成清单</h3><ul><li>每周末将下一周的待办事项列成清单</li><li>使用滴答清单对其进行分类</li></ul><h3 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h3><p>所需工具</p><ul><li>待办事项清单</li><li>番茄时间记录表</li><li>计时器<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401120914131.png" alt="image.png|575"><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401120922486.png" alt="image.png|500"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401120923365.png" alt="image.png"><br>滴答清单<br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401121016374.png" alt="image.png"><h3 id="整体系统"><a href="#整体系统" class="headerlink" title="整体系统"></a>整体系统</h3><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401121039960.png"> <img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401121041332.png" alt="image.png"><br><img src="https://picgocloud.oss-cn-shanghai.aliyuncs.com/picgo/202401141007058.png" alt="image.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 元技能 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
